let correctMenuPosition = false;

function setup(viewer) { 
    viewer.setHeight(400);
    viewer.setWidth(400);
    viewer.userContextMenuHandler = (selected, x, y, intersects) => {
        openMenu(viewer, selected, x, y, intersects);
    }
    viewer.zoomTo();

    // atoms have to be clickable to support context menu
    viewer.setClickable({}, true);
    viewer.enableContextMenu({},true);
    viewer.render( );

    // Emulate a contextmenu event for the 2-oclock H.
    // Since this is a synthetic event (not actually generated by the browser),
    // It will get processed by closeEnoughForClick, which checks mouseStartX/Y.
    // Trigger mousedown first so mouseStartX/Y is captured.
    const evt = { pageX: 398, pageY: 274, preventDefault: () => {}};
    viewer._handleMouseDown(evt);
    viewer._handleContextMenu(evt);
};

function closeMenu() {
    document.getElementById('menu').style.display = 'none';
}

function openMenu(viewer, selected, x, y, intersects) {
    const type = targetType(selected);
    const menuElt = document.getElementById('menu');
    const menuTargetElt = document.getElementById('menu_target_label');
    const [menuItem1, menuItem2, menuItem3, menuItem4] = [1, 2, 3, 4].map(
        (n) => document.getElementById(`menu-item-${n}`)
    );

    function finishMenu() { viewer.render(); closeMenu(); }
    function positionMenu() {
        const offsetX = 100; // left style of "parent" elt
        const offsetY = 100; // top style of "parent" elt
        menuElt.style.left = x + (correctMenuPosition ? offsetX : 0);
        menuElt.style.top = y + (correctMenuPosition ? offsetY : 0);
        menuElt.style.display = 'block';
        const correctionVerb = correctMenuPosition ? 'Disable' : 'Enable';
        menuItem3.innerText = `${correctionVerb} Menu Position Correction`;
    }
    const sphereBase = {
        color: 'purple', radius: 1.0, alpha: 0.4, contextMenuEnabled: true,
    };
    const menuData = {
        atom: {
            label: `atom ${selected?.atom}`,
            itemLabel: 'Show Sphere Around Atom',
            itemAction: () => {
                viewer.addSphere({ center: selected, ...sphereBase });
                finishMenu();
            },
        },
        shape: {
            label: 'shape',
            itemLabel: 'Remove Sphere',
            itemAction: () => {
                viewer.removeShape(selected);
                finishMenu();
            },
        },
        nothing: {
            label: 'nothing',
            itemLabel: 'Draw Sphere at Origin',
            itemAction: () => {
                viewer.addSphere({center:{x: 0, y: 0, z: 0}, ...sphereBase });
                finishMenu();
            },
        },
    };

    const { label, itemLabel, itemAction } = menuData[type];
    menuTargetElt.innerText = label;
    menuItem1.innerText = itemLabel;
    menuItem1.onclick = itemAction;
    menuItem2.onclick = () => {
        viewer.removeAllShapes();
        finishMenu();
    };
    menuItem3.onclick = () => {
        correctMenuPosition = !correctMenuPosition;
        positionMenu();
    };

    positionMenu();
}

function targetType(selected) {
    if (!selected) return 'nothing';
    return selected.atom ? 'atom' : 'shape';
}

  /* @div
  <div>
    <div id="parent" style="position: absolute; left: 100px; top: 100px; border: black solid 1px;">
      <div  class='viewer_3Dmoljs'  style="width: 400px; height: 400px;" data-backgroundColor="white" data-href="../test_structs/benzene.sdf" data-style="stick" data-callback='setup'></div>
    </div>
    <div id="menu" style="display: none; position: absolute; background-color: white; color: blue; border: solid blue 2px; z-index: 100;">
      <div>Clicked on <span id="menu_target_label"></span></div>
      <div style="display:flex; flex-direction: column;">
      <button id="menu-item-1"></button>
      <button id="menu-item-2">Remove All Spheres</button>
      <button id="menu-item-3"></button>
      <button id="menu-item-4" onclick="closeMenu()">Close</button>
      </div>
    </div>
  </div>
*/


