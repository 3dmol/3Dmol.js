var THREE=THREE||{REVISION:"49"};self.Int32Array||(self.Int32Array=Array,self.Float32Array=Array);
(function(){for(var a=0,b=["ms","moz","webkit","o"],c=0;c<b.length&&!window.requestAnimationFrame;++c)window.requestAnimationFrame=window[b[c]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[b[c]+"CancelAnimationFrame"]||window[b[c]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(b){var c=Date.now(),f=Math.max(0,16-(c-a)),h=window.setTimeout(function(){b(c+f)},f);a=c+f;return h});window.cancelAnimationFrame||(window.cancelAnimationFrame=
function(a){clearTimeout(a)})})();THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};THREE.Clock.prototype.start=function(){this.oldTime=this.startTime=Date.now();this.running=!0};THREE.Clock.prototype.stop=function(){this.getElapsedTime();this.running=!1};THREE.Clock.prototype.getElapsedTime=function(){return this.elapsedTime+=this.getDelta()};
THREE.Clock.prototype.getDelta=function(){var a=0;this.autoStart&&!this.running&&this.start();if(this.running){var b=Date.now(),a=0.001*(b-this.oldTime);this.oldTime=b;this.elapsedTime+=a}return a};THREE.Color=function(a){void 0!==a&&this.setHex(a);return this};
THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,copy:function(a){this.r=a.r;this.g=a.g;this.b=a.b;return this},copyGammaToLinear:function(a){this.r=a.r*a.r;this.g=a.g*a.g;this.b=a.b*a.b;return this},copyLinearToGamma:function(a){this.r=Math.sqrt(a.r);this.g=Math.sqrt(a.g);this.b=Math.sqrt(a.b);return this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);
this.b=Math.sqrt(this.b);return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSV:function(a,b,c){var d,e,f;if(0===c)this.r=this.g=this.b=0;else switch(d=Math.floor(6*a),e=6*a-d,a=c*(1-b),f=c*(1-b*e),b=c*(1-b*(1-e)),d){case 1:this.r=f;this.g=c;this.b=a;break;case 2:this.r=a;this.g=c;this.b=b;break;case 3:this.r=a;this.g=f;this.b=c;break;case 4:this.r=b;this.g=a;this.b=c;break;case 5:this.r=c;this.g=a;this.b=f;break;case 6:case 0:this.r=c,this.g=b,this.b=a}return this},setHex:function(a){a=
Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},lerpSelf:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;this.b+=(a.b-this.b)*b;return this},getHex:function(){return Math.floor(255*this.r)<<16^Math.floor(255*this.g)<<8^Math.floor(255*this.b)},getContextStyle:function(){return"rgb("+Math.floor(255*this.r)+","+Math.floor(255*this.g)+","+Math.floor(255*this.b)+")"},clone:function(){return(new THREE.Color).setRGB(this.r,this.g,this.b)}};
THREE.Vector2=function(a,b){this.x=a||0;this.y=b||0};
THREE.Vector2.prototype={constructor:THREE.Vector2,set:function(a,b){this.x=a;this.y=b;return this},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},addSelf:function(a){this.x+=a.x;this.y+=a.y;return this},sub:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},subSelf:function(a){this.x-=a.x;this.y-=a.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},divideScalar:function(a){a?(this.x/=a,this.y/=a):this.set(0,
0);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.lengthSq())},normalize:function(){return this.divideScalar(this.length())},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x;a=this.y-a.y;return b*b+a*a},setLength:function(a){return this.normalize().multiplyScalar(a)},lerpSelf:function(a,
b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y},isZero:function(){return 1E-4>this.lengthSq()},clone:function(){return new THREE.Vector2(this.x,this.y)}};THREE.Vector3=function(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0};
THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},addSelf:function(a){this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},
sub:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},subSelf:function(a){this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},multiply:function(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},multiplySelf:function(a){this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;return this},divideSelf:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){a?(this.x/=a,this.y/=a,this.z/=a):
this.z=this.y=this.x=0;return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.lengthSq())},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){return this.normalize().multiplyScalar(a)},lerpSelf:function(a,b){this.x+=
(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},cross:function(a,b){this.x=a.y*b.z-a.z*b.y;this.y=a.z*b.x-a.x*b.z;this.z=a.x*b.y-a.y*b.x;return this},crossSelf:function(a){var b=this.x,c=this.y,d=this.z;this.x=c*a.z-d*a.y;this.y=d*a.x-b*a.z;this.z=b*a.y-c*a.x;return this},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){return(new THREE.Vector3).sub(this,a).lengthSq()},getPositionFromMatrix:function(a){this.x=a.elements[12];
this.y=a.elements[13];this.z=a.elements[14];return this},getRotationFromMatrix:function(a,b){var c=b?b.x:1,d=b?b.y:1,e=b?b.z:1,f=a.elements[0]/c,h=a.elements[4]/d,c=a.elements[1]/c,d=a.elements[5]/d,j=a.elements[9]/e,k=a.elements[10]/e;this.y=Math.asin(a.elements[8]/e);e=Math.cos(this.y);1E-5<Math.abs(e)?(this.x=Math.atan2(-j/e,k/e),this.z=Math.atan2(-h/e,f/e)):(this.x=0,this.z=Math.atan2(c,d));return this},getScaleFromMatrix:function(a){var b=this.set(a.elements[0],a.elements[1],a.elements[2]).length(),
c=this.set(a.elements[4],a.elements[5],a.elements[6]).length();a=this.set(a.elements[8],a.elements[9],a.elements[10]).length();this.x=b;this.y=c;this.z=a},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},isZero:function(){return 1E-4>this.lengthSq()},clone:function(){return new THREE.Vector3(this.x,this.y,this.z)}};THREE.Vector4=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},addSelf:function(a){this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},sub:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},subSelf:function(a){this.x-=
a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;this.w*=a;return this},divideScalar:function(a){a?(this.x/=a,this.y/=a,this.z/=a,this.w/=a):(this.z=this.y=this.x=0,this.w=1);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.dot(this)},length:function(){return Math.sqrt(this.lengthSq())},normalize:function(){return this.divideScalar(this.length())},
setLength:function(a){return this.normalize().multiplyScalar(a)},lerpSelf:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,this.w)}};THREE.Frustum=function(){this.planes=[new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4]};
THREE.Frustum.prototype.setFromMatrix=function(a){var b,c=this.planes,d=a.elements;a=d[0];b=d[1];var e=d[2],f=d[3],h=d[4],j=d[5],k=d[6],l=d[7],m=d[8],n=d[9],q=d[10],p=d[11],r=d[12],u=d[13],s=d[14],d=d[15];c[0].set(f-a,l-h,p-m,d-r);c[1].set(f+a,l+h,p+m,d+r);c[2].set(f+b,l+j,p+n,d+u);c[3].set(f-b,l-j,p-n,d-u);c[4].set(f-e,l-k,p-q,d-s);c[5].set(f+e,l+k,p+q,d+s);for(a=0;6>a;a++)b=c[a],b.divideScalar(Math.sqrt(b.x*b.x+b.y*b.y+b.z*b.z))};
THREE.Frustum.prototype.contains=function(a){for(var b=this.planes,c=a.matrixWorld,d=c.elements,c=-a.geometry.boundingSphere.radius*c.getMaxScaleOnAxis(),e=0;6>e;e++)if(a=b[e].x*d[12]+b[e].y*d[13]+b[e].z*d[14]+b[e].w,a<=c)return!1;return!0};THREE.Frustum.__v1=new THREE.Vector3;
THREE.Ray=function(a,b){function c(a,b,c){r.sub(c,a);y=r.dot(b);D=u.add(a,s.copy(b).multiplyScalar(y));return z=c.distanceTo(D)}function d(a,b,c,d){r.sub(d,b);u.sub(c,b);s.sub(a,b);w=r.dot(r);C=r.dot(u);g=r.dot(s);E=u.dot(u);Q=u.dot(s);na=1/(w*E-C*C);R=(E*g-C*Q)*na;P=(w*Q-C*g)*na;return 0<=R&&0<=P&&1>R+P}this.origin=a||new THREE.Vector3;this.direction=b||new THREE.Vector3;var e=1E-4;this.setPrecision=function(a){e=a};var f=new THREE.Vector3,h=new THREE.Vector3,j=new THREE.Vector3,k=new THREE.Vector3,
l=new THREE.Vector3,m=new THREE.Vector3,n=new THREE.Vector3,q=new THREE.Vector3,p=new THREE.Vector3;this.intersectObject=function(a){var b,g=[];if(a instanceof THREE.Particle){var r=c(this.origin,this.direction,a.matrixWorld.getPosition());if(r>a.scale.x)return[];b={distance:r,point:a.position,face:null,object:a};g.push(b)}else if(a instanceof THREE.Mesh){var r=c(this.origin,this.direction,a.matrixWorld.getPosition()),u=THREE.Frustum.__v1.set(a.matrixWorld.getColumnX().length(),a.matrixWorld.getColumnY().length(),
a.matrixWorld.getColumnZ().length());if(r>a.geometry.boundingSphere.radius*Math.max(u.x,Math.max(u.y,u.z)))return g;var s,w,z=a.geometry,C=z.vertices,y;a.matrixRotationWorld.extractRotation(a.matrixWorld);r=0;for(u=z.faces.length;r<u;r++)if(b=z.faces[r],l.copy(this.origin),m.copy(this.direction),y=a.matrixWorld,n=y.multiplyVector3(n.copy(b.centroid)).subSelf(l),q=a.matrixRotationWorld.multiplyVector3(q.copy(b.normal)),s=m.dot(q),!(Math.abs(s)<e)&&(w=q.dot(n)/s,!(0>w)&&(a.doubleSided||(a.flipSided?
0<s:0>s))))if(p.add(l,m.multiplyScalar(w)),b instanceof THREE.Face3)f=y.multiplyVector3(f.copy(C[b.a])),h=y.multiplyVector3(h.copy(C[b.b])),j=y.multiplyVector3(j.copy(C[b.c])),d(p,f,h,j)&&(b={distance:l.distanceTo(p),point:p.clone(),face:b,object:a},g.push(b));else if(b instanceof THREE.Face4&&(f=y.multiplyVector3(f.copy(C[b.a])),h=y.multiplyVector3(h.copy(C[b.b])),j=y.multiplyVector3(j.copy(C[b.c])),k=y.multiplyVector3(k.copy(C[b.d])),d(p,f,h,k)||d(p,h,j,k)))b={distance:l.distanceTo(p),point:p.clone(),
face:b,object:a},g.push(b)}return g};this.intersectObjects=function(a){for(var b=[],c=0,d=a.length;c<d;c++)Array.prototype.push.apply(b,this.intersectObject(a[c]));b.sort(function(a,b){return a.distance-b.distance});return b};var r=new THREE.Vector3,u=new THREE.Vector3,s=new THREE.Vector3,y,D,z,w,C,g,E,Q,na,R,P};
THREE.Rectangle=function(){function a(){f=d-b;h=e-c}var b,c,d,e,f,h,j=!0;this.getX=function(){return b};this.getY=function(){return c};this.getWidth=function(){return f};this.getHeight=function(){return h};this.getLeft=function(){return b};this.getTop=function(){return c};this.getRight=function(){return d};this.getBottom=function(){return e};this.set=function(f,h,m,n){j=!1;b=f;c=h;d=m;e=n;a()};this.addPoint=function(f,h){j?(j=!1,b=f,c=h,d=f,e=h):(b=b<f?b:f,c=c<h?c:h,d=d>f?d:f,e=e>h?e:h);a()};this.add3Points=
function(f,h,m,n,q,p){j?(j=!1,b=f<m?f<q?f:q:m<q?m:q,c=h<n?h<p?h:p:n<p?n:p,d=f>m?f>q?f:q:m>q?m:q,e=h>n?h>p?h:p:n>p?n:p):(b=f<m?f<q?f<b?f:b:q<b?q:b:m<q?m<b?m:b:q<b?q:b,c=h<n?h<p?h<c?h:c:p<c?p:c:n<p?n<c?n:c:p<c?p:c,d=f>m?f>q?f>d?f:d:q>d?q:d:m>q?m>d?m:d:q>d?q:d,e=h>n?h>p?h>e?h:e:p>e?p:e:n>p?n>e?n:e:p>e?p:e);a()};this.addRectangle=function(f){j?(j=!1,b=f.getLeft(),c=f.getTop(),d=f.getRight(),e=f.getBottom()):(b=b<f.getLeft()?b:f.getLeft(),c=c<f.getTop()?c:f.getTop(),d=d>f.getRight()?d:f.getRight(),e=e>
f.getBottom()?e:f.getBottom());a()};this.inflate=function(f){b-=f;c-=f;d+=f;e+=f;a()};this.minSelf=function(f){b=b>f.getLeft()?b:f.getLeft();c=c>f.getTop()?c:f.getTop();d=d<f.getRight()?d:f.getRight();e=e<f.getBottom()?e:f.getBottom();a()};this.intersects=function(a){return d<a.getLeft()||b>a.getRight()||e<a.getTop()||c>a.getBottom()?!1:!0};this.empty=function(){j=!0;e=d=c=b=0;a()};this.isEmpty=function(){return j}};
THREE.Math={clamp:function(a,b,c){return a<b?b:a>c?c:a},clampBottom:function(a,b){return a<b?b:a},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},random16:function(){return(65280*Math.random()+255*Math.random())/65535},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(0.5-Math.random())},sign:function(a){return 0>a?-1:0<a?1:0}};THREE.Matrix3=function(){this.elements=new Float32Array(9)};
THREE.Matrix3.prototype={constructor:THREE.Matrix3,getInverse:function(a){var b=a.elements;a=b[10]*b[5]-b[6]*b[9];var c=-b[10]*b[1]+b[2]*b[9],d=b[6]*b[1]-b[2]*b[5],e=-b[10]*b[4]+b[6]*b[8],f=b[10]*b[0]-b[2]*b[8],h=-b[6]*b[0]+b[2]*b[4],j=b[9]*b[4]-b[5]*b[8],k=-b[9]*b[0]+b[1]*b[8],l=b[5]*b[0]-b[1]*b[4],b=b[0]*a+b[1]*e+b[2]*j;0===b&&console.warn("Matrix3.getInverse(): determinant == 0");var b=1/b,m=this.elements;m[0]=b*a;m[1]=b*c;m[2]=b*d;m[3]=b*e;m[4]=b*f;m[5]=b*h;m[6]=b*j;m[7]=b*k;m[8]=b*l;return this},
transpose:function(){var a,b=this.elements;a=b[1];b[1]=b[3];b[3]=a;a=b[2];b[2]=b[6];b[6]=a;a=b[5];b[5]=b[7];b[7]=a;return this},transposeIntoArray:function(a){var b=this.m;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this}};THREE.Matrix4=function(a,b,c,d,e,f,h,j,k,l,m,n,q,p,r,u){this.elements=new Float32Array(16);this.set(void 0!==a?a:1,b||0,c||0,d||0,e||0,void 0!==f?f:1,h||0,j||0,k||0,l||0,void 0!==m?m:1,n||0,q||0,p||0,r||0,void 0!==u?u:1)};
THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(a,b,c,d,e,f,h,j,k,l,m,n,q,p,r,u){var s=this.elements;s[0]=a;s[4]=b;s[8]=c;s[12]=d;s[1]=e;s[5]=f;s[9]=h;s[13]=j;s[2]=k;s[6]=l;s[10]=m;s[14]=n;s[3]=q;s[7]=p;s[11]=r;s[15]=u;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},copy:function(a){a=a.elements;this.set(a[0],a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15]);return this},lookAt:function(a,b,c){var d=this.elements,
e=THREE.Matrix4.__v1,f=THREE.Matrix4.__v2,h=THREE.Matrix4.__v3;h.sub(a,b).normalize();0===h.length()&&(h.z=1);e.cross(c,h).normalize();0===e.length()&&(h.x+=1E-4,e.cross(c,h).normalize());f.cross(h,e);d[0]=e.x;d[4]=f.x;d[8]=h.x;d[1]=e.y;d[5]=f.y;d[9]=h.y;d[2]=e.z;d[6]=f.z;d[10]=h.z;return this},multiply:function(a,b){var c=a.elements,d=b.elements,e=this.elements,f=c[0],h=c[4],j=c[8],k=c[12],l=c[1],m=c[5],n=c[9],q=c[13],p=c[2],r=c[6],u=c[10],s=c[14],y=c[3],D=c[7],z=c[11],c=c[15],w=d[0],C=d[4],g=d[8],
E=d[12],Q=d[1],na=d[5],R=d[9],P=d[13],aa=d[2],Aa=d[6],za=d[10],Ea=d[14],Fa=d[3],ia=d[7],Ga=d[11],d=d[15];e[0]=f*w+h*Q+j*aa+k*Fa;e[4]=f*C+h*na+j*Aa+k*ia;e[8]=f*g+h*R+j*za+k*Ga;e[12]=f*E+h*P+j*Ea+k*d;e[1]=l*w+m*Q+n*aa+q*Fa;e[5]=l*C+m*na+n*Aa+q*ia;e[9]=l*g+m*R+n*za+q*Ga;e[13]=l*E+m*P+n*Ea+q*d;e[2]=p*w+r*Q+u*aa+s*Fa;e[6]=p*C+r*na+u*Aa+s*ia;e[10]=p*g+r*R+u*za+s*Ga;e[14]=p*E+r*P+u*Ea+s*d;e[3]=y*w+D*Q+z*aa+c*Fa;e[7]=y*C+D*na+z*Aa+c*ia;e[11]=y*g+D*R+z*za+c*Ga;e[15]=y*E+D*P+z*Ea+c*d;return this},multiplySelf:function(a){return this.multiply(this,
a)},multiplyToArray:function(a,b,c){var d=this.elements;this.multiply(a,b);c[0]=d[0];c[1]=d[1];c[2]=d[2];c[3]=d[3];c[4]=d[4];c[5]=d[5];c[6]=d[6];c[7]=d[7];c[8]=d[8];c[9]=d[9];c[10]=d[10];c[11]=d[11];c[12]=d[12];c[13]=d[13];c[14]=d[14];c[15]=d[15];return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this},multiplyVector3:function(a){var b=this.elements,
c=a.x,d=a.y,e=a.z,f=1/(b[3]*c+b[7]*d+b[11]*e+b[15]);a.x=(b[0]*c+b[4]*d+b[8]*e+b[12])*f;a.y=(b[1]*c+b[5]*d+b[9]*e+b[13])*f;a.z=(b[2]*c+b[6]*d+b[10]*e+b[14])*f;return a},multiplyVector4:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,f=a.w;a.x=b[0]*c+b[4]*d+b[8]*e+b[12]*f;a.y=b[1]*c+b[5]*d+b[9]*e+b[13]*f;a.z=b[2]*c+b[6]*d+b[10]*e+b[14]*f;a.w=b[3]*c+b[7]*d+b[11]*e+b[15]*f;return a},rotateAxis:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z;a.x=c*b[0]+d*b[4]+e*b[8];a.y=c*b[1]+d*b[5]+e*b[9];a.z=c*
b[2]+d*b[6]+e*b[10];a.normalize();return a},crossVector:function(a){var b=this.elements,c=new THREE.Vector4;c.x=b[0]*a.x+b[4]*a.y+b[8]*a.z+b[12]*a.w;c.y=b[1]*a.x+b[5]*a.y+b[9]*a.z+b[13]*a.w;c.z=b[2]*a.x+b[6]*a.y+b[10]*a.z+b[14]*a.w;c.w=a.w?b[3]*a.x+b[7]*a.y+b[11]*a.z+b[15]*a.w:1;return c},determinant:function(){var a=this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],h=a[5],j=a[9],k=a[13],l=a[2],m=a[6],n=a[10],q=a[14],p=a[3],r=a[7],u=a[11],a=a[15];return e*j*m*p-d*k*m*p-e*h*n*p+c*k*n*p+d*h*q*p-c*j*
q*p-e*j*l*r+d*k*l*r+e*f*n*r-b*k*n*r-d*f*q*r+b*j*q*r+e*h*l*u-c*k*l*u-e*f*m*u+b*k*m*u+c*f*q*u-b*h*q*u-d*h*l*a+c*j*l*a+d*f*m*a-b*j*m*a-c*f*n*a+b*h*n*a},transpose:function(){var a=this.elements,b;b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},flattenToArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[1];a[2]=b[2];a[3]=b[3];a[4]=b[4];a[5]=b[5];a[6]=b[6];a[7]=b[7];a[8]=b[8];a[9]=b[9];
a[10]=b[10];a[11]=b[11];a[12]=b[12];a[13]=b[13];a[14]=b[14];a[15]=b[15];return a},flattenToArrayOffset:function(a,b){var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a},getPosition:function(){var a=this.elements;return THREE.Matrix4.__v1.set(a[12],a[13],a[14])},setPosition:function(a){var b=this.elements;b[12]=a.x;b[13]=
a.y;b[14]=a.z;return this},getColumnX:function(){var a=this.elements;return THREE.Matrix4.__v1.set(a[0],a[1],a[2])},getColumnY:function(){var a=this.elements;return THREE.Matrix4.__v1.set(a[4],a[5],a[6])},getColumnZ:function(){var a=this.elements;return THREE.Matrix4.__v1.set(a[8],a[9],a[10])},getInverse:function(a){var b=this.elements,c=a.elements,d=c[0],e=c[4],f=c[8],h=c[12],j=c[1],k=c[5],l=c[9],m=c[13],n=c[2],q=c[6],p=c[10],r=c[14],u=c[3],s=c[7],y=c[11],c=c[15];b[0]=l*r*s-m*p*s+m*q*y-k*r*y-l*q*
c+k*p*c;b[4]=h*p*s-f*r*s-h*q*y+e*r*y+f*q*c-e*p*c;b[8]=f*m*s-h*l*s+h*k*y-e*m*y-f*k*c+e*l*c;b[12]=h*l*q-f*m*q-h*k*p+e*m*p+f*k*r-e*l*r;b[1]=m*p*u-l*r*u-m*n*y+j*r*y+l*n*c-j*p*c;b[5]=f*r*u-h*p*u+h*n*y-d*r*y-f*n*c+d*p*c;b[9]=h*l*u-f*m*u-h*j*y+d*m*y+f*j*c-d*l*c;b[13]=f*m*n-h*l*n+h*j*p-d*m*p-f*j*r+d*l*r;b[2]=k*r*u-m*q*u+m*n*s-j*r*s-k*n*c+j*q*c;b[6]=h*q*u-e*r*u-h*n*s+d*r*s+e*n*c-d*q*c;b[10]=e*m*u-h*k*u+h*j*s-d*m*s-e*j*c+d*k*c;b[14]=h*k*n-e*m*n-h*j*q+d*m*q+e*j*r-d*k*r;b[3]=l*q*u-k*p*u-l*n*s+j*p*s+k*n*y-j*q*
y;b[7]=e*p*u-f*q*u+f*n*s-d*p*s-e*n*y+d*q*y;b[11]=f*k*u-e*l*u-f*j*s+d*l*s+e*j*y-d*k*y;b[15]=e*l*n-f*k*n+f*j*q-d*l*q-e*j*p+d*k*p;this.multiplyScalar(1/a.determinant());return this},setRotationFromEuler:function(a,b){var c=this.elements,d=a.x,e=a.y,f=a.z,h=Math.cos(d),d=Math.sin(d),j=Math.cos(e),e=Math.sin(e),k=Math.cos(f),f=Math.sin(f);switch(b){case "YXZ":var l=j*k,m=j*f,n=e*k,q=e*f;c[0]=l+q*d;c[4]=n*d-m;c[8]=h*e;c[1]=h*f;c[5]=h*k;c[9]=-d;c[2]=m*d-n;c[6]=q+l*d;c[10]=h*j;break;case "ZXY":l=j*k;m=j*
f;n=e*k;q=e*f;c[0]=l-q*d;c[4]=-h*f;c[8]=n+m*d;c[1]=m+n*d;c[5]=h*k;c[9]=q-l*d;c[2]=-h*e;c[6]=d;c[10]=h*j;break;case "ZYX":l=h*k;m=h*f;n=d*k;q=d*f;c[0]=j*k;c[4]=n*e-m;c[8]=l*e+q;c[1]=j*f;c[5]=q*e+l;c[9]=m*e-n;c[2]=-e;c[6]=d*j;c[10]=h*j;break;case "YZX":l=h*j;m=h*e;n=d*j;q=d*e;c[0]=j*k;c[4]=q-l*f;c[8]=n*f+m;c[1]=f;c[5]=h*k;c[9]=-d*k;c[2]=-e*k;c[6]=m*f+n;c[10]=l-q*f;break;case "XZY":l=h*j;m=h*e;n=d*j;q=d*e;c[0]=j*k;c[4]=-f;c[8]=e*k;c[1]=l*f+q;c[5]=h*k;c[9]=m*f-n;c[2]=n*f-m;c[6]=d*k;c[10]=q*f+l;break;
default:l=h*k,m=h*f,n=d*k,q=d*f,c[0]=j*k,c[4]=-j*f,c[8]=e,c[1]=m+n*e,c[5]=l-q*e,c[9]=-d*j,c[2]=q-l*e,c[6]=n+m*e,c[10]=h*j}return this},setRotationFromQuaternion:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,f=a.w,h=c+c,j=d+d,k=e+e;a=c*h;var l=c*j,c=c*k,m=d*j,d=d*k,e=e*k,h=f*h,j=f*j,f=f*k;b[0]=1-(m+e);b[4]=l-f;b[8]=c+j;b[1]=l+f;b[5]=1-(a+e);b[9]=d-h;b[2]=c-j;b[6]=d+h;b[10]=1-(a+m);return this},compose:function(a,b,c){var d=this.elements,e=THREE.Matrix4.__m1,f=THREE.Matrix4.__m2;e.identity();e.setRotationFromQuaternion(b);
f.makeScale(c.x,c.y,c.z);this.multiply(e,f);d[12]=a.x;d[13]=a.y;d[14]=a.z;return this},decompose:function(a,b,c){var d=this.elements,e=THREE.Matrix4.__v1,f=THREE.Matrix4.__v2,h=THREE.Matrix4.__v3;e.set(d[0],d[1],d[2]);f.set(d[4],d[5],d[6]);h.set(d[8],d[9],d[10]);a=a instanceof THREE.Vector3?a:new THREE.Vector3;b=b instanceof THREE.Quaternion?b:new THREE.Quaternion;c=c instanceof THREE.Vector3?c:new THREE.Vector3;c.x=e.length();c.y=f.length();c.z=h.length();a.x=d[12];a.y=d[13];a.z=d[14];d=THREE.Matrix4.__m1;
d.copy(this);d.elements[0]/=c.x;d.elements[1]/=c.x;d.elements[2]/=c.x;d.elements[4]/=c.y;d.elements[5]/=c.y;d.elements[6]/=c.y;d.elements[8]/=c.z;d.elements[9]/=c.z;d.elements[10]/=c.z;b.setFromRotationMatrix(d);return[a,b,c]},extractPosition:function(a){var b=this.elements;a=a.elements;b[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractRotation:function(a){var b=this.elements;a=a.elements;var c=THREE.Matrix4.__v1,d=1/c.set(a[0],a[1],a[2]).length(),e=1/c.set(a[4],a[5],a[6]).length(),c=1/c.set(a[8],
a[9],a[10]).length();b[0]=a[0]*d;b[1]=a[1]*d;b[2]=a[2]*d;b[4]=a[4]*e;b[5]=a[5]*e;b[6]=a[6]*e;b[8]=a[8]*c;b[9]=a[9]*c;b[10]=a[10]*c;return this},translate:function(a){var b=this.elements,c=a.x,d=a.y;a=a.z;b[12]=b[0]*c+b[4]*d+b[8]*a+b[12];b[13]=b[1]*c+b[5]*d+b[9]*a+b[13];b[14]=b[2]*c+b[6]*d+b[10]*a+b[14];b[15]=b[3]*c+b[7]*d+b[11]*a+b[15];return this},rotateX:function(a){var b=this.elements,c=b[4],d=b[5],e=b[6],f=b[7],h=b[8],j=b[9],k=b[10],l=b[11],m=Math.cos(a);a=Math.sin(a);b[4]=m*c+a*h;b[5]=m*d+a*
j;b[6]=m*e+a*k;b[7]=m*f+a*l;b[8]=m*h-a*c;b[9]=m*j-a*d;b[10]=m*k-a*e;b[11]=m*l-a*f;return this},rotateY:function(a){var b=this.elements,c=b[0],d=b[1],e=b[2],f=b[3],h=b[8],j=b[9],k=b[10],l=b[11],m=Math.cos(a);a=Math.sin(a);b[0]=m*c-a*h;b[1]=m*d-a*j;b[2]=m*e-a*k;b[3]=m*f-a*l;b[8]=m*h+a*c;b[9]=m*j+a*d;b[10]=m*k+a*e;b[11]=m*l+a*f;return this},rotateZ:function(a){var b=this.elements,c=b[0],d=b[1],e=b[2],f=b[3],h=b[4],j=b[5],k=b[6],l=b[7],m=Math.cos(a);a=Math.sin(a);b[0]=m*c+a*h;b[1]=m*d+a*j;b[2]=m*e+a*
k;b[3]=m*f+a*l;b[4]=m*h-a*c;b[5]=m*j-a*d;b[6]=m*k-a*e;b[7]=m*l-a*f;return this},rotateByAxis:function(a,b){var c=this.elements;if(1===a.x&&0===a.y&&0===a.z)return this.rotateX(b);if(0===a.x&&1===a.y&&0===a.z)return this.rotateY(b);if(0===a.x&&0===a.y&&1===a.z)return this.rotateZ(b);var d=a.x,e=a.y,f=a.z,h=Math.sqrt(d*d+e*e+f*f),d=d/h,e=e/h,f=f/h,h=d*d,j=e*e,k=f*f,l=Math.cos(b),m=Math.sin(b),n=1-l,q=d*e*n,p=d*f*n,n=e*f*n,d=d*m,r=e*m,m=f*m,f=h+(1-h)*l,h=q+m,e=p-r,q=q-m,j=j+(1-j)*l,m=n+d,p=p+r,n=n-d,
k=k+(1-k)*l,l=c[0],d=c[1],r=c[2],u=c[3],s=c[4],y=c[5],D=c[6],z=c[7],w=c[8],C=c[9],g=c[10],E=c[11];c[0]=f*l+h*s+e*w;c[1]=f*d+h*y+e*C;c[2]=f*r+h*D+e*g;c[3]=f*u+h*z+e*E;c[4]=q*l+j*s+m*w;c[5]=q*d+j*y+m*C;c[6]=q*r+j*D+m*g;c[7]=q*u+j*z+m*E;c[8]=p*l+n*s+k*w;c[9]=p*d+n*y+k*C;c[10]=p*r+n*D+k*g;c[11]=p*u+n*z+k*E;return this},scale:function(a){var b=this.elements,c=a.x,d=a.y;a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=
this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],Math.max(a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10])))},makeTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(1,0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},makeRotationY:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a);
a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,f=a.x,h=a.y,j=a.z,k=e*f,l=e*h;this.set(k*f+c,k*h-d*j,k*j+d*h,0,k*h+d*j,l*h+c,l*j-d*f,0,k*j-d*h,l*j+d*f,e*j*j+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},makeFrustum:function(a,b,c,d,e,f){var h=this.elements;h[0]=2*e/(b-a);h[4]=0;h[8]=(b+a)/(b-a);h[12]=0;h[1]=0;h[5]=2*e/(d-c);h[9]=(d+c)/(d-c);h[13]=
0;h[2]=0;h[6]=0;h[10]=-(f+e)/(f-e);h[14]=-2*f*e/(f-e);h[3]=0;h[7]=0;h[11]=-1;h[15]=0;return this},makePerspective:function(a,b,c,d){a=c*Math.tan(a*Math.PI/360);var e=-a;return this.makeFrustum(e*b,a*b,e,a,c,d)},makeOrthographic:function(a,b,c,d,e,f){var h=this.elements,j=b-a,k=c-d,l=f-e;h[0]=2/j;h[4]=0;h[8]=0;h[12]=-((b+a)/j);h[1]=0;h[5]=2/k;h[9]=0;h[13]=-((c+d)/k);h[2]=0;h[6]=0;h[10]=-2/l;h[14]=-((f+e)/l);h[3]=0;h[7]=0;h[11]=0;h[15]=1;return this},clone:function(){var a=this.elements;return new THREE.Matrix4(a[0],
a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15])}};THREE.Matrix4.__v1=new THREE.Vector3;THREE.Matrix4.__v2=new THREE.Vector3;THREE.Matrix4.__v3=new THREE.Vector3;THREE.Matrix4.__m1=new THREE.Matrix4;THREE.Matrix4.__m2=new THREE.Matrix4;
THREE.Object3D=function(){this.id=THREE.Object3DCount++;this.name="";this.parent=void 0;this.children=[];this.up=new THREE.Vector3(0,1,0);this.position=new THREE.Vector3;this.rotation=new THREE.Vector3;this.eulerOrder="XYZ";this.scale=new THREE.Vector3(1,1,1);this.flipSided=this.doubleSided=!1;this.renderDepth=null;this.rotationAutoUpdate=!0;this.matrix=new THREE.Matrix4;this.matrixWorld=new THREE.Matrix4;this.matrixRotationWorld=new THREE.Matrix4;this.matrixWorldNeedsUpdate=this.matrixAutoUpdate=
!0;this.quaternion=new THREE.Quaternion;this.useQuaternion=!1;this.boundRadius=0;this.boundRadiusScale=1;this.visible=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this._vector=new THREE.Vector3};
THREE.Object3D.prototype={constructor:THREE.Object3D,applyMatrix:function(a){this.matrix.multiply(a,this.matrix);this.scale.getScaleFromMatrix(this.matrix);this.rotation.getRotationFromMatrix(this.matrix,this.scale);this.position.getPositionFromMatrix(this.matrix)},translate:function(a,b){this.matrix.rotateAxis(b);this.position.addSelf(b.multiplyScalar(a))},translateX:function(a){this.translate(a,this._vector.set(1,0,0))},translateY:function(a){this.translate(a,this._vector.set(0,1,0))},translateZ:function(a){this.translate(a,
this._vector.set(0,0,1))},lookAt:function(a){this.matrix.lookAt(a,this.position,this.up);this.rotationAutoUpdate&&this.rotation.getRotationFromMatrix(this.matrix)},add:function(a){if(a===this)console.warn("THREE.Object3D.add: An object can't be added as a child of itself.");else if(a instanceof THREE.Object3D){void 0!==a.parent&&a.parent.remove(a);a.parent=this;this.children.push(a);for(var b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__addObject(a)}},remove:function(a){var b=
this.children.indexOf(a);if(-1!==b){a.parent=void 0;this.children.splice(b,1);for(b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__removeObject(a)}},getChildByName:function(a,b){var c,d,e;c=0;for(d=this.children.length;c<d;c++)if(e=this.children[c],e.name===a||b&&(e=e.getChildByName(a,b),void 0!==e))return e},updateMatrix:function(){this.matrix.setPosition(this.position);this.useQuaternion?this.matrix.setRotationFromQuaternion(this.quaternion):this.matrix.setRotationFromEuler(this.rotation,
this.eulerOrder);if(1!==this.scale.x||1!==this.scale.y||1!==this.scale.z)this.matrix.scale(this.scale),this.boundRadiusScale=Math.max(this.scale.x,Math.max(this.scale.y,this.scale.z));this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?this.matrixWorld.multiply(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<
c;b++)this.children[b].updateMatrixWorld(a)}};THREE.Object3DCount=0;
THREE.Projector=function(){function a(){var a=k[j]=k[j]||new THREE.RenderableVertex;j++;return a}function b(a,b){return b.z-a.z}function c(a,b){var c=0,d=1,e=a.z+a.w,g=b.z+b.w,f=-a.z+a.w,h=-b.z+b.w;if(0<=e&&0<=g&&0<=f&&0<=h)return!0;if(0>e&&0>g||0>f&&0>h)return!1;0>e?c=Math.max(c,e/(e-g)):0>g&&(d=Math.min(d,e/(e-g)));0>f?c=Math.max(c,f/(f-h)):0>h&&(d=Math.min(d,f/(f-h)));if(d<c)return!1;a.lerpSelf(b,c);b.lerpSelf(a,1-d);return!0}var d,e,f=[],h,j,k=[],l,m,n=[],q,p=[],r,u,s=[],y,D,z=[],w={objects:[],
sprites:[],lights:[],elements:[]},C=new THREE.Vector3,g=new THREE.Vector4,E=new THREE.Matrix4,Q=new THREE.Matrix4,na=new THREE.Frustum,R=new THREE.Vector4,P=new THREE.Vector4;this.projectVector=function(a,b){b.matrixWorldInverse.getInverse(b.matrixWorld);E.multiply(b.projectionMatrix,b.matrixWorldInverse);E.multiplyVector3(a);return a};this.unprojectVector=function(a,b){b.projectionMatrixInverse.getInverse(b.projectionMatrix);E.multiply(b.matrixWorld,b.projectionMatrixInverse);E.multiplyVector3(a);
return a};this.pickingRay=function(a,b){var c;a.z=-1;c=new THREE.Vector3(a.x,a.y,1);this.unprojectVector(a,b);this.unprojectVector(c,b);c.subSelf(a).normalize();return new THREE.Ray(a,c)};this.projectGraph=function(a,c){e=0;w.objects.length=0;w.sprites.length=0;w.lights.length=0;var g=function(a){if(!1!==a.visible){if((a instanceof THREE.Mesh||a instanceof THREE.Line)&&(!1===a.frustumCulled||na.contains(a))){C.copy(a.matrixWorld.getPosition());E.multiplyVector3(C);var b=f[e]=f[e]||new THREE.RenderableObject;
e++;d=b;d.object=a;d.z=C.z;w.objects.push(d)}else a instanceof THREE.Light&&w.lights.push(a);for(var b=0,c=a.children.length;b<c;b++)g(a.children[b])}};g(a);c&&w.objects.sort(b);return w};this.projectScene=function(d,e,f){var C=e.near,Fa=e.far,ia=!1,Ga,pa,J,T,L,S,ba,qa,K,ta,Ja,Sa,Pa,mb,Na;D=u=q=m=0;w.elements.length=0;void 0===e.parent&&(console.warn("DEPRECATED: Camera hasn't been added to a Scene. Adding it..."),d.add(e));d.updateMatrixWorld();e.matrixWorldInverse.getInverse(e.matrixWorld);E.multiply(e.projectionMatrix,
e.matrixWorldInverse);na.setFromMatrix(E);w=this.projectGraph(d,!1);d=0;for(Ga=w.objects.length;d<Ga;d++)if(K=w.objects[d].object,ta=K.matrixWorld,j=0,K instanceof THREE.Mesh){Ja=K.geometry;Sa=K.geometry.materials;T=Ja.vertices;Pa=Ja.faces;mb=Ja.faceVertexUvs;Ja=K.matrixRotationWorld.extractRotation(ta);pa=0;for(J=T.length;pa<J;pa++)h=a(),h.positionWorld.copy(T[pa]),ta.multiplyVector3(h.positionWorld),h.positionScreen.copy(h.positionWorld),E.multiplyVector4(h.positionScreen),h.positionScreen.x/=h.positionScreen.w,
h.positionScreen.y/=h.positionScreen.w,h.visible=h.positionScreen.z>C&&h.positionScreen.z<Fa;T=0;for(pa=Pa.length;T<pa;T++){J=Pa[T];if(J instanceof THREE.Face3)if(L=k[J.a],S=k[J.b],ba=k[J.c],L.visible&&S.visible&&ba.visible)if(ia=0>(ba.positionScreen.x-L.positionScreen.x)*(S.positionScreen.y-L.positionScreen.y)-(ba.positionScreen.y-L.positionScreen.y)*(S.positionScreen.x-L.positionScreen.x),K.doubleSided||ia!=K.flipSided)qa=n[m]=n[m]||new THREE.RenderableFace3,m++,l=qa,l.v1.copy(L),l.v2.copy(S),l.v3.copy(ba);
else continue;else continue;else if(J instanceof THREE.Face4)if(L=k[J.a],S=k[J.b],ba=k[J.c],qa=k[J.d],L.visible&&S.visible&&ba.visible&&qa.visible)if(ia=0>(qa.positionScreen.x-L.positionScreen.x)*(S.positionScreen.y-L.positionScreen.y)-(qa.positionScreen.y-L.positionScreen.y)*(S.positionScreen.x-L.positionScreen.x)||0>(S.positionScreen.x-ba.positionScreen.x)*(qa.positionScreen.y-ba.positionScreen.y)-(S.positionScreen.y-ba.positionScreen.y)*(qa.positionScreen.x-ba.positionScreen.x),K.doubleSided||
ia!=K.flipSided)Na=p[q]=p[q]||new THREE.RenderableFace4,q++,l=Na,l.v1.copy(L),l.v2.copy(S),l.v3.copy(ba),l.v4.copy(qa);else continue;else continue;l.normalWorld.copy(J.normal);!ia&&(K.flipSided||K.doubleSided)&&l.normalWorld.negate();Ja.multiplyVector3(l.normalWorld);l.centroidWorld.copy(J.centroid);ta.multiplyVector3(l.centroidWorld);l.centroidScreen.copy(l.centroidWorld);E.multiplyVector3(l.centroidScreen);ba=J.vertexNormals;L=0;for(S=ba.length;L<S;L++)qa=l.vertexNormalsWorld[L],qa.copy(ba[L]),
!ia&&(K.flipSided||K.doubleSided)&&qa.negate(),Ja.multiplyVector3(qa);L=0;for(S=mb.length;L<S;L++)if(Na=mb[L][T]){ba=0;for(qa=Na.length;ba<qa;ba++)l.uvs[L][ba]=Na[ba]}l.material=K.material;l.faceMaterial=null!==J.materialIndex?Sa[J.materialIndex]:null;l.z=l.centroidScreen.z;w.elements.push(l)}}else if(K instanceof THREE.Line){Q.multiply(E,ta);T=K.geometry.vertices;L=a();L.positionScreen.copy(T[0]);Q.multiplyVector4(L.positionScreen);ta=K.type===THREE.LinePieces?2:1;pa=1;for(J=T.length;pa<J;pa++)L=
a(),L.positionScreen.copy(T[pa]),Q.multiplyVector4(L.positionScreen),0<(pa+1)%ta||(S=k[j-2],R.copy(L.positionScreen),P.copy(S.positionScreen),c(R,P)&&(R.multiplyScalar(1/R.w),P.multiplyScalar(1/P.w),Sa=s[u]=s[u]||new THREE.RenderableLine,u++,r=Sa,r.v1.positionScreen.copy(R),r.v2.positionScreen.copy(P),r.z=Math.max(R.z,P.z),r.material=K.material,w.elements.push(r)))}d=0;for(Ga=w.sprites.length;d<Ga;d++)K=w.sprites[d].object,ta=K.matrixWorld,K instanceof THREE.Particle&&(g.set(ta.elements[12],ta.elements[13],
ta.elements[14],1),E.multiplyVector4(g),g.z/=g.w,0<g.z&&1>g.z&&(C=z[D]=z[D]||new THREE.RenderableParticle,D++,y=C,y.x=g.x/g.w,y.y=g.y/g.w,y.z=g.z,y.rotation=K.rotation.z,y.scale.x=K.scale.x*Math.abs(y.x-(g.x+e.projectionMatrix.elements[0])/(g.w+e.projectionMatrix.elements[12])),y.scale.y=K.scale.y*Math.abs(y.y-(g.y+e.projectionMatrix.elements[5])/(g.w+e.projectionMatrix.elements[13])),y.material=K.material,w.elements.push(y)));f&&w.elements.sort(b);return w}};
THREE.Quaternion=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.Quaternion.prototype={constructor:THREE.Quaternion,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=a.w;return this},setFromEuler:function(a){var b=Math.PI/360,c=a.x*b,d=a.y*b,e=a.z*b;a=Math.cos(d);var d=Math.sin(d),b=Math.cos(-e),e=Math.sin(-e),f=Math.cos(c),c=Math.sin(c),h=a*b,j=d*e;this.w=h*f-j*c;this.x=h*c+j*f;this.y=d*b*f+a*e*c;this.z=a*e*f-d*b*c;return this},setFromAxisAngle:function(a,b){var c=b/2,d=Math.sin(c);
this.x=a.x*d;this.y=a.y*d;this.z=a.z*d;this.w=Math.cos(c);return this},setFromRotationMatrix:function(a){var b=Math.pow(a.determinant(),1/3);this.w=Math.sqrt(Math.max(0,b+a.elements[0]+a.elements[5]+a.elements[10]))/2;this.x=Math.sqrt(Math.max(0,b+a.elements[0]-a.elements[5]-a.elements[10]))/2;this.y=Math.sqrt(Math.max(0,b-a.elements[0]+a.elements[5]-a.elements[10]))/2;this.z=Math.sqrt(Math.max(0,b-a.elements[0]-a.elements[5]+a.elements[10]))/2;this.x=0>a.elements[6]-a.elements[9]?-Math.abs(this.x):
Math.abs(this.x);this.y=0>a.elements[8]-a.elements[2]?-Math.abs(this.y):Math.abs(this.y);this.z=0>a.elements[1]-a.elements[4]?-Math.abs(this.z):Math.abs(this.z);this.normalize();return this},calculateW:function(){this.w=-Math.sqrt(Math.abs(1-this.x*this.x-this.y*this.y-this.z*this.z));return this},inverse:function(){this.x*=-1;this.y*=-1;this.z*=-1;return this},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},normalize:function(){var a=Math.sqrt(this.x*
this.x+this.y*this.y+this.z*this.z+this.w*this.w);0===a?this.w=this.z=this.y=this.x=0:(a=1/a,this.x*=a,this.y*=a,this.z*=a,this.w*=a);return this},multiply:function(a,b){this.x=a.x*b.w+a.y*b.z-a.z*b.y+a.w*b.x;this.y=-a.x*b.z+a.y*b.w+a.z*b.x+a.w*b.y;this.z=a.x*b.y-a.y*b.x+a.z*b.w+a.w*b.z;this.w=-a.x*b.x-a.y*b.y-a.z*b.z+a.w*b.w;return this},multiplySelf:function(a){var b=this.x,c=this.y,d=this.z,e=this.w,f=a.x,h=a.y,j=a.z;a=a.w;this.x=b*a+e*f+c*j-d*h;this.y=c*a+e*h+d*f-b*j;this.z=d*a+e*j+b*h-c*f;this.w=
e*a-b*f-c*h-d*j;return this},multiplyVector3:function(a,b){b||(b=a);var c=a.x,d=a.y,e=a.z,f=this.x,h=this.y,j=this.z,k=this.w,l=k*c+h*e-j*d,m=k*d+j*c-f*e,n=k*e+f*d-h*c,c=-f*c-h*d-j*e;b.x=l*k+c*-f+m*-j-n*-h;b.y=m*k+c*-h+n*-f-l*-j;b.z=n*k+c*-j+l*-h-m*-f;return b},clone:function(){return new THREE.Quaternion(this.x,this.y,this.z,this.w)}};
THREE.Quaternion.slerp=function(a,b,c,d){var e=a.w*b.w+a.x*b.x+a.y*b.y+a.z*b.z;0>e?(c.w=-b.w,c.x=-b.x,c.y=-b.y,c.z=-b.z,e=-e):c.copy(b);if(1<=Math.abs(e))return c.w=a.w,c.x=a.x,c.y=a.y,c.z=a.z,c;var f=Math.acos(e),e=Math.sqrt(1-e*e);if(0.001>Math.abs(e))return c.w=0.5*(a.w+b.w),c.x=0.5*(a.x+b.x),c.y=0.5*(a.y+b.y),c.z=0.5*(a.z+b.z),c;b=Math.sin((1-d)*f)/e;d=Math.sin(d*f)/e;c.w=a.w*b+c.w*d;c.x=a.x*b+c.x*d;c.y=a.y*b+c.y*d;c.z=a.z*b+c.z*d;return c};THREE.Vertex=function(){console.warn("THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.")};
THREE.Face3=function(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3;this.vertexNormals=d instanceof Array?d:[];this.color=e instanceof THREE.Color?e:new THREE.Color;this.vertexColors=e instanceof Array?e:[];this.vertexTangents=[];this.materialIndex=f;this.centroid=new THREE.Vector3};
THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){var a=new THREE.Face3(this.a,this.b,this.c);a.normal.copy(this.normal);a.color.copy(this.color);a.centroid.copy(this.centroid);a.materialIndex=this.materialIndex;var b,c;b=0;for(c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();
return a}};THREE.Face4=function(a,b,c,d,e,f,h){this.a=a;this.b=b;this.c=c;this.d=d;this.normal=e instanceof THREE.Vector3?e:new THREE.Vector3;this.vertexNormals=e instanceof Array?e:[];this.color=f instanceof THREE.Color?f:new THREE.Color;this.vertexColors=f instanceof Array?f:[];this.vertexTangents=[];this.materialIndex=h;this.centroid=new THREE.Vector3};
THREE.Face4.prototype={constructor:THREE.Face4,clone:function(){var a=new THREE.Face4(this.a,this.b,this.c,this.d);a.normal.copy(this.normal);a.color.copy(this.color);a.centroid.copy(this.centroid);a.materialIndex=this.materialIndex;var b,c;b=0;for(c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();
return a}};THREE.UV=function(a,b){this.u=a||0;this.v=b||0};THREE.UV.prototype={constructor:THREE.UV,set:function(a,b){this.u=a;this.v=b;return this},copy:function(a){this.u=a.u;this.v=a.v;return this},lerpSelf:function(a,b){this.u+=(a.u-this.u)*b;this.v+=(a.v-this.v)*b;return this},clone:function(){return new THREE.UV(this.u,this.v)}};
THREE.Geometry=function(){this.id=THREE.GeometryCount++;this.vertices=[];this.colors=[];this.materials=[];this.faces=[];this.faceUvs=[[]];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphColors=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.boundingSphere=this.boundingBox=null;this.dynamic=this.hasTangents=!1};
THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(a){var b=new THREE.Matrix4;b.extractRotation(a);for(var c=0,d=this.vertices.length;c<d;c++)a.multiplyVector3(this.vertices[c]);c=0;for(d=this.faces.length;c<d;c++){var e=this.faces[c];b.multiplyVector3(e.normal);for(var f=0,h=e.vertexNormals.length;f<h;f++)b.multiplyVector3(e.vertexNormals[f]);a.multiplyVector3(e.centroid)}},computeCentroids:function(){var a,b,c;a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],c.centroid.set(0,
0,0),c instanceof THREE.Face3?(c.centroid.addSelf(this.vertices[c.a]),c.centroid.addSelf(this.vertices[c.b]),c.centroid.addSelf(this.vertices[c.c]),c.centroid.divideScalar(3)):c instanceof THREE.Face4&&(c.centroid.addSelf(this.vertices[c.a]),c.centroid.addSelf(this.vertices[c.b]),c.centroid.addSelf(this.vertices[c.c]),c.centroid.addSelf(this.vertices[c.d]),c.centroid.divideScalar(4))},computeFaceNormals:function(){var a,b,c,d,e,f,h=new THREE.Vector3,j=new THREE.Vector3;a=0;for(b=this.faces.length;a<
b;a++)c=this.faces[a],d=this.vertices[c.a],e=this.vertices[c.b],f=this.vertices[c.c],h.sub(f,e),j.sub(d,e),h.crossSelf(j),h.isZero()||h.normalize(),c.normal.copy(h)},computeVertexNormals:function(){var a,b,c,d;if(void 0===this.__tmpVertices){d=this.__tmpVertices=Array(this.vertices.length);a=0;for(b=this.vertices.length;a<b;a++)d[a]=new THREE.Vector3;a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],c instanceof THREE.Face3?c.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3]:
c instanceof THREE.Face4&&(c.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3])}else{d=this.__tmpVertices;a=0;for(b=this.vertices.length;a<b;a++)d[a].set(0,0,0)}a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],c instanceof THREE.Face3?(d[c.a].addSelf(c.normal),d[c.b].addSelf(c.normal),d[c.c].addSelf(c.normal)):c instanceof THREE.Face4&&(d[c.a].addSelf(c.normal),d[c.b].addSelf(c.normal),d[c.c].addSelf(c.normal),d[c.d].addSelf(c.normal));a=0;for(b=this.vertices.length;a<
b;a++)d[a].normalize();a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],c instanceof THREE.Face3?(c.vertexNormals[0].copy(d[c.a]),c.vertexNormals[1].copy(d[c.b]),c.vertexNormals[2].copy(d[c.c])):c instanceof THREE.Face4&&(c.vertexNormals[0].copy(d[c.a]),c.vertexNormals[1].copy(d[c.b]),c.vertexNormals[2].copy(d[c.c]),c.vertexNormals[3].copy(d[c.d]))},computeMorphNormals:function(){var a,b,c,d,e;c=0;for(d=this.faces.length;c<d;c++){e=this.faces[c];e.__originalFaceNormal?e.__originalFaceNormal.copy(e.normal):
e.__originalFaceNormal=e.normal.clone();e.__originalVertexNormals||(e.__originalVertexNormals=[]);a=0;for(b=e.vertexNormals.length;a<b;a++)e.__originalVertexNormals[a]?e.__originalVertexNormals[a].copy(e.vertexNormals[a]):e.__originalVertexNormals[a]=e.vertexNormals[a].clone()}var f=new THREE.Geometry;f.faces=this.faces;a=0;for(b=this.morphTargets.length;a<b;a++){if(!this.morphNormals[a]){this.morphNormals[a]={};this.morphNormals[a].faceNormals=[];this.morphNormals[a].vertexNormals=[];var h=this.morphNormals[a].faceNormals,
j=this.morphNormals[a].vertexNormals,k,l;c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],k=new THREE.Vector3,l=e instanceof THREE.Face3?{a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3}:{a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3,d:new THREE.Vector3},h.push(k),j.push(l)}h=this.morphNormals[a];f.vertices=this.morphTargets[a].vertices;f.computeFaceNormals();f.computeVertexNormals();c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],k=h.faceNormals[c],l=h.vertexNormals[c],
k.copy(e.normal),e instanceof THREE.Face3?(l.a.copy(e.vertexNormals[0]),l.b.copy(e.vertexNormals[1]),l.c.copy(e.vertexNormals[2])):(l.a.copy(e.vertexNormals[0]),l.b.copy(e.vertexNormals[1]),l.c.copy(e.vertexNormals[2]),l.d.copy(e.vertexNormals[3]))}c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],e.normal=e.__originalFaceNormal,e.vertexNormals=e.__originalVertexNormals},computeTangents:function(){function a(a,b,c,d,e,f,Q){j=a.vertices[b];k=a.vertices[c];l=a.vertices[d];m=h[e];n=h[f];q=h[Q];p=k.x-
j.x;r=l.x-j.x;u=k.y-j.y;s=l.y-j.y;y=k.z-j.z;D=l.z-j.z;z=n.u-m.u;w=q.u-m.u;C=n.v-m.v;g=q.v-m.v;E=1/(z*g-w*C);P.set((g*p-C*r)*E,(g*u-C*s)*E,(g*y-C*D)*E);aa.set((z*r-w*p)*E,(z*s-w*u)*E,(z*D-w*y)*E);na[b].addSelf(P);na[c].addSelf(P);na[d].addSelf(P);R[b].addSelf(aa);R[c].addSelf(aa);R[d].addSelf(aa)}var b,c,d,e,f,h,j,k,l,m,n,q,p,r,u,s,y,D,z,w,C,g,E,Q,na=[],R=[],P=new THREE.Vector3,aa=new THREE.Vector3,Aa=new THREE.Vector3,za=new THREE.Vector3,Ea=new THREE.Vector3;b=0;for(c=this.vertices.length;b<c;b++)na[b]=
new THREE.Vector3,R[b]=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)f=this.faces[b],h=this.faceVertexUvs[0][b],f instanceof THREE.Face3?a(this,f.a,f.b,f.c,0,1,2):f instanceof THREE.Face4&&(a(this,f.a,f.b,f.d,0,1,3),a(this,f.b,f.c,f.d,1,2,3));var Fa=["a","b","c","d"];b=0;for(c=this.faces.length;b<c;b++){f=this.faces[b];for(d=0;d<f.vertexNormals.length;d++)Ea.copy(f.vertexNormals[d]),e=f[Fa[d]],Q=na[e],Aa.copy(Q),Aa.subSelf(Ea.multiplyScalar(Ea.dot(Q))).normalize(),za.cross(f.vertexNormals[d],
Q),e=za.dot(R[e]),e=0>e?-1:1,f.vertexTangents[d]=new THREE.Vector4(Aa.x,Aa.y,Aa.z,e)}this.hasTangents=!0},computeBoundingBox:function(){this.boundingBox||(this.boundingBox={min:new THREE.Vector3,max:new THREE.Vector3});if(0<this.vertices.length){var a;a=this.vertices[0];this.boundingBox.min.copy(a);this.boundingBox.max.copy(a);for(var b=this.boundingBox.min,c=this.boundingBox.max,d=1,e=this.vertices.length;d<e;d++)a=this.vertices[d],a.x<b.x?b.x=a.x:a.x>c.x&&(c.x=a.x),a.y<b.y?b.y=a.y:a.y>c.y&&(c.y=
a.y),a.z<b.z?b.z=a.z:a.z>c.z&&(c.z=a.z)}else this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0)},computeBoundingSphere:function(){this.boundingSphere||(this.boundingSphere={radius:0});for(var a,b=0,c=0,d=this.vertices.length;c<d;c++)a=this.vertices[c].length(),a>b&&(b=a);this.boundingSphere.radius=b},mergeVertices:function(){var a={},b=[],c=[],d,e=Math.pow(10,4),f,h,j;f=0;for(h=this.vertices.length;f<h;f++)d=this.vertices[f],d=[Math.round(d.x*e),Math.round(d.y*e),Math.round(d.z*e)].join("_"),
void 0===a[d]?(a[d]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[d]];f=0;for(h=this.faces.length;f<h;f++)if(e=this.faces[f],e instanceof THREE.Face3)e.a=c[e.a],e.b=c[e.b],e.c=c[e.c];else if(e instanceof THREE.Face4){e.a=c[e.a];e.b=c[e.b];e.c=c[e.c];e.d=c[e.d];d=[e.a,e.b,e.c,e.d];for(a=3;0<a;a--)if(d.indexOf(e["abcd"[a]])!=a){d.splice(a,1);this.faces[f]=new THREE.Face3(d[0],d[1],d[2]);e=0;for(d=this.faceVertexUvs.length;e<d;e++)(j=this.faceVertexUvs[e][f])&&j.splice(a,1);break}}c=this.vertices.length-
b.length;this.vertices=b;return c}};THREE.GeometryCount=0;
THREE.Spline=function(a){function b(a,b,c,d,e,f,h){a=0.5*(c-a);d=0.5*(d-b);return(2*(b-c)+a+d)*h+(-3*(b-c)-2*a-d)*f+a*e+b}this.points=a;var c=[],d={x:0,y:0,z:0},e,f,h,j,k,l,m,n,q;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}};this.getPoint=function(a){e=(this.points.length-1)*a;f=Math.floor(e);h=e-f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>this.points.length-2?this.points.length-1:f+1;c[3]=f>this.points.length-3?this.points.length-1:
f+2;l=this.points[c[0]];m=this.points[c[1]];n=this.points[c[2]];q=this.points[c[3]];j=h*h;k=h*j;d.x=b(l.x,m.x,n.x,q.x,h,j,k);d.y=b(l.y,m.y,n.y,q.y,h,j,k);d.z=b(l.z,m.z,n.z,q.z,h,j,k);return d};this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d};this.getLength=function(a){var b,c,d,e=b=b=0,f=new THREE.Vector3,h=new THREE.Vector3,j=[],l=0;j[0]=0;a||(a=100);c=this.points.length*a;f.copy(this.points[0]);for(a=1;a<c;a++)b=
a/c,d=this.getPoint(b),h.copy(d),l+=h.distanceTo(f),f.copy(d),b*=this.points.length-1,b=Math.floor(b),b!=e&&(j[b]=l,e=b);j[j.length]=l;return{chunks:j,total:l}};this.reparametrizeByArcLength=function(a){var b,c,d,e,f,h,j=[],l=new THREE.Vector3,g=this.getLength();j.push(l.copy(this.points[0]).clone());for(b=1;b<this.points.length;b++){c=g.chunks[b]-g.chunks[b-1];h=Math.ceil(a*c/g.total);e=(b-1)/(this.points.length-1);f=b/(this.points.length-1);for(c=1;c<h-1;c++)d=e+c*(1/h)*(f-e),d=this.getPoint(d),
j.push(l.copy(d).clone());j.push(l.copy(this.points[b]).clone())}this.points=j}};THREE.Camera=function(){THREE.Object3D.call(this);this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4;this.projectionMatrixInverse=new THREE.Matrix4};THREE.Camera.prototype=new THREE.Object3D;THREE.Camera.prototype.constructor=THREE.Camera;THREE.Camera.prototype.lookAt=function(a){this.matrix.lookAt(this.position,a,this.up);this.rotationAutoUpdate&&this.rotation.getRotationFromMatrix(this.matrix)};
THREE.OrthographicCamera=function(a,b,c,d,e,f){THREE.Camera.call(this);this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:0.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()};THREE.OrthographicCamera.prototype=new THREE.Camera;THREE.OrthographicCamera.prototype.constructor=THREE.OrthographicCamera;THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){this.projectionMatrix.makeOrthographic(this.left,this.right,this.top,this.bottom,this.near,this.far)};
THREE.PerspectiveCamera=function(a,b,c,d){THREE.Camera.call(this);this.fov=void 0!==a?a:50;this.aspect=void 0!==b?b:1;this.near=void 0!==c?c:0.1;this.far=void 0!==d?d:2E3;this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype=new THREE.Camera;THREE.PerspectiveCamera.prototype.constructor=THREE.PerspectiveCamera;THREE.PerspectiveCamera.prototype.setLens=function(a,b){this.fov=2*Math.atan((void 0!==b?b:24)/(2*a))*(180/Math.PI);this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.setViewOffset=function(a,b,c,d,e,f){this.fullWidth=a;this.fullHeight=b;this.x=c;this.y=d;this.width=e;this.height=f;this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){if(this.fullWidth){var a=this.fullWidth/this.fullHeight,b=Math.tan(this.fov*Math.PI/360)*this.near,c=-b,d=a*c,a=Math.abs(a*b-d),c=Math.abs(b-c);this.projectionMatrix.makeFrustum(d+this.x*a/this.fullWidth,d+(this.x+this.width)*a/this.fullWidth,b-(this.y+this.height)*c/this.fullHeight,b-this.y*c/this.fullHeight,this.near,this.far)}else this.projectionMatrix.makePerspective(this.fov,this.aspect,this.near,this.far)};
THREE.Light=function(a){THREE.Object3D.call(this);this.color=new THREE.Color(a)};THREE.Light.prototype=new THREE.Object3D;THREE.Light.prototype.constructor=THREE.Light;THREE.Light.prototype.supr=THREE.Object3D.prototype;THREE.AmbientLight=function(a){THREE.Light.call(this,a)};THREE.AmbientLight.prototype=new THREE.Light;THREE.AmbientLight.prototype.constructor=THREE.AmbientLight;
THREE.DirectionalLight=function(a,b,c){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraLeft=-500;this.shadowCameraTop=this.shadowCameraRight=500;this.shadowCameraBottom=-500;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowCascade=
!1;this.shadowCascadeOffset=new THREE.Vector3(0,0,-1E3);this.shadowCascadeCount=2;this.shadowCascadeBias=[0,0,0];this.shadowCascadeWidth=[512,512,512];this.shadowCascadeHeight=[512,512,512];this.shadowCascadeNearZ=[-1,0.99,0.998];this.shadowCascadeFarZ=[0.99,0.998,1];this.shadowCascadeArray=[];this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};THREE.DirectionalLight.prototype=new THREE.Light;THREE.DirectionalLight.prototype.constructor=THREE.DirectionalLight;
THREE.PointLight=function(a,b,c){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,0,0);this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0};THREE.PointLight.prototype=new THREE.Light;THREE.PointLight.prototype.constructor=THREE.PointLight;
THREE.SpotLight=function(a,b,c,d,e){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/2;this.exponent=void 0!==e?e:10;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraFov=50;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowMatrix=this.shadowCamera=
this.shadowMapSize=this.shadowMap=null};THREE.SpotLight.prototype=new THREE.Light;THREE.SpotLight.prototype.constructor=THREE.SpotLight;
THREE.Material=function(a){a=a||{};this.id=THREE.MaterialCount++;this.name="";this.opacity=void 0!==a.opacity?a.opacity:1;this.transparent=void 0!==a.transparent?a.transparent:!1;this.blending=void 0!==a.blending?a.blending:THREE.NormalBlending;this.blendSrc=void 0!==a.blendSrc?a.blendSrc:THREE.SrcAlphaFactor;this.blendDst=void 0!==a.blendDst?a.blendDst:THREE.OneMinusSrcAlphaFactor;this.blendEquation=void 0!==a.blendEquation?a.blendEquation:THREE.AddEquation;this.depthTest=void 0!==a.depthTest?a.depthTest:
!0;this.depthWrite=void 0!==a.depthWrite?a.depthWrite:!0;this.polygonOffset=void 0!==a.polygonOffset?a.polygonOffset:!1;this.polygonOffsetFactor=void 0!==a.polygonOffsetFactor?a.polygonOffsetFactor:0;this.polygonOffsetUnits=void 0!==a.polygonOffsetUnits?a.polygonOffsetUnits:0;this.alphaTest=void 0!==a.alphaTest?a.alphaTest:0;this.overdraw=void 0!==a.overdraw?a.overdraw:!1;this.needsUpdate=this.visible=!0};THREE.MaterialCount=0;THREE.NoShading=0;THREE.FlatShading=1;THREE.SmoothShading=2;
THREE.NoColors=0;THREE.FaceColors=1;THREE.VertexColors=2;THREE.NoBlending=0;THREE.NormalBlending=1;THREE.AdditiveBlending=2;THREE.SubtractiveBlending=3;THREE.MultiplyBlending=4;THREE.AdditiveAlphaBlending=5;THREE.CustomBlending=6;THREE.AddEquation=100;THREE.SubtractEquation=101;THREE.ReverseSubtractEquation=102;THREE.ZeroFactor=200;THREE.OneFactor=201;THREE.SrcColorFactor=202;THREE.OneMinusSrcColorFactor=203;THREE.SrcAlphaFactor=204;THREE.OneMinusSrcAlphaFactor=205;THREE.DstAlphaFactor=206;
THREE.OneMinusDstAlphaFactor=207;THREE.DstColorFactor=208;THREE.OneMinusDstColorFactor=209;THREE.SrcAlphaSaturateFactor=210;
THREE.LineBasicMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.color=void 0!==a.color?new THREE.Color(a.color):new THREE.Color(16777215);this.linewidth=void 0!==a.linewidth?a.linewidth:1;this.linecap=void 0!==a.linecap?a.linecap:"round";this.linejoin=void 0!==a.linejoin?a.linejoin:"round";this.vertexColors=a.vertexColors?a.vertexColors:!1;this.fog=void 0!==a.fog?a.fog:!0};THREE.LineBasicMaterial.prototype=new THREE.Material;THREE.LineBasicMaterial.prototype.constructor=THREE.LineBasicMaterial;
THREE.MeshBasicMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.color=void 0!==a.color?new THREE.Color(a.color):new THREE.Color(16777215);this.map=void 0!==a.map?a.map:null;this.lightMap=void 0!==a.lightMap?a.lightMap:null;this.envMap=void 0!==a.envMap?a.envMap:null;this.combine=void 0!==a.combine?a.combine:THREE.MultiplyOperation;this.reflectivity=void 0!==a.reflectivity?a.reflectivity:1;this.refractionRatio=void 0!==a.refractionRatio?a.refractionRatio:0.98;this.fog=void 0!==a.fog?a.fog:
!0;this.shading=void 0!==a.shading?a.shading:THREE.SmoothShading;this.wireframe=void 0!==a.wireframe?a.wireframe:!1;this.wireframeLinewidth=void 0!==a.wireframeLinewidth?a.wireframeLinewidth:1;this.wireframeLinecap=void 0!==a.wireframeLinecap?a.wireframeLinecap:"round";this.wireframeLinejoin=void 0!==a.wireframeLinejoin?a.wireframeLinejoin:"round";this.vertexColors=void 0!==a.vertexColors?a.vertexColors:THREE.NoColors;this.skinning=void 0!==a.skinning?a.skinning:!1;this.morphTargets=void 0!==a.morphTargets?
a.morphTargets:!1};THREE.MeshBasicMaterial.prototype=new THREE.Material;THREE.MeshBasicMaterial.prototype.constructor=THREE.MeshBasicMaterial;
THREE.MeshLambertMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.color=void 0!==a.color?new THREE.Color(a.color):new THREE.Color(16777215);this.ambient=void 0!==a.ambient?new THREE.Color(a.ambient):new THREE.Color(16777215);this.emissive=void 0!==a.emissive?new THREE.Color(a.emissive):new THREE.Color(0);this.wrapAround=void 0!==a.wrapAround?a.wrapAround:!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.map=void 0!==a.map?a.map:null;this.lightMap=void 0!==a.lightMap?a.lightMap:null;this.envMap=
void 0!==a.envMap?a.envMap:null;this.combine=void 0!==a.combine?a.combine:THREE.MultiplyOperation;this.reflectivity=void 0!==a.reflectivity?a.reflectivity:1;this.refractionRatio=void 0!==a.refractionRatio?a.refractionRatio:0.98;this.fog=void 0!==a.fog?a.fog:!0;this.shading=void 0!==a.shading?a.shading:THREE.SmoothShading;this.wireframe=void 0!==a.wireframe?a.wireframe:!1;this.wireframeLinewidth=void 0!==a.wireframeLinewidth?a.wireframeLinewidth:1;this.wireframeLinecap=void 0!==a.wireframeLinecap?
a.wireframeLinecap:"round";this.wireframeLinejoin=void 0!==a.wireframeLinejoin?a.wireframeLinejoin:"round";this.vertexColors=void 0!==a.vertexColors?a.vertexColors:THREE.NoColors;this.skinning=void 0!==a.skinning?a.skinning:!1;this.morphTargets=void 0!==a.morphTargets?a.morphTargets:!1;this.morphNormals=void 0!==a.morphNormals?a.morphNormals:!1};THREE.MeshLambertMaterial.prototype=new THREE.Material;THREE.MeshLambertMaterial.prototype.constructor=THREE.MeshLambertMaterial;
THREE.MeshPhongMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.color=void 0!==a.color?new THREE.Color(a.color):new THREE.Color(16777215);this.ambient=void 0!==a.ambient?new THREE.Color(a.ambient):new THREE.Color(16777215);this.emissive=void 0!==a.emissive?new THREE.Color(a.emissive):new THREE.Color(0);this.specular=void 0!==a.specular?new THREE.Color(a.specular):new THREE.Color(1118481);this.shininess=void 0!==a.shininess?a.shininess:30;this.metal=void 0!==a.metal?a.metal:!1;this.perPixel=
void 0!==a.perPixel?a.perPixel:!1;this.wrapAround=void 0!==a.wrapAround?a.wrapAround:!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.map=void 0!==a.map?a.map:null;this.lightMap=void 0!==a.lightMap?a.lightMap:null;this.envMap=void 0!==a.envMap?a.envMap:null;this.combine=void 0!==a.combine?a.combine:THREE.MultiplyOperation;this.reflectivity=void 0!==a.reflectivity?a.reflectivity:1;this.refractionRatio=void 0!==a.refractionRatio?a.refractionRatio:0.98;this.fog=void 0!==a.fog?a.fog:!0;this.shading=void 0!==
a.shading?a.shading:THREE.SmoothShading;this.wireframe=void 0!==a.wireframe?a.wireframe:!1;this.wireframeLinewidth=void 0!==a.wireframeLinewidth?a.wireframeLinewidth:1;this.wireframeLinecap=void 0!==a.wireframeLinecap?a.wireframeLinecap:"round";this.wireframeLinejoin=void 0!==a.wireframeLinejoin?a.wireframeLinejoin:"round";this.vertexColors=void 0!==a.vertexColors?a.vertexColors:THREE.NoColors;this.skinning=void 0!==a.skinning?a.skinning:!1;this.morphTargets=void 0!==a.morphTargets?a.morphTargets:
!1;this.morphNormals=void 0!==a.morphNormals?a.morphNormals:!1};THREE.MeshPhongMaterial.prototype=new THREE.Material;THREE.MeshPhongMaterial.prototype.constructor=THREE.MeshPhongMaterial;THREE.MeshDepthMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.shading=void 0!==a.shading?a.shading:THREE.SmoothShading;this.wireframe=void 0!==a.wireframe?a.wireframe:!1;this.wireframeLinewidth=void 0!==a.wireframeLinewidth?a.wireframeLinewidth:1};THREE.MeshDepthMaterial.prototype=new THREE.Material;
THREE.MeshDepthMaterial.prototype.constructor=THREE.MeshDepthMaterial;THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.shading=a.shading?a.shading:THREE.FlatShading;this.wireframe=a.wireframe?a.wireframe:!1;this.wireframeLinewidth=a.wireframeLinewidth?a.wireframeLinewidth:1};THREE.MeshNormalMaterial.prototype=new THREE.Material;THREE.MeshNormalMaterial.prototype.constructor=THREE.MeshNormalMaterial;THREE.MeshFaceMaterial=function(){};
THREE.ParticleBasicMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.color=void 0!==a.color?new THREE.Color(a.color):new THREE.Color(16777215);this.map=void 0!==a.map?a.map:null;this.size=void 0!==a.size?a.size:1;this.sizeAttenuation=void 0!==a.sizeAttenuation?a.sizeAttenuation:!0;this.vertexColors=void 0!==a.vertexColors?a.vertexColors:!1;this.fog=void 0!==a.fog?a.fog:!0};THREE.ParticleBasicMaterial.prototype=new THREE.Material;THREE.ParticleBasicMaterial.prototype.constructor=THREE.ParticleBasicMaterial;
THREE.ShaderMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.fragmentShader=void 0!==a.fragmentShader?a.fragmentShader:"void main() {}";this.vertexShader=void 0!==a.vertexShader?a.vertexShader:"void main() {}";this.uniforms=void 0!==a.uniforms?a.uniforms:{};this.attributes=a.attributes;this.shading=void 0!==a.shading?a.shading:THREE.SmoothShading;this.wireframe=void 0!==a.wireframe?a.wireframe:!1;this.wireframeLinewidth=void 0!==a.wireframeLinewidth?a.wireframeLinewidth:1;this.fog=void 0!==
a.fog?a.fog:!1;this.lights=void 0!==a.lights?a.lights:!1;this.vertexColors=void 0!==a.vertexColors?a.vertexColors:THREE.NoColors;this.skinning=void 0!==a.skinning?a.skinning:!1;this.morphTargets=void 0!==a.morphTargets?a.morphTargets:!1;this.morphNormals=void 0!==a.morphNormals?a.morphNormals:!1};THREE.ShaderMaterial.prototype=new THREE.Material;THREE.ShaderMaterial.prototype.constructor=THREE.ShaderMaterial;
THREE.Texture=function(a,b,c,d,e,f,h,j){this.id=THREE.TextureCount++;this.image=a;this.mapping=void 0!==b?b:new THREE.UVMapping;this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==e?e:THREE.LinearFilter;this.minFilter=void 0!==f?f:THREE.LinearMipMapLinearFilter;this.format=void 0!==h?h:THREE.RGBAFormat;this.type=void 0!==j?j:THREE.UnsignedByteType;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.generateMipmaps=
!0;this.needsUpdate=this.premultiplyAlpha=!1;this.onUpdate=null};THREE.Texture.prototype={constructor:THREE.Texture,clone:function(){var a=new THREE.Texture(this.image,this.mapping,this.wrapS,this.wrapT,this.magFilter,this.minFilter,this.format,this.type);a.offset.copy(this.offset);a.repeat.copy(this.repeat);return a}};THREE.TextureCount=0;THREE.MultiplyOperation=0;THREE.MixOperation=1;THREE.UVMapping=function(){};THREE.CubeReflectionMapping=function(){};THREE.CubeRefractionMapping=function(){};
THREE.SphericalReflectionMapping=function(){};THREE.SphericalRefractionMapping=function(){};THREE.RepeatWrapping=0;THREE.ClampToEdgeWrapping=1;THREE.MirroredRepeatWrapping=2;THREE.NearestFilter=3;THREE.NearestMipMapNearestFilter=4;THREE.NearestMipMapLinearFilter=5;THREE.LinearFilter=6;THREE.LinearMipMapNearestFilter=7;THREE.LinearMipMapLinearFilter=8;THREE.ByteType=9;THREE.UnsignedByteType=10;THREE.ShortType=11;THREE.UnsignedShortType=12;THREE.IntType=13;THREE.UnsignedIntType=14;THREE.FloatType=15;
THREE.AlphaFormat=16;THREE.RGBFormat=17;THREE.RGBAFormat=18;THREE.LuminanceFormat=19;THREE.LuminanceAlphaFormat=20;THREE.DataTexture=function(a,b,c,d,e,f,h,j,k,l){THREE.Texture.call(this,null,f,h,j,k,l,d,e);this.image={data:a,width:b,height:c}};THREE.DataTexture.prototype=new THREE.Texture;THREE.DataTexture.prototype.constructor=THREE.DataTexture;
THREE.DataTexture.prototype.clone=function(){var a=new THREE.DataTexture(this.image.data,this.image.width,this.image.height,this.format,this.type,this.mapping,this.wrapS,this.wrapT,this.magFilter,this.minFilter);a.offset.copy(this.offset);a.repeat.copy(this.repeat);return a};THREE.Particle=function(a){THREE.Object3D.call(this);this.material=a};THREE.Particle.prototype=new THREE.Object3D;THREE.Particle.prototype.constructor=THREE.Particle;
THREE.ParticleSystem=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.ParticleBasicMaterial({color:16777215*Math.random()});this.sortParticles=!1;this.geometry&&(this.geometry.boundingSphere||this.geometry.computeBoundingSphere(),this.boundRadius=a.boundingSphere.radius);this.frustumCulled=!1};THREE.ParticleSystem.prototype=new THREE.Object3D;THREE.ParticleSystem.prototype.constructor=THREE.ParticleSystem;
THREE.Line=function(a,b,c){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.LineBasicMaterial({color:16777215*Math.random()});this.type=void 0!==c?c:THREE.LineStrip;this.geometry&&(this.geometry.boundingSphere||this.geometry.computeBoundingSphere())};THREE.LineStrip=0;THREE.LinePieces=1;THREE.Line.prototype=new THREE.Object3D;THREE.Line.prototype.constructor=THREE.Line;
THREE.Mesh=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.MeshBasicMaterial({color:16777215*Math.random(),wireframe:!0});if(this.geometry&&(this.geometry.boundingSphere||this.geometry.computeBoundingSphere(),this.boundRadius=a.boundingSphere.radius,this.geometry.morphTargets.length)){this.morphTargetBase=-1;this.morphTargetForcedOrder=[];this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var c=0;c<this.geometry.morphTargets.length;c++)this.morphTargetInfluences.push(0),
this.morphTargetDictionary[this.geometry.morphTargets[c].name]=c}};THREE.Mesh.prototype=new THREE.Object3D;THREE.Mesh.prototype.constructor=THREE.Mesh;THREE.Mesh.prototype.supr=THREE.Object3D.prototype;THREE.Mesh.prototype.getMorphTargetIndexByName=function(a){if(void 0!==this.morphTargetDictionary[a])return this.morphTargetDictionary[a];console.log("THREE.Mesh.getMorphTargetIndexByName: morph target "+a+" does not exist. Returning 0.");return 0};
THREE.Ribbon=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=b};THREE.Ribbon.prototype=new THREE.Object3D;THREE.Ribbon.prototype.constructor=THREE.Ribbon;THREE.LOD=function(){THREE.Object3D.call(this);this.LODs=[]};THREE.LOD.prototype=new THREE.Object3D;THREE.LOD.prototype.constructor=THREE.LOD;THREE.LOD.prototype.supr=THREE.Object3D.prototype;
THREE.LOD.prototype.addLevel=function(a,b){void 0===b&&(b=0);b=Math.abs(b);for(var c=0;c<this.LODs.length&&!(b<this.LODs[c].visibleAtDistance);c++);this.LODs.splice(c,0,{visibleAtDistance:b,object3D:a});this.add(a)};
THREE.LOD.prototype.update=function(a){if(1<this.LODs.length){a.matrixWorldInverse.getInverse(a.matrixWorld);a=a.matrixWorldInverse;a=-(a.elements[2]*this.matrixWorld.elements[12]+a.elements[6]*this.matrixWorld.elements[13]+a.elements[10]*this.matrixWorld.elements[14]+a.elements[14]);this.LODs[0].object3D.visible=!0;for(var b=1;b<this.LODs.length;b++)if(a>=this.LODs[b].visibleAtDistance)this.LODs[b-1].object3D.visible=!1,this.LODs[b].object3D.visible=!0;else break;for(;b<this.LODs.length;b++)this.LODs[b].object3D.visible=
!1}};
THREE.Sprite=function(a){THREE.Object3D.call(this);this.color=void 0!==a.color?new THREE.Color(a.color):new THREE.Color(16777215);this.map=void 0!==a.map?a.map:new THREE.Texture;this.blending=void 0!==a.blending?a.blending:THREE.NormalBlending;this.blendSrc=void 0!==a.blendSrc?a.blendSrc:THREE.SrcAlphaFactor;this.blendDst=void 0!==a.blendDst?a.blendDst:THREE.OneMinusSrcAlphaFactor;this.blendEquation=void 0!==a.blendEquation?a.blendEquation:THREE.AddEquation;this.useScreenCoordinates=void 0!==a.useScreenCoordinates?
a.useScreenCoordinates:!0;this.mergeWith3D=void 0!==a.mergeWith3D?a.mergeWith3D:!this.useScreenCoordinates;this.affectedByDistance=void 0!==a.affectedByDistance?a.affectedByDistance:!this.useScreenCoordinates;this.scaleByViewport=void 0!==a.scaleByViewport?a.scaleByViewport:!this.affectedByDistance;this.alignment=a.alignment instanceof THREE.Vector2?a.alignment:THREE.SpriteAlignment.center;this.rotation3d=this.rotation;this.rotation=0;this.opacity=1;this.uvOffset=new THREE.Vector2(0,0);this.uvScale=
new THREE.Vector2(1,1)};THREE.Sprite.prototype=new THREE.Object3D;THREE.Sprite.prototype.constructor=THREE.Sprite;THREE.Sprite.prototype.updateMatrix=function(){this.matrix.setPosition(this.position);this.rotation3d.set(0,0,this.rotation);this.matrix.setRotationFromEuler(this.rotation3d);if(1!==this.scale.x||1!==this.scale.y)this.matrix.scale(this.scale),this.boundRadiusScale=Math.max(this.scale.x,this.scale.y);this.matrixWorldNeedsUpdate=!0};THREE.SpriteAlignment={};
THREE.SpriteAlignment.topLeft=new THREE.Vector2(1,-1);THREE.SpriteAlignment.topCenter=new THREE.Vector2(0,-1);THREE.SpriteAlignment.topRight=new THREE.Vector2(-1,-1);THREE.SpriteAlignment.centerLeft=new THREE.Vector2(1,0);THREE.SpriteAlignment.center=new THREE.Vector2(0,0);THREE.SpriteAlignment.centerRight=new THREE.Vector2(-1,0);THREE.SpriteAlignment.bottomLeft=new THREE.Vector2(1,1);THREE.SpriteAlignment.bottomCenter=new THREE.Vector2(0,1);
THREE.SpriteAlignment.bottomRight=new THREE.Vector2(-1,1);THREE.Scene=function(){THREE.Object3D.call(this);this.overrideMaterial=this.fog=null;this.matrixAutoUpdate=!1;this.__objects=[];this.__lights=[];this.__objectsAdded=[];this.__objectsRemoved=[]};THREE.Scene.prototype=new THREE.Object3D;THREE.Scene.prototype.constructor=THREE.Scene;
THREE.Scene.prototype.__addObject=function(a){if(a instanceof THREE.Light)-1===this.__lights.indexOf(a)&&this.__lights.push(a);else if(!(a instanceof THREE.Camera)&&-1===this.__objects.indexOf(a)){this.__objects.push(a);this.__objectsAdded.push(a);var b=this.__objectsRemoved.indexOf(a);-1!==b&&this.__objectsRemoved.splice(b,1)}for(b=0;b<a.children.length;b++)this.__addObject(a.children[b])};
THREE.Scene.prototype.__removeObject=function(a){if(a instanceof THREE.Light){var b=this.__lights.indexOf(a);-1!==b&&this.__lights.splice(b,1)}else a instanceof THREE.Camera||(b=this.__objects.indexOf(a),-1!==b&&(this.__objects.splice(b,1),this.__objectsRemoved.push(a),b=this.__objectsAdded.indexOf(a),-1!==b&&this.__objectsAdded.splice(b,1)));for(b=0;b<a.children.length;b++)this.__removeObject(a.children[b])};
THREE.Fog=function(a,b,c){this.color=new THREE.Color(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3};THREE.FogExp2=function(a,b){this.color=new THREE.Color(a);this.density=void 0!==b?b:2.5E-4};
THREE.ShaderChunk={fog_pars_fragment:"#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",fog_fragment:"#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\nvarying vec3 vReflect;\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform float flipEnvMap;\nuniform int combine;\n#endif",
envmap_fragment:"#ifdef USE_ENVMAP\n#ifdef DOUBLE_SIDED\nfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\nvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * vReflect.x, vReflect.yz ) );\n#else\nvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * vReflect.x, vReflect.yz ) );\n#endif\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\nif ( combine == 1 ) {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, reflectivity );\n} else {\ngl_FragColor.xyz = gl_FragColor.xyz * cubeColor.xyz;\n}\n#endif",
envmap_pars_vertex:"#ifdef USE_ENVMAP\nvarying vec3 vReflect;\nuniform float refractionRatio;\nuniform bool useRefract;\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvec3 nWorld = mat3( objectMatrix[ 0 ].xyz, objectMatrix[ 1 ].xyz, objectMatrix[ 2 ].xyz ) * normal;\nif ( useRefract ) {\nvReflect = refract( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ), refractionRatio );\n} else {\nvReflect = reflect( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ) );\n}\n#endif",
map_particle_pars_fragment:"#ifdef USE_MAP\nuniform sampler2D map;\n#endif",map_particle_fragment:"#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, gl_PointCoord );\n#endif",map_pars_vertex:"#ifdef USE_MAP\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\n#endif",map_pars_fragment:"#ifdef USE_MAP\nvarying vec2 vUv;\nuniform sampler2D map;\n#endif",map_vertex:"#ifdef USE_MAP\nvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",map_fragment:"#ifdef USE_MAP\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( map, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( map, vUv );\n#endif\n#endif",
lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\nuniform sampler2D lightMap;\n#endif",lightmap_pars_vertex:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\n#endif",lightmap_fragment:"#ifdef USE_LIGHTMAP\ngl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n#endif",lightmap_vertex:"#ifdef USE_LIGHTMAP\nvUv2 = uv2;\n#endif",lights_lambert_pars_vertex:"uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngle[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif",
lights_lambert_vertex:"vLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\nvLightBack = vec3( 0.0 );\n#endif\ntransformedNormal = normalize( transformedNormal );\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, dirVector );\nvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\ndirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\ndirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n#ifdef DOUBLE_SIDED\nvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n#endif\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\npointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\npointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n#ifdef DOUBLE_SIDED\nvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nlVector = normalize( lVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - mPosition.xyz ) );\nif ( spotEffect > spotLightAngle[ i ] ) {\nspotEffect = pow( spotEffect, spotLightExponent[ i ] );\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\nspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\nspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n#ifdef DOUBLE_SIDED\nvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n#endif\n}\n}\n#endif\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n#ifdef DOUBLE_SIDED\nvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n#endif",
lights_phong_pars_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvarying vec3 vWorldPosition;\n#endif",lights_phong_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nvSpotLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvWorldPosition = mPosition.xyz;\n#endif",
lights_phong_pars_fragment:"uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#else\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngle[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#else\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\nvarying vec3 vWorldPosition;\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",
lights_phong_fragment:"vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vPointLight[ i ].xyz );\nfloat lDistance = vPointLight[ i ].w;\n#endif\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n#endif\npointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\nvec3 pointHalfVector = normalize( lVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = max( pow( pointDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n#else\npointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse  = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vSpotLight[ i ].xyz );\nfloat lDistance = vSpotLight[ i ].w;\n#endif\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngle[ i ] ) {\nspotEffect = pow( spotEffect, spotLightExponent[ i ] );\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n#endif\nspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\nvec3 spotHalfVector = normalize( lVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = max( pow( spotDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, dirVector );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n#endif\ndirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = max( pow( dirDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif",
color_pars_fragment:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_fragment:"#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif",color_pars_vertex:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n#endif",skinning_vertex:"#ifdef USE_SKINNING\ngl_Position  = ( boneGlobalMatrices[ int( skinIndex.x ) ] * skinVertexA ) * skinWeight.x;\ngl_Position += ( boneGlobalMatrices[ int( skinIndex.y ) ] * skinVertexB ) * skinWeight.y;\ngl_Position  = projectionMatrix * modelViewMatrix * gl_Position;\n#endif",
morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n#ifndef USE_MORPHNORMALS\nuniform float morphTargetInfluences[ 8 ];\n#else\nuniform float morphTargetInfluences[ 4 ];\n#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n#ifndef USE_MORPHNORMALS\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n#endif\nmorphed += position;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( morphed, 1.0 );\n#endif",
default_vertex:"#ifndef USE_MORPHTARGETS\n#ifndef USE_SKINNING\ngl_Position = projectionMatrix * mvPosition;\n#endif\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\nvec3 morphedNormal = vec3( 0.0 );\nmorphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\nmorphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\nmorphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\nmorphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\nmorphedNormal += normal;\nvec3 transformedNormal = normalMatrix * morphedNormal;\n#else\nvec3 transformedNormal = normalMatrix * normal;\n#endif",
shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif",shadowmap_fragment:"#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_DEBUG\nvec3 frustumColors[3];\nfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\nfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\nfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n#endif\n#ifdef SHADOWMAP_CASCADE\nint inFrustumCount = 0;\n#endif\nfloat fDepth;\nvec3 shadowColor = vec3( 1.0 );\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\nbool inFrustum = all( inFrustumVec );\n#ifdef SHADOWMAP_CASCADE\ninFrustumCount += int( inFrustum );\nbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n#else\nbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n#endif\nbool frustumTest = all( frustumTestVec );\nif ( frustumTest ) {\nshadowCoord.z += shadowBias[ i ];\n#ifdef SHADOWMAP_SOFT\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth < shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n#ifdef SHADOWMAP_DEBUG\n#ifdef SHADOWMAP_CASCADE\nif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n#else\nif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n#endif\n#endif\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif",
shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n#ifdef USE_MORPHTARGETS\nvShadowCoord[ i ] = shadowMatrix[ i ] * objectMatrix * vec4( morphed, 1.0 );\n#else\nvShadowCoord[ i ] = shadowMatrix[ i ] * objectMatrix * vec4( position, 1.0 );\n#endif\n}\n#endif",alphatest_fragment:"#ifdef ALPHATEST\nif ( gl_FragColor.a < ALPHATEST ) discard;\n#endif",
linear_to_gamma_fragment:"#ifdef GAMMA_OUTPUT\ngl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n#endif"};
THREE.UniformsUtils={merge:function(a){var b,c,d,e={};for(b=0;b<a.length;b++)for(c in d=this.clone(a[b]),d)e[c]=d[c];return e},clone:function(a){var b,c,d,e={};for(b in a)for(c in e[b]={},a[b])d=a[b][c],e[b][c]=d instanceof THREE.Color||d instanceof THREE.Vector2||d instanceof THREE.Vector3||d instanceof THREE.Vector4||d instanceof THREE.Matrix4||d instanceof THREE.Texture?d.clone():d instanceof Array?d.slice():d;return e}};
THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:0,texture:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},lightMap:{type:"t",value:2,texture:null},envMap:{type:"t",value:1,texture:null},flipEnvMap:{type:"f",value:-1},useRefract:{type:"i",value:0},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:0.98},combine:{type:"i",value:0},morphTargetInfluences:{type:"f",value:0}},fog:{fogDensity:{type:"f",
value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]},spotLightColor:{type:"fv",value:[]},spotLightPosition:{type:"fv",value:[]},spotLightDirection:{type:"fv",value:[]},spotLightDistance:{type:"fv1",
value:[]},spotLightAngle:{type:"fv1",value:[]},spotLightExponent:{type:"fv1",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",value:1},scale:{type:"f",value:1},map:{type:"t",value:0,texture:null},fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:6,texture:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",
value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}};
THREE.ShaderLib={depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2E3},opacity:{type:"f",value:1}},vertexShader:"void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), opacity );\n}"},normal:{uniforms:{opacity:{type:"f",
value:1}},vertexShader:"varying vec3 vNormal;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvNormal = normalMatrix * normal;\ngl_Position = projectionMatrix * mvPosition;\n}",fragmentShader:"uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}"},basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.map_pars_vertex,
THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.morphtarget_vertex,
THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,
THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,
1,1)}}]),vertexShader:["varying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",THREE.ShaderChunk.map_vertex,
THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,"#ifndef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\n#endif",THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",
THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,"#ifdef DOUBLE_SIDED\nif ( gl_FrontFacing )\ngl_FragColor.xyz *= vLightFront;\nelse\ngl_FragColor.xyz *= vLightBack;\n#else\ngl_FragColor.xyz *= vLightFront;\n#endif",
THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",value:new THREE.Color(1118481)},
shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["varying vec3 vViewPosition;\nvarying vec3 vNormal;",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.color_vertex,"#ifndef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\n#endif\nvViewPosition = -mvPosition.xyz;",THREE.ShaderChunk.morphnormal_vertex,"vNormal = transformedNormal;",THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),
fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",
THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",
THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;",THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,
THREE.ShaderChunk.map_particle_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( psColor, opacity );",THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.morphtarget_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"vec4 pack_depth( const in float depth ) {\nconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\nconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\nvec4 res = fract( depth * bit_shift );\nres -= res.xxyz * bit_mask;\nreturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}"}};
THREE.WebGLRenderer=function(a){function b(a,b){var c=a.vertices.length,d=b.material;if(d.attributes){void 0===a.__webglCustomAttributesList&&(a.__webglCustomAttributesList=[]);for(var e in d.attributes){var f=d.attributes[e];if(!f.__webglInitialized||f.createUniqueBuffers){f.__webglInitialized=!0;var h=1;"v2"===f.type?h=2:"v3"===f.type?h=3:"v4"===f.type?h=4:"c"===f.type&&(h=3);f.size=h;f.array=new Float32Array(c*h);f.buffer=g.createBuffer();f.buffer.belongsToAttribute=e;f.needsUpdate=!0}a.__webglCustomAttributesList.push(f)}}}
function c(a,b){if(a.material&&!(a.material instanceof THREE.MeshFaceMaterial))return a.material;if(0<=b.materialIndex)return a.geometry.materials[b.materialIndex]}function d(a){return a instanceof THREE.MeshBasicMaterial&&!a.envMap||a instanceof THREE.MeshDepthMaterial?!1:a&&void 0!==a.shading&&a.shading===THREE.SmoothShading?THREE.SmoothShading:THREE.FlatShading}function e(a){return a.map||a.lightMap||a instanceof THREE.ShaderMaterial?!0:!1}function f(a,b,c){var d,e,f,h,j=a.vertices;h=j.length;
var l=a.colors,k=l.length,m=a.__vertexArray,p=a.__colorArray,q=a.__sortArray,n=a.verticesNeedUpdate,u=a.colorsNeedUpdate,r=a.__webglCustomAttributesList;if(c.sortParticles){Kb.copy(sb);Kb.multiplySelf(c.matrixWorld);for(d=0;d<h;d++)e=j[d],Ta.copy(e),Kb.multiplyVector3(Ta),q[d]=[Ta.z,d];q.sort(function(a,b){return b[0]-a[0]});for(d=0;d<h;d++)e=j[q[d][1]],f=3*d,m[f]=e.x,m[f+1]=e.y,m[f+2]=e.z;for(d=0;d<k;d++)f=3*d,e=l[q[d][1]],p[f]=e.r,p[f+1]=e.g,p[f+2]=e.b;if(r){l=0;for(k=r.length;l<k;l++)if(j=r[l],
void 0===j.boundTo||"vertices"===j.boundTo)if(f=0,e=j.value.length,1===j.size)for(d=0;d<e;d++)h=q[d][1],j.array[d]=j.value[h];else if(2===j.size)for(d=0;d<e;d++)h=q[d][1],h=j.value[h],j.array[f]=h.x,j.array[f+1]=h.y,f+=2;else if(3===j.size)if("c"===j.type)for(d=0;d<e;d++)h=q[d][1],h=j.value[h],j.array[f]=h.r,j.array[f+1]=h.g,j.array[f+2]=h.b,f+=3;else for(d=0;d<e;d++)h=q[d][1],h=j.value[h],j.array[f]=h.x,j.array[f+1]=h.y,j.array[f+2]=h.z,f+=3;else if(4===j.size)for(d=0;d<e;d++)h=q[d][1],h=j.value[h],
j.array[f]=h.x,j.array[f+1]=h.y,j.array[f+2]=h.z,j.array[f+3]=h.w,f+=4}}else{if(n)for(d=0;d<h;d++)e=j[d],f=3*d,m[f]=e.x,m[f+1]=e.y,m[f+2]=e.z;if(u)for(d=0;d<k;d++)e=l[d],f=3*d,p[f]=e.r,p[f+1]=e.g,p[f+2]=e.b;if(r){l=0;for(k=r.length;l<k;l++)if(j=r[l],j.needsUpdate&&(void 0===j.boundTo||"vertices"===j.boundTo))if(e=j.value.length,f=0,1===j.size)for(d=0;d<e;d++)j.array[d]=j.value[d];else if(2===j.size)for(d=0;d<e;d++)h=j.value[d],j.array[f]=h.x,j.array[f+1]=h.y,f+=2;else if(3===j.size)if("c"===j.type)for(d=
0;d<e;d++)h=j.value[d],j.array[f]=h.r,j.array[f+1]=h.g,j.array[f+2]=h.b,f+=3;else for(d=0;d<e;d++)h=j.value[d],j.array[f]=h.x,j.array[f+1]=h.y,j.array[f+2]=h.z,f+=3;else if(4===j.size)for(d=0;d<e;d++)h=j.value[d],j.array[f]=h.x,j.array[f+1]=h.y,j.array[f+2]=h.z,j.array[f+3]=h.w,f+=4}}if(n||c.sortParticles)g.bindBuffer(g.ARRAY_BUFFER,a.__webglVertexBuffer),g.bufferData(g.ARRAY_BUFFER,m,b);if(u||c.sortParticles)g.bindBuffer(g.ARRAY_BUFFER,a.__webglColorBuffer),g.bufferData(g.ARRAY_BUFFER,p,b);if(r){l=
0;for(k=r.length;l<k;l++)if(j=r[l],j.needsUpdate||c.sortParticles)g.bindBuffer(g.ARRAY_BUFFER,j.buffer),g.bufferData(g.ARRAY_BUFFER,j.array,b)}}function h(a,b){return b.z-a.z}function j(a,b,c){if(a.length)for(var d=0,e=a.length;d<e;d++)aa=Q=null,R=P=Ea=za=T=J=Fa=-1,tb=!0,a[d].render(b,c,Pa,mb),aa=Q=null,R=P=Ea=za=T=J=Fa=-1,tb=!0}function k(a,b,c,d,e,g,f,h){var j,l,k,m;b?(l=a.length-1,m=b=-1):(l=0,b=a.length,m=1);for(var p=l;p!==b;p+=m)if(j=a[p],j.render){l=j.object;k=j.buffer;if(h)j=h;else{j=j[c];
if(!j)continue;f&&C.setBlending(j.blending,j.blendEquation,j.blendSrc,j.blendDst);C.setDepthTest(j.depthTest);C.setDepthWrite(j.depthWrite);u(j.polygonOffset,j.polygonOffsetFactor,j.polygonOffsetUnits)}C.setObjectFaces(l);k instanceof THREE.BufferGeometry?C.renderBufferDirect(d,e,g,j,k,l):C.renderBuffer(d,e,g,j,k,l)}}function l(a,b,c,d,e,g,f){for(var h,j,l=0,k=a.length;l<k;l++)if(h=a[l],j=h.object,j.visible){if(f)h=f;else{h=h[b];if(!h)continue;g&&C.setBlending(h.blending,h.blendEquation,h.blendSrc,
h.blendDst);C.setDepthTest(h.depthTest);C.setDepthWrite(h.depthWrite);u(h.polygonOffset,h.polygonOffsetFactor,h.polygonOffsetUnits)}C.renderImmediateObject(c,d,e,h,j)}}function m(a,b,c){a.push({buffer:b,object:c,opaque:null,transparent:null})}function n(a){for(var b in a.attributes)if(a.attributes[b].needsUpdate)return!0;return!1}function q(a){for(var b in a.attributes)a.attributes[b].needsUpdate=!1}function p(a,b,c,d,e){if(!d.program||d.needsUpdate)C.initMaterial(d,b,c,e),d.needsUpdate=!1;if(d.morphTargets&&
!e.__webglMorphTargetInfluences){e.__webglMorphTargetInfluences=new Float32Array(C.maxMorphTargets);for(var f=0,h=C.maxMorphTargets;f<h;f++)e.__webglMorphTargetInfluences[f]=0}var j=!1,f=d.program,h=f.uniforms,l=d.uniforms;f!==Q&&(g.useProgram(f),Q=f,j=!0);d.id!==R&&(R=d.id,j=!0);if(j||a!==aa)g.uniformMatrix4fv(h.projectionMatrix,!1,a._projectionMatrixArray),a!==aa&&(aa=a);if(j){c&&d.fog&&(l.fogColor.value=c.color,c instanceof THREE.Fog?(l.fogNear.value=c.near,l.fogFar.value=c.far):c instanceof THREE.FogExp2&&
(l.fogDensity.value=c.density));if(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d.lights){if(tb){var k,m=0,p=0,q=0,n,r,u,s=cc,z=s.directional.colors,D=s.directional.positions,E=s.point.colors,L=s.point.positions,na=s.point.distances,P=s.spot.colors,K=s.spot.positions,J=s.spot.distances,S=s.spot.directions,ba=s.spot.angles,za=s.spot.exponents,Aa=0,ia=0,T=0,ka=u=0;c=ka=0;for(j=b.length;c<j;c++)k=b[c],k.onlyShadow||(n=k.color,r=k.intensity,u=k.distance,k instanceof THREE.AmbientLight?
C.gammaInput?(m+=n.r*n.r,p+=n.g*n.g,q+=n.b*n.b):(m+=n.r,p+=n.g,q+=n.b):k instanceof THREE.DirectionalLight?(u=3*Aa,C.gammaInput?(z[u]=n.r*n.r*r*r,z[u+1]=n.g*n.g*r*r,z[u+2]=n.b*n.b*r*r):(z[u]=n.r*r,z[u+1]=n.g*r,z[u+2]=n.b*r),Da.copy(k.matrixWorld.getPosition()),Da.subSelf(k.target.matrixWorld.getPosition()),Da.normalize(),D[u]=Da.x,D[u+1]=Da.y,D[u+2]=Da.z,Aa+=1):k instanceof THREE.PointLight?(ka=3*ia,C.gammaInput?(E[ka]=n.r*n.r*r*r,E[ka+1]=n.g*n.g*r*r,E[ka+2]=n.b*n.b*r*r):(E[ka]=n.r*r,E[ka+1]=n.g*
r,E[ka+2]=n.b*r),n=k.matrixWorld.getPosition(),L[ka]=n.x,L[ka+1]=n.y,L[ka+2]=n.z,na[ia]=u,ia+=1):k instanceof THREE.SpotLight&&(ka=3*T,C.gammaInput?(P[ka]=n.r*n.r*r*r,P[ka+1]=n.g*n.g*r*r,P[ka+2]=n.b*n.b*r*r):(P[ka]=n.r*r,P[ka+1]=n.g*r,P[ka+2]=n.b*r),n=k.matrixWorld.getPosition(),K[ka]=n.x,K[ka+1]=n.y,K[ka+2]=n.z,J[T]=u,Da.copy(n),Da.subSelf(k.target.matrixWorld.getPosition()),Da.normalize(),S[ka]=Da.x,S[ka+1]=Da.y,S[ka+2]=Da.z,ba[T]=Math.cos(k.angle),za[T]=k.exponent,T+=1));c=3*Aa;for(j=z.length;c<
j;c++)z[c]=0;c=3*ia;for(j=E.length;c<j;c++)E[c]=0;c=3*T;for(j=P.length;c<j;c++)P[c]=0;s.directional.length=Aa;s.point.length=ia;s.spot.length=T;s.ambient[0]=m;s.ambient[1]=p;s.ambient[2]=q;tb=!1}c=cc;l.ambientLightColor.value=c.ambient;l.directionalLightColor.value=c.directional.colors;l.directionalLightDirection.value=c.directional.positions;l.pointLightColor.value=c.point.colors;l.pointLightPosition.value=c.point.positions;l.pointLightDistance.value=c.point.distances;l.spotLightColor.value=c.spot.colors;
l.spotLightPosition.value=c.spot.positions;l.spotLightDistance.value=c.spot.distances;l.spotLightDirection.value=c.spot.directions;l.spotLightAngle.value=c.spot.angles;l.spotLightExponent.value=c.spot.exponents}if(d instanceof THREE.MeshBasicMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.MeshPhongMaterial)l.opacity.value=d.opacity,C.gammaInput?l.diffuse.value.copyGammaToLinear(d.color):l.diffuse.value=d.color,(l.map.texture=d.map)&&l.offsetRepeat.value.set(d.map.offset.x,d.map.offset.y,
d.map.repeat.x,d.map.repeat.y),l.lightMap.texture=d.lightMap,l.envMap.texture=d.envMap,l.flipEnvMap.value=d.envMap instanceof THREE.WebGLRenderTargetCube?1:-1,l.reflectivity.value=d.reflectivity,l.refractionRatio.value=d.refractionRatio,l.combine.value=d.combine,l.useRefract.value=d.envMap&&d.envMap.mapping instanceof THREE.CubeRefractionMapping;d instanceof THREE.LineBasicMaterial?(l.diffuse.value=d.color,l.opacity.value=d.opacity):d instanceof THREE.ParticleBasicMaterial?(l.psColor.value=d.color,
l.opacity.value=d.opacity,l.size.value=d.size,l.scale.value=_canvas.height/2,l.map.texture=d.map):d instanceof THREE.MeshPhongMaterial?(l.shininess.value=d.shininess,C.gammaInput?(l.ambient.value.copyGammaToLinear(d.ambient),l.emissive.value.copyGammaToLinear(d.emissive),l.specular.value.copyGammaToLinear(d.specular)):(l.ambient.value=d.ambient,l.emissive.value=d.emissive,l.specular.value=d.specular),d.wrapAround&&l.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshLambertMaterial?(C.gammaInput?
(l.ambient.value.copyGammaToLinear(d.ambient),l.emissive.value.copyGammaToLinear(d.emissive)):(l.ambient.value=d.ambient,l.emissive.value=d.emissive),d.wrapAround&&l.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshDepthMaterial?(l.mNear.value=a.near,l.mFar.value=a.far,l.opacity.value=d.opacity):d instanceof THREE.MeshNormalMaterial&&(l.opacity.value=d.opacity);if(e.receiveShadow&&!d._shadowPass&&l.shadowMatrix){j=c=0;for(k=b.length;j<k;j++)if(m=b[j],m.castShadow&&(m instanceof THREE.SpotLight||
m instanceof THREE.DirectionalLight&&!m.shadowCascade))l.shadowMap.texture[c]=m.shadowMap,l.shadowMapSize.value[c]=m.shadowMapSize,l.shadowMatrix.value[c]=m.shadowMatrix,l.shadowDarkness.value[c]=m.shadowDarkness,l.shadowBias.value[c]=m.shadowBias,c++}b=d.uniformsList;l=0;for(c=b.length;l<c;l++)if(m=f.uniforms[b[l][1]])switch(j=b[l][0],p=j.type,k=j.value,p){case "i":g.uniform1i(m,k);break;case "f":g.uniform1f(m,k);break;case "v2":g.uniform2f(m,k.x,k.y);break;case "v3":g.uniform3f(m,k.x,k.y,k.z);break;
case "v4":g.uniform4f(m,k.x,k.y,k.z,k.w);break;case "c":g.uniform3f(m,k.r,k.g,k.b);break;case "fv1":g.uniform1fv(m,k);break;case "fv":g.uniform3fv(m,k);break;case "v2v":j._array||(j._array=new Float32Array(2*k.length));p=0;for(q=k.length;p<q;p++)s=2*p,j._array[s]=k[p].x,j._array[s+1]=k[p].y;g.uniform2fv(m,j._array);break;case "v3v":j._array||(j._array=new Float32Array(3*k.length));p=0;for(q=k.length;p<q;p++)s=3*p,j._array[s]=k[p].x,j._array[s+1]=k[p].y,j._array[s+2]=k[p].z;g.uniform3fv(m,j._array);
break;case "v4v":j._array||(j._array=new Float32Array(4*k.length));p=0;for(q=k.length;p<q;p++)s=4*p,j._array[s]=k[p].x,j._array[s+1]=k[p].y,j._array[s+2]=k[p].z,j._array[s+3]=k[p].w;g.uniform4fv(m,j._array);break;case "m4":j._array||(j._array=new Float32Array(16));k.flattenToArray(j._array);g.uniformMatrix4fv(m,!1,j._array);break;case "m4v":j._array||(j._array=new Float32Array(16*k.length));p=0;for(q=k.length;p<q;p++)k[p].flattenToArrayOffset(j._array,16*p);g.uniformMatrix4fv(m,!1,j._array);break;
case "t":g.uniform1i(m,k);m=j.texture;if(!m)continue;if(m.image instanceof Array&&6===m.image.length){if(j=m,6===j.image.length)if(j.needsUpdate){j.image.__webglTextureCube||(j.image.__webglTextureCube=g.createTexture());g.activeTexture(g.TEXTURE0+k);g.bindTexture(g.TEXTURE_CUBE_MAP,j.image.__webglTextureCube);k=[];for(m=0;6>m;m++)p=k,q=m,C.autoScaleCubemaps?(s=j.image[m],D=qc,s.width<=D&&s.height<=D||(E=Math.max(s.width,s.height),z=Math.floor(s.width*D/E),D=Math.floor(s.height*D/E),E=document.createElement("canvas"),
E.width=z,E.height=D,E.getContext("2d").drawImage(s,0,0,s.width,s.height,0,0,z,D),s=E)):s=j.image[m],p[q]=s;m=k[0];p=0===(m.width&m.width-1)&&0===(m.height&m.height-1);q=w(j.format);s=w(j.type);y(g.TEXTURE_CUBE_MAP,j,p);for(m=0;6>m;m++)g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+m,0,q,q,s,k[m]);j.generateMipmaps&&p&&g.generateMipmap(g.TEXTURE_CUBE_MAP);j.needsUpdate=!1;if(j.onUpdate)j.onUpdate()}else g.activeTexture(g.TEXTURE0+k),g.bindTexture(g.TEXTURE_CUBE_MAP,j.image.__webglTextureCube)}else m instanceof
THREE.WebGLRenderTargetCube?(j=m,g.activeTexture(g.TEXTURE0+k),g.bindTexture(g.TEXTURE_CUBE_MAP,j.__webglTexture)):C.setTexture(m,k);break;case "tv":if(!j._array){j._array=[];p=0;for(q=j.texture.length;p<q;p++)j._array[p]=k+p}g.uniform1iv(m,j._array);p=0;for(q=j.texture.length;p<q;p++)(m=j.texture[p])&&C.setTexture(m,j._array[p])}if((d instanceof THREE.ShaderMaterial||d instanceof THREE.MeshPhongMaterial||d.envMap)&&null!==h.cameraPosition)b=a.matrixWorld.getPosition(),g.uniform3f(h.cameraPosition,
b.x,b.y,b.z);(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.ShaderMaterial||d.skinning)&&null!==h.viewMatrix&&g.uniformMatrix4fv(h.viewMatrix,!1,a._viewMatrixArray);d.skinning&&g.uniformMatrix4fv(h.boneGlobalMatrices,!1,e.boneMatrices)}g.uniformMatrix4fv(h.modelViewMatrix,!1,e._modelViewMatrix.elements);h.normalMatrix&&g.uniformMatrix3fv(h.normalMatrix,!1,e._normalMatrix.elements);null!==h.objectMatrix&&g.uniformMatrix4fv(h.objectMatrix,!1,e.matrixWorld.elements);
return f}function r(a,b){a._modelViewMatrix.multiply(b.matrixWorldInverse,a.matrixWorld);a._normalMatrix.getInverse(a._modelViewMatrix);a._normalMatrix.transpose()}function u(a,b,c){L!==a&&(a?g.enable(g.POLYGON_OFFSET_FILL):g.disable(g.POLYGON_OFFSET_FILL),L=a);if(a&&(S!==b||ba!==c))g.polygonOffset(b,c),S=b,ba=c}function s(a,b){var c;"fragment"===a?c=g.createShader(g.FRAGMENT_SHADER):"vertex"===a&&(c=g.createShader(g.VERTEX_SHADER));g.shaderSource(c,b);g.compileShader(c);return!g.getShaderParameter(c,
g.COMPILE_STATUS)?(console.error(g.getShaderInfoLog(c)),console.error(b),null):c}function y(a,b,c){c?(g.texParameteri(a,g.TEXTURE_WRAP_S,w(b.wrapS)),g.texParameteri(a,g.TEXTURE_WRAP_T,w(b.wrapT)),g.texParameteri(a,g.TEXTURE_MAG_FILTER,w(b.magFilter)),g.texParameteri(a,g.TEXTURE_MIN_FILTER,w(b.minFilter))):(g.texParameteri(a,g.TEXTURE_WRAP_S,g.CLAMP_TO_EDGE),g.texParameteri(a,g.TEXTURE_WRAP_T,g.CLAMP_TO_EDGE),g.texParameteri(a,g.TEXTURE_MAG_FILTER,z(b.magFilter)),g.texParameteri(a,g.TEXTURE_MIN_FILTER,
z(b.minFilter)))}function D(a,b){g.bindRenderbuffer(g.RENDERBUFFER,a);b.depthBuffer&&!b.stencilBuffer?(g.renderbufferStorage(g.RENDERBUFFER,g.DEPTH_COMPONENT16,b.width,b.height),g.framebufferRenderbuffer(g.FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.RENDERBUFFER,a)):b.depthBuffer&&b.stencilBuffer?(g.renderbufferStorage(g.RENDERBUFFER,g.DEPTH_STENCIL,b.width,b.height),g.framebufferRenderbuffer(g.FRAMEBUFFER,g.DEPTH_STENCIL_ATTACHMENT,g.RENDERBUFFER,a)):g.renderbufferStorage(g.RENDERBUFFER,g.RGBA4,b.width,b.height)}
function z(a){switch(a){case THREE.NearestFilter:case THREE.NearestMipMapNearestFilter:case THREE.NearestMipMapLinearFilter:return g.NEAREST;default:return g.LINEAR}}function w(a){switch(a){case THREE.RepeatWrapping:return g.REPEAT;case THREE.ClampToEdgeWrapping:return g.CLAMP_TO_EDGE;case THREE.MirroredRepeatWrapping:return g.MIRRORED_REPEAT;case THREE.NearestFilter:return g.NEAREST;case THREE.NearestMipMapNearestFilter:return g.NEAREST_MIPMAP_NEAREST;case THREE.NearestMipMapLinearFilter:return g.NEAREST_MIPMAP_LINEAR;
case THREE.LinearFilter:return g.LINEAR;case THREE.LinearMipMapNearestFilter:return g.LINEAR_MIPMAP_NEAREST;case THREE.LinearMipMapLinearFilter:return g.LINEAR_MIPMAP_LINEAR;case THREE.ByteType:return g.BYTE;case THREE.UnsignedByteType:return g.UNSIGNED_BYTE;case THREE.ShortType:return g.SHORT;case THREE.UnsignedShortType:return g.UNSIGNED_SHORT;case THREE.IntType:return g.INT;case THREE.UnsignedIntType:return g.UNSIGNED_INT;case THREE.FloatType:return g.FLOAT;case THREE.AlphaFormat:return g.ALPHA;
case THREE.RGBFormat:return g.RGB;case THREE.RGBAFormat:return g.RGBA;case THREE.LuminanceFormat:return g.LUMINANCE;case THREE.LuminanceAlphaFormat:return g.LUMINANCE_ALPHA;case THREE.AddEquation:return g.FUNC_ADD;case THREE.SubtractEquation:return g.FUNC_SUBTRACT;case THREE.ReverseSubtractEquation:return g.FUNC_REVERSE_SUBTRACT;case THREE.ZeroFactor:return g.ZERO;case THREE.OneFactor:return g.ONE;case THREE.SrcColorFactor:return g.SRC_COLOR;case THREE.OneMinusSrcColorFactor:return g.ONE_MINUS_SRC_COLOR;
case THREE.SrcAlphaFactor:return g.SRC_ALPHA;case THREE.OneMinusSrcAlphaFactor:return g.ONE_MINUS_SRC_ALPHA;case THREE.DstAlphaFactor:return g.DST_ALPHA;case THREE.OneMinusDstAlphaFactor:return g.ONE_MINUS_DST_ALPHA;case THREE.DstColorFactor:return g.DST_COLOR;case THREE.OneMinusDstColorFactor:return g.ONE_MINUS_DST_COLOR;case THREE.SrcAlphaSaturateFactor:return g.SRC_ALPHA_SATURATE}return 0}console.log("THREE.WebGLRenderer",THREE.REVISION);a=a||{};_canvas=void 0!==a.canvas?a.canvas:document.createElement("canvas");
_precision=void 0!==a.precision?a.precision:"highp";_alpha=void 0!==a.alpha?a.alpha:!0;_premultipliedAlpha=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0;_antialias=void 0!==a.antialias?a.antialias:!1;_stencil=void 0!==a.stencil?a.stencil:!0;_preserveDrawingBuffer=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1;_clearColor=void 0!==a.clearColor?new THREE.Color(a.clearColor):new THREE.Color(0);_clearAlpha=void 0!==a.clearAlpha?a.clearAlpha:0;_maxLights=void 0!==a.maxLights?a.maxLights:
4;this.domElement=_canvas;this.context=null;this.autoUpdateScene=this.autoUpdateObjects=this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.shadowMapEnabled=this.physicallyBasedShading=this.gammaOutput=this.gammaInput=!1;this.shadowMapCullFrontFaces=this.shadowMapSoft=this.shadowMapAutoUpdate=!0;this.shadowMapCascade=this.shadowMapDebug=!1;this.maxMorphTargets=8;this.maxMorphNormals=4;this.autoScaleCubemaps=!0;this.renderPluginsPre=[];this.renderPluginsPost=
[];this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var C=this,g,E=[],Q=null,na=null,R=-1,P=null,aa=null,Aa=0,za=-1,Ea=-1,Fa=-1,ia=-1,Ga=-1,pa=-1,J=-1,T=-1,L=null,S=null,ba=null,qa=null,K=0,ta=0,Ja=0,Sa=0,Pa=0,mb=0,Na=new THREE.Frustum,sb=new THREE.Matrix4,Kb=new THREE.Matrix4,Ta=new THREE.Vector4,Da=new THREE.Vector3,tb=!0,cc={ambient:[0,0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,colors:[],positions:[],distances:[]},spot:{length:0,
colors:[],positions:[],distances:[],directions:[],angles:[],exponents:[]}};gl=null;try{if(!(gl=_canvas.getContext("experimental-webgl",{alpha:_alpha,premultipliedAlpha:_premultipliedAlpha,antialias:_antialias,stencil:_stencil,preserveDrawingBuffer:_preserveDrawingBuffer})))throw"Error creating WebGL context.";}catch(rc){console.error(rc)}gl.getExtension("OES_texture_float")||console.log("THREE.WebGLRenderer: Float textures not supported.");g=gl;g.clearColor(0,0,0,1);g.clearDepth(1);g.clearStencil(0);
g.enable(g.DEPTH_TEST);g.depthFunc(g.LEQUAL);g.frontFace(g.CCW);g.cullFace(g.BACK);g.enable(g.CULL_FACE);g.enable(g.BLEND);g.blendEquation(g.FUNC_ADD);g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA);g.clearColor(_clearColor.r,_clearColor.g,_clearColor.b,_clearAlpha);this.context=g;var dc=g.getParameter(g.MAX_VERTEX_TEXTURE_IMAGE_UNITS);g.getParameter(g.MAX_TEXTURE_SIZE);var qc=g.getParameter(g.MAX_CUBE_MAP_TEXTURE_SIZE);this.getContext=function(){return g};this.supportsVertexTextures=function(){return 0<
dc};this.setSize=function(a,b){_canvas.width=a;_canvas.height=b;this.setViewport(0,0,_canvas.width,_canvas.height)};this.setViewport=function(a,b,c,d){K=a;ta=b;Ja=c;Sa=d;g.viewport(K,ta,Ja,Sa)};this.setScissor=function(a,b,c,d){g.scissor(a,b,c,d)};this.enableScissorTest=function(a){a?g.enable(g.SCISSOR_TEST):g.disable(g.SCISSOR_TEST)};this.setClearColorHex=function(a,b){_clearColor.setHex(a);_clearAlpha=b;g.clearColor(_clearColor.r,_clearColor.g,_clearColor.b,_clearAlpha)};this.setClearColor=function(a,
b){_clearColor.copy(a);_clearAlpha=b;g.clearColor(_clearColor.r,_clearColor.g,_clearColor.b,_clearAlpha)};this.getClearColor=function(){return _clearColor};this.getClearAlpha=function(){return _clearAlpha};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=g.COLOR_BUFFER_BIT;if(void 0===b||b)d|=g.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=g.STENCIL_BUFFER_BIT;g.clear(d)};this.clearTarget=function(a,b,c,d){this.setRenderTarget(a);this.clear(b,c,d)};this.addPostPlugin=function(a){a.init(this);this.renderPluginsPost.push(a)};
this.addPrePlugin=function(a){a.init(this);this.renderPluginsPre.push(a)};this.deallocateObject=function(a){if(a.__webglInit)if(a.__webglInit=!1,delete a._modelViewMatrix,delete a._normalMatrix,delete a._normalMatrixArray,delete a._modelViewMatrixArray,delete a._objectMatrixArray,a instanceof THREE.Mesh)for(var b in a.geometry.geometryGroups){var c=a.geometry.geometryGroups[b];g.deleteBuffer(c.__webglVertexBuffer);g.deleteBuffer(c.__webglNormalBuffer);g.deleteBuffer(c.__webglTangentBuffer);g.deleteBuffer(c.__webglColorBuffer);
g.deleteBuffer(c.__webglUVBuffer);g.deleteBuffer(c.__webglUV2Buffer);g.deleteBuffer(c.__webglSkinVertexABuffer);g.deleteBuffer(c.__webglSkinVertexBBuffer);g.deleteBuffer(c.__webglSkinIndicesBuffer);g.deleteBuffer(c.__webglSkinWeightsBuffer);g.deleteBuffer(c.__webglFaceBuffer);g.deleteBuffer(c.__webglLineBuffer);var d=void 0,e=void 0;if(c.numMorphTargets){d=0;for(e=c.numMorphTargets;d<e;d++)g.deleteBuffer(c.__webglMorphTargetsBuffers[d])}if(c.numMorphNormals){d=0;for(e=c.numMorphNormals;d<e;d++)g.deleteBuffer(c.__webglMorphNormalsBuffers[d])}if(c.__webglCustomAttributesList)for(d in d=
void 0,c.__webglCustomAttributesList)g.deleteBuffer(c.__webglCustomAttributesList[d].buffer);C.info.memory.geometries--}else a instanceof THREE.Line&&(a=a.geometry,g.deleteBuffer(a.__webglVertexBuffer),g.deleteBuffer(a.__webglColorBuffer),C.info.memory.geometries--)};this.deallocateTexture=function(a){a.__webglInit&&(a.__webglInit=!1,g.deleteTexture(a.__webglTexture),C.info.memory.textures--)};this.deallocateRenderTarget=function(a){if(a&&a.__webglTexture)if(g.deleteTexture(a.__webglTexture),a instanceof
THREE.WebGLRenderTargetCube)for(var b=0;6>b;b++)g.deleteFramebuffer(a.__webglFramebuffer[b]),g.deleteRenderbuffer(a.__webglRenderbuffer[b]);else g.deleteFramebuffer(a.__webglFramebuffer),g.deleteRenderbuffer(a.__webglRenderbuffer)};this.updateShadowMap=function(a,b){Q=null;R=P=T=J=Fa=-1;tb=!0;Ea=za=-1;this.shadowMapPlugin.update(a,b)};this.renderBufferImmediate=function(a,b,c){a.__webglVertexBuffer||(a.__webglVertexBuffer=g.createBuffer());a.__webglNormalBuffer||(a.__webglNormalBuffer=g.createBuffer());
a.hasPos&&(g.bindBuffer(g.ARRAY_BUFFER,a.__webglVertexBuffer),g.bufferData(g.ARRAY_BUFFER,a.positionArray,g.DYNAMIC_DRAW),g.enableVertexAttribArray(b.attributes.position),g.vertexAttribPointer(b.attributes.position,3,g.FLOAT,!1,0,0));if(a.hasNormal){g.bindBuffer(g.ARRAY_BUFFER,a.__webglNormalBuffer);if(c===THREE.FlatShading){var d,e,f,h,j,l,k,m,p,n,q=3*a.count;for(n=0;n<q;n+=9)c=a.normalArray,d=c[n],e=c[n+1],f=c[n+2],h=c[n+3],l=c[n+4],m=c[n+5],j=c[n+6],k=c[n+7],p=c[n+8],d=(d+h+j)/3,e=(e+l+k)/3,f=
(f+m+p)/3,c[n]=d,c[n+1]=e,c[n+2]=f,c[n+3]=d,c[n+4]=e,c[n+5]=f,c[n+6]=d,c[n+7]=e,c[n+8]=f}g.bufferData(g.ARRAY_BUFFER,a.normalArray,g.DYNAMIC_DRAW);g.enableVertexAttribArray(b.attributes.normal);g.vertexAttribPointer(b.attributes.normal,3,g.FLOAT,!1,0,0)}g.drawArrays(g.TRIANGLES,0,a.count);a.count=0};this.renderBufferDirect=function(a,b,c,d,e,f){if(!1!==d.visible&&(c=p(a,b,c,d,f),a=c.attributes,b=!1,d=16777215*e.id+2*c.id+(d.wireframe?1:0),d!==P&&(P=d,b=!0),f instanceof THREE.Mesh)){f=e.offsets;d=
0;for(c=f.length;d<c;++d)b&&(g.bindBuffer(g.ARRAY_BUFFER,e.vertexPositionBuffer),g.vertexAttribPointer(a.position,e.vertexPositionBuffer.itemSize,g.FLOAT,!1,0,12*f[d].index),0<=a.normal&&e.vertexNormalBuffer&&(g.bindBuffer(g.ARRAY_BUFFER,e.vertexNormalBuffer),g.vertexAttribPointer(a.normal,e.vertexNormalBuffer.itemSize,g.FLOAT,!1,0,12*f[d].index)),0<=a.uv&&e.vertexUvBuffer&&(e.vertexUvBuffer?(g.bindBuffer(g.ARRAY_BUFFER,e.vertexUvBuffer),g.vertexAttribPointer(a.uv,e.vertexUvBuffer.itemSize,g.FLOAT,
!1,0,8*f[d].index),g.enableVertexAttribArray(a.uv)):g.disableVertexAttribArray(a.uv)),0<=a.color&&e.vertexColorBuffer&&(g.bindBuffer(g.ARRAY_BUFFER,e.vertexColorBuffer),g.vertexAttribPointer(a.color,e.vertexColorBuffer.itemSize,g.FLOAT,!1,0,16*f[d].index)),g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,e.vertexIndexBuffer)),g.drawElements(g.TRIANGLES,f[d].count,g.UNSIGNED_SHORT,2*f[d].start),C.info.render.calls++,C.info.render.vertices+=f[d].count,C.info.render.faces+=f[d].count/3}};this.renderBuffer=function(a,
b,c,d,e,f){if(!1!==d.visible){var h,j;c=p(a,b,c,d,f);b=c.attributes;a=!1;c=16777215*e.id+2*c.id+(d.wireframe?1:0);c!==P&&(P=c,a=!0);if(!d.morphTargets&&0<=b.position)a&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglVertexBuffer),g.vertexAttribPointer(b.position,3,g.FLOAT,!1,0,0));else if(f.morphTargetBase){c=d.program.attributes;-1!==f.morphTargetBase?(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[f.morphTargetBase]),g.vertexAttribPointer(c.position,3,g.FLOAT,!1,0,0)):0<=c.position&&(g.bindBuffer(g.ARRAY_BUFFER,
e.__webglVertexBuffer),g.vertexAttribPointer(c.position,3,g.FLOAT,!1,0,0));if(f.morphTargetForcedOrder.length){h=0;var l=f.morphTargetForcedOrder;for(j=f.morphTargetInfluences;h<d.numSupportedMorphTargets&&h<l.length;)g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[l[h]]),g.vertexAttribPointer(c["morphTarget"+h],3,g.FLOAT,!1,0,0),d.morphNormals&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[l[h]]),g.vertexAttribPointer(c["morphNormal"+h],3,g.FLOAT,!1,0,0)),f.__webglMorphTargetInfluences[h]=
j[l[h]],h++}else{var l=[],k=-1,m=0;j=f.morphTargetInfluences;var n,q=j.length;h=0;for(-1!==f.morphTargetBase&&(l[f.morphTargetBase]=!0);h<d.numSupportedMorphTargets;){for(n=0;n<q;n++)!l[n]&&j[n]>k&&(m=n,k=j[m]);g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[m]);g.vertexAttribPointer(c["morphTarget"+h],3,g.FLOAT,!1,0,0);d.morphNormals&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[m]),g.vertexAttribPointer(c["morphNormal"+h],3,g.FLOAT,!1,0,0));f.__webglMorphTargetInfluences[h]=
k;l[m]=1;k=-1;h++}}null!==d.program.uniforms.morphTargetInfluences&&g.uniform1fv(d.program.uniforms.morphTargetInfluences,f.__webglMorphTargetInfluences)}if(a){if(e.__webglCustomAttributesList){h=0;for(j=e.__webglCustomAttributesList.length;h<j;h++)c=e.__webglCustomAttributesList[h],0<=b[c.buffer.belongsToAttribute]&&(g.bindBuffer(g.ARRAY_BUFFER,c.buffer),g.vertexAttribPointer(b[c.buffer.belongsToAttribute],c.size,g.FLOAT,!1,0,0))}0<=b.color&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglColorBuffer),g.vertexAttribPointer(b.color,
3,g.FLOAT,!1,0,0));0<=b.normal&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglNormalBuffer),g.vertexAttribPointer(b.normal,3,g.FLOAT,!1,0,0));0<=b.tangent&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglTangentBuffer),g.vertexAttribPointer(b.tangent,4,g.FLOAT,!1,0,0));0<=b.uv&&(e.__webglUVBuffer?(g.bindBuffer(g.ARRAY_BUFFER,e.__webglUVBuffer),g.vertexAttribPointer(b.uv,2,g.FLOAT,!1,0,0),g.enableVertexAttribArray(b.uv)):g.disableVertexAttribArray(b.uv));0<=b.uv2&&(e.__webglUV2Buffer?(g.bindBuffer(g.ARRAY_BUFFER,e.__webglUV2Buffer),
g.vertexAttribPointer(b.uv2,2,g.FLOAT,!1,0,0),g.enableVertexAttribArray(b.uv2)):g.disableVertexAttribArray(b.uv2));d.skinning&&(0<=b.skinVertexA&&0<=b.skinVertexB&&0<=b.skinIndex&&0<=b.skinWeight)&&(g.bindBuffer(g.ARRAY_BUFFER,e.__webglSkinVertexABuffer),g.vertexAttribPointer(b.skinVertexA,4,g.FLOAT,!1,0,0),g.bindBuffer(g.ARRAY_BUFFER,e.__webglSkinVertexBBuffer),g.vertexAttribPointer(b.skinVertexB,4,g.FLOAT,!1,0,0),g.bindBuffer(g.ARRAY_BUFFER,e.__webglSkinIndicesBuffer),g.vertexAttribPointer(b.skinIndex,
4,g.FLOAT,!1,0,0),g.bindBuffer(g.ARRAY_BUFFER,e.__webglSkinWeightsBuffer),g.vertexAttribPointer(b.skinWeight,4,g.FLOAT,!1,0,0))}f instanceof THREE.Mesh?(d.wireframe?(d=d.wireframeLinewidth,d!==qa&&(g.lineWidth(d),qa=d),a&&g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,e.__webglLineBuffer),g.drawElements(g.LINES,e.__webglLineCount,g.UNSIGNED_SHORT,0)):(a&&g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,e.__webglFaceBuffer),g.drawElements(g.TRIANGLES,e.__webglFaceCount,g.UNSIGNED_SHORT,0)),C.info.render.calls++,C.info.render.vertices+=
e.__webglFaceCount,C.info.render.faces+=e.__webglFaceCount/3):f instanceof THREE.Line&&(f=f.type===THREE.LineStrip?g.LINE_STRIP:g.LINES,d=d.linewidth,d!==qa&&(g.lineWidth(d),qa=d),g.drawArrays(f,0,e.__webglLineCount),C.info.render.calls++)}};this.render=function(a,b,c,d){var e,f,m,p,n=a.__lights,q=a.fog;R=-1;tb=!0;void 0===b.parent&&(console.warn("DEPRECATED: Camera hasn't been added to a Scene. Adding it..."),a.add(b));this.autoUpdateScene&&a.updateMatrixWorld();b._viewMatrixArray||(b._viewMatrixArray=
new Float32Array(16));b._projectionMatrixArray||(b._projectionMatrixArray=new Float32Array(16));b.matrixWorldInverse.getInverse(b.matrixWorld);b.matrixWorldInverse.flattenToArray(b._viewMatrixArray);b.projectionMatrix.flattenToArray(b._projectionMatrixArray);sb.multiply(b.projectionMatrix,b.matrixWorldInverse);Na.setFromMatrix(sb);this.autoUpdateObjects&&this.initWebGLObjects(a);j(this.renderPluginsPre,a,b);C.info.render.calls=0;C.info.render.vertices=0;C.info.render.faces=0;C.info.render.points=
0;this.setRenderTarget(c);(this.autoClear||d)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil);p=a.__webglObjects;d=0;for(e=p.length;d<e;d++)if(f=p[d],m=f.object,f.render=!1,m.visible&&(!(m instanceof THREE.Mesh||m instanceof THREE.ParticleSystem)||!m.frustumCulled||Na.contains(m))){r(m,b);var s=f,w=s.object,z=s.buffer,y=void 0,y=y=void 0,y=w.material;y instanceof THREE.MeshFaceMaterial?(y=z.materialIndex,0<=y&&(y=w.geometry.materials[y],y.transparent?(s.transparent=y,s.opaque=
null):(s.opaque=y,s.transparent=null))):y&&(y.transparent?(s.transparent=y,s.opaque=null):(s.opaque=y,s.transparent=null));f.render=!0;this.sortObjects&&(m.renderDepth?f.z=m.renderDepth:(Ta.copy(m.matrixWorld.getPosition()),sb.multiplyVector3(Ta),f.z=Ta.z))}this.sortObjects&&p.sort(h);p=a.__webglObjectsImmediate;d=0;for(e=p.length;d<e;d++)f=p[d],m=f.object,m.visible&&(r(m,b),m=f.object.material,m.transparent?(f.transparent=m,f.opaque=null):(f.opaque=m,f.transparent=null));a.overrideMaterial?(d=a.overrideMaterial,
this.setBlending(d.blending,d.blendEquation,d.blendSrc,d.blendDst),this.setDepthTest(d.depthTest),this.setDepthWrite(d.depthWrite),u(d.polygonOffset,d.polygonOffsetFactor,d.polygonOffsetUnits),k(a.__webglObjects,!1,"",b,n,q,!0,d),l(a.__webglObjectsImmediate,"",b,n,q,!1,d)):(this.setBlending(THREE.NormalBlending),k(a.__webglObjects,!0,"opaque",b,n,q,!1),l(a.__webglObjectsImmediate,"opaque",b,n,q,!1),k(a.__webglObjects,!1,"transparent",b,n,q,!0),l(a.__webglObjectsImmediate,"transparent",b,n,q,!0));
j(this.renderPluginsPost,a,b);c&&(c.generateMipmaps&&c.minFilter!==THREE.NearestFilter&&c.minFilter!==THREE.LinearFilter)&&(c instanceof THREE.WebGLRenderTargetCube?(g.bindTexture(g.TEXTURE_CUBE_MAP,c.__webglTexture),g.generateMipmap(g.TEXTURE_CUBE_MAP),g.bindTexture(g.TEXTURE_CUBE_MAP,null)):(g.bindTexture(g.TEXTURE_2D,c.__webglTexture),g.generateMipmap(g.TEXTURE_2D),g.bindTexture(g.TEXTURE_2D,null)));this.setDepthTest(!0);this.setDepthWrite(!0)};this.renderImmediateObject=function(a,b,c,d,e){var f=
p(a,b,c,d,e);P=-1;C.setObjectFaces(e);e.immediateRenderCallback?e.immediateRenderCallback(f,g,Na):e.render(function(a){C.renderBufferImmediate(a,f,d.shading)})};this.initWebGLObjects=function(a){a.__webglObjects||(a.__webglObjects=[],a.__webglObjectsImmediate=[],a.__webglSprites=[],a.__webglFlares=[]);for(;a.__objectsAdded.length;){var h=a.__objectsAdded[0],j=a,l=void 0,k=void 0,p=void 0;if(!h.__webglInit)if(h.__webglInit=!0,h._modelViewMatrix=new THREE.Matrix4,h._normalMatrix=new THREE.Matrix3,h instanceof
THREE.Mesh){if(k=h.geometry,k instanceof THREE.Geometry){if(void 0===k.geometryGroups){var s=k,r=void 0,u=void 0,w=void 0,y=void 0,z=void 0,D=void 0,E=void 0,Q={},L=s.morphTargets.length,na=s.morphNormals.length;s.geometryGroups={};r=0;for(u=s.faces.length;r<u;r++)w=s.faces[r],y=w.materialIndex,D=void 0!==y?y:-1,void 0===Q[D]&&(Q[D]={hash:D,counter:0}),E=Q[D].hash+"_"+Q[D].counter,void 0===s.geometryGroups[E]&&(s.geometryGroups[E]={faces3:[],faces4:[],materialIndex:y,vertices:0,numMorphTargets:L,
numMorphNormals:na}),z=w instanceof THREE.Face3?3:4,65535<s.geometryGroups[E].vertices+z&&(Q[D].counter+=1,E=Q[D].hash+"_"+Q[D].counter,void 0===s.geometryGroups[E]&&(s.geometryGroups[E]={faces3:[],faces4:[],materialIndex:y,vertices:0,numMorphTargets:L,numMorphNormals:na})),w instanceof THREE.Face3?s.geometryGroups[E].faces3.push(r):s.geometryGroups[E].faces4.push(r),s.geometryGroups[E].vertices+=z;s.geometryGroupsList=[];var P=void 0;for(P in s.geometryGroups)s.geometryGroups[P].id=Aa++,s.geometryGroupsList.push(s.geometryGroups[P])}for(l in k.geometryGroups)if(p=
k.geometryGroups[l],!p.__webglVertexBuffer){var K=p;K.__webglVertexBuffer=g.createBuffer();K.__webglNormalBuffer=g.createBuffer();K.__webglTangentBuffer=g.createBuffer();K.__webglColorBuffer=g.createBuffer();K.__webglUVBuffer=g.createBuffer();K.__webglUV2Buffer=g.createBuffer();K.__webglSkinVertexABuffer=g.createBuffer();K.__webglSkinVertexBBuffer=g.createBuffer();K.__webglSkinIndicesBuffer=g.createBuffer();K.__webglSkinWeightsBuffer=g.createBuffer();K.__webglFaceBuffer=g.createBuffer();K.__webglLineBuffer=
g.createBuffer();var R=void 0,S=void 0;if(K.numMorphTargets){K.__webglMorphTargetsBuffers=[];R=0;for(S=K.numMorphTargets;R<S;R++)K.__webglMorphTargetsBuffers.push(g.createBuffer())}if(K.numMorphNormals){K.__webglMorphNormalsBuffers=[];R=0;for(S=K.numMorphNormals;R<S;R++)K.__webglMorphNormalsBuffers.push(g.createBuffer())}C.info.memory.geometries++;var J=p,T=h,ia=T.geometry,ba=J.faces3,za=J.faces4,aa=3*ba.length+4*za.length,qa=1*ba.length+2*za.length,Ga=3*ba.length+4*za.length,pa=c(T,J),Ea=e(pa),ka=
d(pa),Fa=pa.vertexColors?pa.vertexColors:!1;J.__vertexArray=new Float32Array(3*aa);ka&&(J.__normalArray=new Float32Array(3*aa));ia.hasTangents&&(J.__tangentArray=new Float32Array(4*aa));Fa&&(J.__colorArray=new Float32Array(3*aa));if(Ea){if(0<ia.faceUvs.length||0<ia.faceVertexUvs.length)J.__uvArray=new Float32Array(2*aa);if(1<ia.faceUvs.length||1<ia.faceVertexUvs.length)J.__uv2Array=new Float32Array(2*aa)}T.geometry.skinWeights.length&&T.geometry.skinIndices.length&&(J.__skinVertexAArray=new Float32Array(4*
aa),J.__skinVertexBArray=new Float32Array(4*aa),J.__skinIndexArray=new Float32Array(4*aa),J.__skinWeightArray=new Float32Array(4*aa));J.__faceArray=new Uint16Array(3*qa);J.__lineArray=new Uint16Array(2*Ga);var ta=void 0,Da=void 0;if(J.numMorphTargets){J.__morphTargetsArrays=[];ta=0;for(Da=J.numMorphTargets;ta<Da;ta++)J.__morphTargetsArrays.push(new Float32Array(3*aa))}if(J.numMorphNormals){J.__morphNormalsArrays=[];ta=0;for(Da=J.numMorphNormals;ta<Da;ta++)J.__morphNormalsArrays.push(new Float32Array(3*
aa))}J.__webglFaceCount=3*qa;J.__webglLineCount=2*Ga;if(pa.attributes){void 0===J.__webglCustomAttributesList&&(J.__webglCustomAttributesList=[]);var Ja=void 0;for(Ja in pa.attributes){var Na=pa.attributes[Ja],Oa={},Sa;for(Sa in Na)Oa[Sa]=Na[Sa];if(!Oa.__webglInitialized||Oa.createUniqueBuffers){Oa.__webglInitialized=!0;var Pa=1;"v2"===Oa.type?Pa=2:"v3"===Oa.type?Pa=3:"v4"===Oa.type?Pa=4:"c"===Oa.type&&(Pa=3);Oa.size=Pa;Oa.array=new Float32Array(aa*Pa);Oa.buffer=g.createBuffer();Oa.buffer.belongsToAttribute=
Ja;Na.needsUpdate=!0;Oa.__original=Na}J.__webglCustomAttributesList.push(Oa)}}J.__inittedArrays=!0;k.verticesNeedUpdate=!0;k.morphTargetsNeedUpdate=!0;k.elementsNeedUpdate=!0;k.uvsNeedUpdate=!0;k.normalsNeedUpdate=!0;k.tangetsNeedUpdate=!0;k.colorsNeedUpdate=!0}}}else if(h instanceof THREE.Line){if(k=h.geometry,!k.__webglVertexBuffer){var mb=k;mb.__webglVertexBuffer=g.createBuffer();mb.__webglColorBuffer=g.createBuffer();C.info.memory.geometries++;var Ta=k,tb=h,sb=Ta.vertices.length;Ta.__vertexArray=
new Float32Array(3*sb);Ta.__colorArray=new Float32Array(3*sb);Ta.__webglLineCount=sb;b(Ta,tb);k.verticesNeedUpdate=!0;k.colorsNeedUpdate=!0}}else if(h instanceof THREE.ParticleSystem&&(k=h.geometry,!k.__webglVertexBuffer)){var Kb=k;Kb.__webglVertexBuffer=g.createBuffer();Kb.__webglColorBuffer=g.createBuffer();C.info.geometries++;var Lb=k,cc=h,sc=Lb.vertices.length;Lb.__vertexArray=new Float32Array(3*sc);Lb.__colorArray=new Float32Array(3*sc);Lb.__sortArray=[];Lb.__webglParticleCount=sc;b(Lb,cc);k.verticesNeedUpdate=
!0;k.colorsNeedUpdate=!0}if(!h.__webglActive){if(h instanceof THREE.Mesh)if(k=h.geometry,k instanceof THREE.BufferGeometry)m(j.__webglObjects,k,h);else for(l in k.geometryGroups)p=k.geometryGroups[l],m(j.__webglObjects,p,h);else h instanceof THREE.Line&&(k=h.geometry,m(j.__webglObjects,k,h));h.__webglActive=!0}a.__objectsAdded.splice(0,1)}for(;a.__objectsRemoved.length;){var ec=a.__objectsRemoved[0];if(ec instanceof THREE.Mesh||ec instanceof THREE.Line)for(var tc=a.__webglObjects,dc=ec,fc=tc.length-
1;0<=fc;fc--)tc[fc].object===dc&&tc.splice(fc,1);ec.__webglActive=!1;a.__objectsRemoved.splice(0,1)}for(var uc=0,qc=a.__webglObjects.length;uc<qc;uc++){var Wa=a.__webglObjects[uc].object,X=Wa.geometry,Tb=void 0,Mb=void 0,Ha=void 0;if(Wa instanceof THREE.Mesh)if(X instanceof THREE.BufferGeometry)X.verticesNeedUpdate=!1,X.elementsNeedUpdate=!1,X.uvsNeedUpdate=!1,X.normalsNeedUpdate=!1,X.colorsNeedUpdate=!1;else{for(var vc=0,rc=X.geometryGroupsList.length;vc<rc;vc++)if(Tb=X.geometryGroupsList[vc],Ha=
c(Wa,Tb),Mb=Ha.attributes&&n(Ha),X.verticesNeedUpdate||X.morphTargetsNeedUpdate||X.elementsNeedUpdate||X.uvsNeedUpdate||X.normalsNeedUpdate||X.colorsNeedUpdate||X.tangetsNeedUpdate||Mb){var N=Tb,Mc=Wa,Ka=g.DYNAMIC_DRAW,Nc=!X.dynamic,Fb=Ha;if(N.__inittedArrays){var Ec=d(Fb),wc=Fb.vertexColors?Fb.vertexColors:!1,Fc=e(Fb),gc=Ec===THREE.SmoothShading,x=void 0,F=void 0,Ua=void 0,B=void 0,Nb=void 0,ub=void 0,Va=void 0,hc=void 0,nb=void 0,Ob=void 0,Pb=void 0,G=void 0,H=void 0,I=void 0,Y=void 0,Xa=void 0,
Ya=void 0,Za=void 0,Ub=void 0,$a=void 0,ab=void 0,bb=void 0,Vb=void 0,cb=void 0,db=void 0,eb=void 0,Wb=void 0,fb=void 0,gb=void 0,hb=void 0,Xb=void 0,ib=void 0,jb=void 0,kb=void 0,Yb=void 0,vb=void 0,wb=void 0,xb=void 0,ic=void 0,yb=void 0,zb=void 0,Ab=void 0,jc=void 0,U=void 0,Gc=void 0,Bb=void 0,Qb=void 0,Rb=void 0,ua=void 0,Hc=void 0,ra=void 0,sa=void 0,Cb=void 0,ob=void 0,ja=0,oa=0,pb=0,qb=0,Qa=0,ya=0,Z=0,Ba=0,la=0,A=0,M=0,v=0,La=void 0,va=N.__vertexArray,Zb=N.__uvArray,$b=N.__uv2Array,Ra=N.__normalArray,
ca=N.__tangentArray,wa=N.__colorArray,da=N.__skinVertexAArray,ea=N.__skinVertexBArray,fa=N.__skinIndexArray,ga=N.__skinWeightArray,xc=N.__morphTargetsArrays,yc=N.__morphNormalsArrays,zc=N.__webglCustomAttributesList,t=void 0,lb=N.__faceArray,Ma=N.__lineArray,Ca=Mc.geometry,Oc=Ca.elementsNeedUpdate,Ic=Ca.uvsNeedUpdate,Pc=Ca.normalsNeedUpdate,Qc=Ca.tangetsNeedUpdate,Rc=Ca.colorsNeedUpdate,Sc=Ca.morphTargetsNeedUpdate,Gb=Ca.vertices,V=N.faces3,W=N.faces4,ma=Ca.faces,Ac=Ca.faceVertexUvs[0],Bc=Ca.faceVertexUvs[1],
Hb=Ca.skinVerticesA,Ib=Ca.skinVerticesB,Jb=Ca.skinIndices,Db=Ca.skinWeights,Eb=Ca.morphTargets,kc=Ca.morphNormals;if(Ca.verticesNeedUpdate){x=0;for(F=V.length;x<F;x++)B=ma[V[x]],G=Gb[B.a],H=Gb[B.b],I=Gb[B.c],va[oa]=G.x,va[oa+1]=G.y,va[oa+2]=G.z,va[oa+3]=H.x,va[oa+4]=H.y,va[oa+5]=H.z,va[oa+6]=I.x,va[oa+7]=I.y,va[oa+8]=I.z,oa+=9;x=0;for(F=W.length;x<F;x++)B=ma[W[x]],G=Gb[B.a],H=Gb[B.b],I=Gb[B.c],Y=Gb[B.d],va[oa]=G.x,va[oa+1]=G.y,va[oa+2]=G.z,va[oa+3]=H.x,va[oa+4]=H.y,va[oa+5]=H.z,va[oa+6]=I.x,va[oa+
7]=I.y,va[oa+8]=I.z,va[oa+9]=Y.x,va[oa+10]=Y.y,va[oa+11]=Y.z,oa+=12;g.bindBuffer(g.ARRAY_BUFFER,N.__webglVertexBuffer);g.bufferData(g.ARRAY_BUFFER,va,Ka)}if(Sc){ua=0;for(Hc=Eb.length;ua<Hc;ua++){x=M=0;for(F=V.length;x<F;x++)Cb=V[x],B=ma[Cb],G=Eb[ua].vertices[B.a],H=Eb[ua].vertices[B.b],I=Eb[ua].vertices[B.c],ra=xc[ua],ra[M]=G.x,ra[M+1]=G.y,ra[M+2]=G.z,ra[M+3]=H.x,ra[M+4]=H.y,ra[M+5]=H.z,ra[M+6]=I.x,ra[M+7]=I.y,ra[M+8]=I.z,Fb.morphNormals&&(gc?(ob=kc[ua].vertexNormals[Cb],$a=ob.a,ab=ob.b,bb=ob.c):
bb=ab=$a=kc[ua].faceNormals[Cb],sa=yc[ua],sa[M]=$a.x,sa[M+1]=$a.y,sa[M+2]=$a.z,sa[M+3]=ab.x,sa[M+4]=ab.y,sa[M+5]=ab.z,sa[M+6]=bb.x,sa[M+7]=bb.y,sa[M+8]=bb.z),M+=9;x=0;for(F=W.length;x<F;x++)Cb=W[x],B=ma[Cb],G=Eb[ua].vertices[B.a],H=Eb[ua].vertices[B.b],I=Eb[ua].vertices[B.c],Y=Eb[ua].vertices[B.d],ra=xc[ua],ra[M]=G.x,ra[M+1]=G.y,ra[M+2]=G.z,ra[M+3]=H.x,ra[M+4]=H.y,ra[M+5]=H.z,ra[M+6]=I.x,ra[M+7]=I.y,ra[M+8]=I.z,ra[M+9]=Y.x,ra[M+10]=Y.y,ra[M+11]=Y.z,Fb.morphNormals&&(gc?(ob=kc[ua].vertexNormals[Cb],
$a=ob.a,ab=ob.b,bb=ob.c,Vb=ob.d):Vb=bb=ab=$a=kc[ua].faceNormals[Cb],sa=yc[ua],sa[M]=$a.x,sa[M+1]=$a.y,sa[M+2]=$a.z,sa[M+3]=ab.x,sa[M+4]=ab.y,sa[M+5]=ab.z,sa[M+6]=bb.x,sa[M+7]=bb.y,sa[M+8]=bb.z,sa[M+9]=Vb.x,sa[M+10]=Vb.y,sa[M+11]=Vb.z),M+=12;g.bindBuffer(g.ARRAY_BUFFER,N.__webglMorphTargetsBuffers[ua]);g.bufferData(g.ARRAY_BUFFER,xc[ua],Ka);Fb.morphNormals&&(g.bindBuffer(g.ARRAY_BUFFER,N.__webglMorphNormalsBuffers[ua]),g.bufferData(g.ARRAY_BUFFER,yc[ua],Ka))}}if(Db.length){x=0;for(F=V.length;x<F;x++)B=
ma[V[x]],fb=Db[B.a],gb=Db[B.b],hb=Db[B.c],ga[A]=fb.x,ga[A+1]=fb.y,ga[A+2]=fb.z,ga[A+3]=fb.w,ga[A+4]=gb.x,ga[A+5]=gb.y,ga[A+6]=gb.z,ga[A+7]=gb.w,ga[A+8]=hb.x,ga[A+9]=hb.y,ga[A+10]=hb.z,ga[A+11]=hb.w,ib=Jb[B.a],jb=Jb[B.b],kb=Jb[B.c],fa[A]=ib.x,fa[A+1]=ib.y,fa[A+2]=ib.z,fa[A+3]=ib.w,fa[A+4]=jb.x,fa[A+5]=jb.y,fa[A+6]=jb.z,fa[A+7]=jb.w,fa[A+8]=kb.x,fa[A+9]=kb.y,fa[A+10]=kb.z,fa[A+11]=kb.w,vb=Hb[B.a],wb=Hb[B.b],xb=Hb[B.c],da[A]=vb.x,da[A+1]=vb.y,da[A+2]=vb.z,da[A+3]=1,da[A+4]=wb.x,da[A+5]=wb.y,da[A+6]=
wb.z,da[A+7]=1,da[A+8]=xb.x,da[A+9]=xb.y,da[A+10]=xb.z,da[A+11]=1,yb=Ib[B.a],zb=Ib[B.b],Ab=Ib[B.c],ea[A]=yb.x,ea[A+1]=yb.y,ea[A+2]=yb.z,ea[A+3]=1,ea[A+4]=zb.x,ea[A+5]=zb.y,ea[A+6]=zb.z,ea[A+7]=1,ea[A+8]=Ab.x,ea[A+9]=Ab.y,ea[A+10]=Ab.z,ea[A+11]=1,A+=12;x=0;for(F=W.length;x<F;x++)B=ma[W[x]],fb=Db[B.a],gb=Db[B.b],hb=Db[B.c],Xb=Db[B.d],ga[A]=fb.x,ga[A+1]=fb.y,ga[A+2]=fb.z,ga[A+3]=fb.w,ga[A+4]=gb.x,ga[A+5]=gb.y,ga[A+6]=gb.z,ga[A+7]=gb.w,ga[A+8]=hb.x,ga[A+9]=hb.y,ga[A+10]=hb.z,ga[A+11]=hb.w,ga[A+12]=Xb.x,
ga[A+13]=Xb.y,ga[A+14]=Xb.z,ga[A+15]=Xb.w,ib=Jb[B.a],jb=Jb[B.b],kb=Jb[B.c],Yb=Jb[B.d],fa[A]=ib.x,fa[A+1]=ib.y,fa[A+2]=ib.z,fa[A+3]=ib.w,fa[A+4]=jb.x,fa[A+5]=jb.y,fa[A+6]=jb.z,fa[A+7]=jb.w,fa[A+8]=kb.x,fa[A+9]=kb.y,fa[A+10]=kb.z,fa[A+11]=kb.w,fa[A+12]=Yb.x,fa[A+13]=Yb.y,fa[A+14]=Yb.z,fa[A+15]=Yb.w,vb=Hb[B.a],wb=Hb[B.b],xb=Hb[B.c],ic=Hb[B.d],da[A]=vb.x,da[A+1]=vb.y,da[A+2]=vb.z,da[A+3]=1,da[A+4]=wb.x,da[A+5]=wb.y,da[A+6]=wb.z,da[A+7]=1,da[A+8]=xb.x,da[A+9]=xb.y,da[A+10]=xb.z,da[A+11]=1,da[A+12]=ic.x,
da[A+13]=ic.y,da[A+14]=ic.z,da[A+15]=1,yb=Ib[B.a],zb=Ib[B.b],Ab=Ib[B.c],jc=Ib[B.d],ea[A]=yb.x,ea[A+1]=yb.y,ea[A+2]=yb.z,ea[A+3]=1,ea[A+4]=zb.x,ea[A+5]=zb.y,ea[A+6]=zb.z,ea[A+7]=1,ea[A+8]=Ab.x,ea[A+9]=Ab.y,ea[A+10]=Ab.z,ea[A+11]=1,ea[A+12]=jc.x,ea[A+13]=jc.y,ea[A+14]=jc.z,ea[A+15]=1,A+=16;0<A&&(g.bindBuffer(g.ARRAY_BUFFER,N.__webglSkinVertexABuffer),g.bufferData(g.ARRAY_BUFFER,da,Ka),g.bindBuffer(g.ARRAY_BUFFER,N.__webglSkinVertexBBuffer),g.bufferData(g.ARRAY_BUFFER,ea,Ka),g.bindBuffer(g.ARRAY_BUFFER,
N.__webglSkinIndicesBuffer),g.bufferData(g.ARRAY_BUFFER,fa,Ka),g.bindBuffer(g.ARRAY_BUFFER,N.__webglSkinWeightsBuffer),g.bufferData(g.ARRAY_BUFFER,ga,Ka))}if(Rc&&wc){x=0;for(F=V.length;x<F;x++)B=ma[V[x]],Va=B.vertexColors,hc=B.color,3===Va.length&&wc===THREE.VertexColors?(cb=Va[0],db=Va[1],eb=Va[2]):eb=db=cb=hc,wa[la]=cb.r,wa[la+1]=cb.g,wa[la+2]=cb.b,wa[la+3]=db.r,wa[la+4]=db.g,wa[la+5]=db.b,wa[la+6]=eb.r,wa[la+7]=eb.g,wa[la+8]=eb.b,la+=9;x=0;for(F=W.length;x<F;x++)B=ma[W[x]],Va=B.vertexColors,hc=
B.color,4===Va.length&&wc===THREE.VertexColors?(cb=Va[0],db=Va[1],eb=Va[2],Wb=Va[3]):Wb=eb=db=cb=hc,wa[la]=cb.r,wa[la+1]=cb.g,wa[la+2]=cb.b,wa[la+3]=db.r,wa[la+4]=db.g,wa[la+5]=db.b,wa[la+6]=eb.r,wa[la+7]=eb.g,wa[la+8]=eb.b,wa[la+9]=Wb.r,wa[la+10]=Wb.g,wa[la+11]=Wb.b,la+=12;0<la&&(g.bindBuffer(g.ARRAY_BUFFER,N.__webglColorBuffer),g.bufferData(g.ARRAY_BUFFER,wa,Ka))}if(Qc&&Ca.hasTangents){x=0;for(F=V.length;x<F;x++)B=ma[V[x]],nb=B.vertexTangents,Xa=nb[0],Ya=nb[1],Za=nb[2],ca[Z]=Xa.x,ca[Z+1]=Xa.y,ca[Z+
2]=Xa.z,ca[Z+3]=Xa.w,ca[Z+4]=Ya.x,ca[Z+5]=Ya.y,ca[Z+6]=Ya.z,ca[Z+7]=Ya.w,ca[Z+8]=Za.x,ca[Z+9]=Za.y,ca[Z+10]=Za.z,ca[Z+11]=Za.w,Z+=12;x=0;for(F=W.length;x<F;x++)B=ma[W[x]],nb=B.vertexTangents,Xa=nb[0],Ya=nb[1],Za=nb[2],Ub=nb[3],ca[Z]=Xa.x,ca[Z+1]=Xa.y,ca[Z+2]=Xa.z,ca[Z+3]=Xa.w,ca[Z+4]=Ya.x,ca[Z+5]=Ya.y,ca[Z+6]=Ya.z,ca[Z+7]=Ya.w,ca[Z+8]=Za.x,ca[Z+9]=Za.y,ca[Z+10]=Za.z,ca[Z+11]=Za.w,ca[Z+12]=Ub.x,ca[Z+13]=Ub.y,ca[Z+14]=Ub.z,ca[Z+15]=Ub.w,Z+=16;g.bindBuffer(g.ARRAY_BUFFER,N.__webglTangentBuffer);g.bufferData(g.ARRAY_BUFFER,
ca,Ka)}if(Pc&&Ec){x=0;for(F=V.length;x<F;x++)if(B=ma[V[x]],Nb=B.vertexNormals,ub=B.normal,3===Nb.length&&gc)for(U=0;3>U;U++)Bb=Nb[U],Ra[ya]=Bb.x,Ra[ya+1]=Bb.y,Ra[ya+2]=Bb.z,ya+=3;else for(U=0;3>U;U++)Ra[ya]=ub.x,Ra[ya+1]=ub.y,Ra[ya+2]=ub.z,ya+=3;x=0;for(F=W.length;x<F;x++)if(B=ma[W[x]],Nb=B.vertexNormals,ub=B.normal,4===Nb.length&&gc)for(U=0;4>U;U++)Bb=Nb[U],Ra[ya]=Bb.x,Ra[ya+1]=Bb.y,Ra[ya+2]=Bb.z,ya+=3;else for(U=0;4>U;U++)Ra[ya]=ub.x,Ra[ya+1]=ub.y,Ra[ya+2]=ub.z,ya+=3;g.bindBuffer(g.ARRAY_BUFFER,
N.__webglNormalBuffer);g.bufferData(g.ARRAY_BUFFER,Ra,Ka)}if(Ic&&Ac&&Fc){x=0;for(F=V.length;x<F;x++)if(Ua=V[x],B=ma[Ua],Ob=Ac[Ua],void 0!==Ob)for(U=0;3>U;U++)Qb=Ob[U],Zb[pb]=Qb.u,Zb[pb+1]=Qb.v,pb+=2;x=0;for(F=W.length;x<F;x++)if(Ua=W[x],B=ma[Ua],Ob=Ac[Ua],void 0!==Ob)for(U=0;4>U;U++)Qb=Ob[U],Zb[pb]=Qb.u,Zb[pb+1]=Qb.v,pb+=2;0<pb&&(g.bindBuffer(g.ARRAY_BUFFER,N.__webglUVBuffer),g.bufferData(g.ARRAY_BUFFER,Zb,Ka))}if(Ic&&Bc&&Fc){x=0;for(F=V.length;x<F;x++)if(Ua=V[x],B=ma[Ua],Pb=Bc[Ua],void 0!==Pb)for(U=
0;3>U;U++)Rb=Pb[U],$b[qb]=Rb.u,$b[qb+1]=Rb.v,qb+=2;x=0;for(F=W.length;x<F;x++)if(Ua=W[x],B=ma[Ua],Pb=Bc[Ua],void 0!==Pb)for(U=0;4>U;U++)Rb=Pb[U],$b[qb]=Rb.u,$b[qb+1]=Rb.v,qb+=2;0<qb&&(g.bindBuffer(g.ARRAY_BUFFER,N.__webglUV2Buffer),g.bufferData(g.ARRAY_BUFFER,$b,Ka))}if(Oc){x=0;for(F=V.length;x<F;x++)B=ma[V[x]],lb[Qa]=ja,lb[Qa+1]=ja+1,lb[Qa+2]=ja+2,Qa+=3,Ma[Ba]=ja,Ma[Ba+1]=ja+1,Ma[Ba+2]=ja,Ma[Ba+3]=ja+2,Ma[Ba+4]=ja+1,Ma[Ba+5]=ja+2,Ba+=6,ja+=3;x=0;for(F=W.length;x<F;x++)B=ma[W[x]],lb[Qa]=ja,lb[Qa+
1]=ja+1,lb[Qa+2]=ja+3,lb[Qa+3]=ja+1,lb[Qa+4]=ja+2,lb[Qa+5]=ja+3,Qa+=6,Ma[Ba]=ja,Ma[Ba+1]=ja+1,Ma[Ba+2]=ja,Ma[Ba+3]=ja+3,Ma[Ba+4]=ja+1,Ma[Ba+5]=ja+2,Ma[Ba+6]=ja+2,Ma[Ba+7]=ja+3,Ba+=8,ja+=4;g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,N.__webglFaceBuffer);g.bufferData(g.ELEMENT_ARRAY_BUFFER,lb,Ka);g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,N.__webglLineBuffer);g.bufferData(g.ELEMENT_ARRAY_BUFFER,Ma,Ka)}if(zc){U=0;for(Gc=zc.length;U<Gc;U++)if(t=zc[U],t.__original.needsUpdate){v=0;if(1===t.size)if(void 0===t.boundTo||
"vertices"===t.boundTo){x=0;for(F=V.length;x<F;x++)B=ma[V[x]],t.array[v]=t.value[B.a],t.array[v+1]=t.value[B.b],t.array[v+2]=t.value[B.c],v+=3;x=0;for(F=W.length;x<F;x++)B=ma[W[x]],t.array[v]=t.value[B.a],t.array[v+1]=t.value[B.b],t.array[v+2]=t.value[B.c],t.array[v+3]=t.value[B.d],v+=4}else{if("faces"===t.boundTo){x=0;for(F=V.length;x<F;x++)La=t.value[V[x]],t.array[v]=La,t.array[v+1]=La,t.array[v+2]=La,v+=3;x=0;for(F=W.length;x<F;x++)La=t.value[W[x]],t.array[v]=La,t.array[v+1]=La,t.array[v+2]=La,
t.array[v+3]=La,v+=4}}else if(2===t.size)if(void 0===t.boundTo||"vertices"===t.boundTo){x=0;for(F=V.length;x<F;x++)B=ma[V[x]],G=t.value[B.a],H=t.value[B.b],I=t.value[B.c],t.array[v]=G.x,t.array[v+1]=G.y,t.array[v+2]=H.x,t.array[v+3]=H.y,t.array[v+4]=I.x,t.array[v+5]=I.y,v+=6;x=0;for(F=W.length;x<F;x++)B=ma[W[x]],G=t.value[B.a],H=t.value[B.b],I=t.value[B.c],Y=t.value[B.d],t.array[v]=G.x,t.array[v+1]=G.y,t.array[v+2]=H.x,t.array[v+3]=H.y,t.array[v+4]=I.x,t.array[v+5]=I.y,t.array[v+6]=Y.x,t.array[v+
7]=Y.y,v+=8}else{if("faces"===t.boundTo){x=0;for(F=V.length;x<F;x++)I=H=G=La=t.value[V[x]],t.array[v]=G.x,t.array[v+1]=G.y,t.array[v+2]=H.x,t.array[v+3]=H.y,t.array[v+4]=I.x,t.array[v+5]=I.y,v+=6;x=0;for(F=W.length;x<F;x++)Y=I=H=G=La=t.value[W[x]],t.array[v]=G.x,t.array[v+1]=G.y,t.array[v+2]=H.x,t.array[v+3]=H.y,t.array[v+4]=I.x,t.array[v+5]=I.y,t.array[v+6]=Y.x,t.array[v+7]=Y.y,v+=8}}else if(3===t.size){var O;O="c"===t.type?["r","g","b"]:["x","y","z"];if(void 0===t.boundTo||"vertices"===t.boundTo){x=
0;for(F=V.length;x<F;x++)B=ma[V[x]],G=t.value[B.a],H=t.value[B.b],I=t.value[B.c],t.array[v]=G[O[0]],t.array[v+1]=G[O[1]],t.array[v+2]=G[O[2]],t.array[v+3]=H[O[0]],t.array[v+4]=H[O[1]],t.array[v+5]=H[O[2]],t.array[v+6]=I[O[0]],t.array[v+7]=I[O[1]],t.array[v+8]=I[O[2]],v+=9;x=0;for(F=W.length;x<F;x++)B=ma[W[x]],G=t.value[B.a],H=t.value[B.b],I=t.value[B.c],Y=t.value[B.d],t.array[v]=G[O[0]],t.array[v+1]=G[O[1]],t.array[v+2]=G[O[2]],t.array[v+3]=H[O[0]],t.array[v+4]=H[O[1]],t.array[v+5]=H[O[2]],t.array[v+
6]=I[O[0]],t.array[v+7]=I[O[1]],t.array[v+8]=I[O[2]],t.array[v+9]=Y[O[0]],t.array[v+10]=Y[O[1]],t.array[v+11]=Y[O[2]],v+=12}else if("faces"===t.boundTo){x=0;for(F=V.length;x<F;x++)I=H=G=La=t.value[V[x]],t.array[v]=G[O[0]],t.array[v+1]=G[O[1]],t.array[v+2]=G[O[2]],t.array[v+3]=H[O[0]],t.array[v+4]=H[O[1]],t.array[v+5]=H[O[2]],t.array[v+6]=I[O[0]],t.array[v+7]=I[O[1]],t.array[v+8]=I[O[2]],v+=9;x=0;for(F=W.length;x<F;x++)Y=I=H=G=La=t.value[W[x]],t.array[v]=G[O[0]],t.array[v+1]=G[O[1]],t.array[v+2]=G[O[2]],
t.array[v+3]=H[O[0]],t.array[v+4]=H[O[1]],t.array[v+5]=H[O[2]],t.array[v+6]=I[O[0]],t.array[v+7]=I[O[1]],t.array[v+8]=I[O[2]],t.array[v+9]=Y[O[0]],t.array[v+10]=Y[O[1]],t.array[v+11]=Y[O[2]],v+=12}}else if(4===t.size)if(void 0===t.boundTo||"vertices"===t.boundTo){x=0;for(F=V.length;x<F;x++)B=ma[V[x]],G=t.value[B.a],H=t.value[B.b],I=t.value[B.c],t.array[v]=G.x,t.array[v+1]=G.y,t.array[v+2]=G.z,t.array[v+3]=G.w,t.array[v+4]=H.x,t.array[v+5]=H.y,t.array[v+6]=H.z,t.array[v+7]=H.w,t.array[v+8]=I.x,t.array[v+
9]=I.y,t.array[v+10]=I.z,t.array[v+11]=I.w,v+=12;x=0;for(F=W.length;x<F;x++)B=ma[W[x]],G=t.value[B.a],H=t.value[B.b],I=t.value[B.c],Y=t.value[B.d],t.array[v]=G.x,t.array[v+1]=G.y,t.array[v+2]=G.z,t.array[v+3]=G.w,t.array[v+4]=H.x,t.array[v+5]=H.y,t.array[v+6]=H.z,t.array[v+7]=H.w,t.array[v+8]=I.x,t.array[v+9]=I.y,t.array[v+10]=I.z,t.array[v+11]=I.w,t.array[v+12]=Y.x,t.array[v+13]=Y.y,t.array[v+14]=Y.z,t.array[v+15]=Y.w,v+=16}else if("faces"===t.boundTo){x=0;for(F=V.length;x<F;x++)I=H=G=La=t.value[V[x]],
t.array[v]=G.x,t.array[v+1]=G.y,t.array[v+2]=G.z,t.array[v+3]=G.w,t.array[v+4]=H.x,t.array[v+5]=H.y,t.array[v+6]=H.z,t.array[v+7]=H.w,t.array[v+8]=I.x,t.array[v+9]=I.y,t.array[v+10]=I.z,t.array[v+11]=I.w,v+=12;x=0;for(F=W.length;x<F;x++)Y=I=H=G=La=t.value[W[x]],t.array[v]=G.x,t.array[v+1]=G.y,t.array[v+2]=G.z,t.array[v+3]=G.w,t.array[v+4]=H.x,t.array[v+5]=H.y,t.array[v+6]=H.z,t.array[v+7]=H.w,t.array[v+8]=I.x,t.array[v+9]=I.y,t.array[v+10]=I.z,t.array[v+11]=I.w,t.array[v+12]=Y.x,t.array[v+13]=Y.y,
t.array[v+14]=Y.z,t.array[v+15]=Y.w,v+=16}g.bindBuffer(g.ARRAY_BUFFER,t.buffer);g.bufferData(g.ARRAY_BUFFER,t.array,Ka)}}Nc&&(delete N.__inittedArrays,delete N.__colorArray,delete N.__normalArray,delete N.__tangentArray,delete N.__uvArray,delete N.__uv2Array,delete N.__faceArray,delete N.__vertexArray,delete N.__lineArray,delete N.__skinVertexAArray,delete N.__skinVertexBArray,delete N.__skinIndexArray,delete N.__skinWeightArray)}}X.verticesNeedUpdate=!1;X.morphTargetsNeedUpdate=!1;X.elementsNeedUpdate=
!1;X.uvsNeedUpdate=!1;X.normalsNeedUpdate=!1;X.colorsNeedUpdate=!1;X.tangetsNeedUpdate=!1;Ha.attributes&&q(Ha)}else if(Wa instanceof THREE.Line){Ha=c(Wa,Tb);Mb=Ha.attributes&&n(Ha);if(X.verticesNeedUpdate||X.colorsNeedUpdate||Mb){var rb=X,Cc=g.DYNAMIC_DRAW,ac=void 0,bc=void 0,lc=void 0,ha=void 0,mc=void 0,Jc=rb.vertices,Kc=rb.colors,Tc=Jc.length,Uc=Kc.length,nc=rb.__vertexArray,oc=rb.__colorArray,Vc=rb.colorsNeedUpdate,Dc=rb.__webglCustomAttributesList,pc=void 0,Lc=void 0,xa=void 0,Sb=void 0,Ia=void 0,
$=void 0;if(rb.verticesNeedUpdate){for(ac=0;ac<Tc;ac++)lc=Jc[ac],ha=3*ac,nc[ha]=lc.x,nc[ha+1]=lc.y,nc[ha+2]=lc.z;g.bindBuffer(g.ARRAY_BUFFER,rb.__webglVertexBuffer);g.bufferData(g.ARRAY_BUFFER,nc,Cc)}if(Vc){for(bc=0;bc<Uc;bc++)mc=Kc[bc],ha=3*bc,oc[ha]=mc.r,oc[ha+1]=mc.g,oc[ha+2]=mc.b;g.bindBuffer(g.ARRAY_BUFFER,rb.__webglColorBuffer);g.bufferData(g.ARRAY_BUFFER,oc,Cc)}if(Dc){pc=0;for(Lc=Dc.length;pc<Lc;pc++)if($=Dc[pc],$.needsUpdate&&(void 0===$.boundTo||"vertices"===$.boundTo)){ha=0;Sb=$.value.length;
if(1===$.size)for(xa=0;xa<Sb;xa++)$.array[xa]=$.value[xa];else if(2===$.size)for(xa=0;xa<Sb;xa++)Ia=$.value[xa],$.array[ha]=Ia.x,$.array[ha+1]=Ia.y,ha+=2;else if(3===$.size)if("c"===$.type)for(xa=0;xa<Sb;xa++)Ia=$.value[xa],$.array[ha]=Ia.r,$.array[ha+1]=Ia.g,$.array[ha+2]=Ia.b,ha+=3;else for(xa=0;xa<Sb;xa++)Ia=$.value[xa],$.array[ha]=Ia.x,$.array[ha+1]=Ia.y,$.array[ha+2]=Ia.z,ha+=3;else if(4===$.size)for(xa=0;xa<Sb;xa++)Ia=$.value[xa],$.array[ha]=Ia.x,$.array[ha+1]=Ia.y,$.array[ha+2]=Ia.z,$.array[ha+
3]=Ia.w,ha+=4;g.bindBuffer(g.ARRAY_BUFFER,$.buffer);g.bufferData(g.ARRAY_BUFFER,$.array,Cc)}}}X.verticesNeedUpdate=!1;X.colorsNeedUpdate=!1;Ha.attributes&&q(Ha)}else Wa instanceof THREE.ParticleSystem&&(Ha=c(Wa,Tb),Mb=Ha.attributes&&n(Ha),(X.verticesNeedUpdate||X.colorsNeedUpdate||Wa.sortParticles||Mb)&&f(X,g.DYNAMIC_DRAW,Wa),X.verticesNeedUpdate=!1,X.colorsNeedUpdate=!1,Ha.attributes&&q(Ha))}};this.initMaterial=function(a,b,c,d){var e,f,h;a instanceof THREE.MeshDepthMaterial?h="depth":a instanceof
THREE.MeshNormalMaterial?h="normal":a instanceof THREE.MeshBasicMaterial?h="basic":a instanceof THREE.MeshLambertMaterial?h="lambert":a instanceof THREE.MeshPhongMaterial?h="phong":a instanceof THREE.LineBasicMaterial?h="basic":a instanceof THREE.ParticleBasicMaterial&&(h="particle_basic");if(h){var j=THREE.ShaderLib[h];a.uniforms=THREE.UniformsUtils.clone(j.uniforms);a.vertexShader=j.vertexShader;a.fragmentShader=j.fragmentShader}var k,l,m,p,n;k=p=n=j=0;for(l=b.length;k<l;k++)m=b[k],m.onlyShadow||
(m instanceof THREE.DirectionalLight&&p++,m instanceof THREE.PointLight&&n++,m instanceof THREE.SpotLight&&j++);n+j+p<=_maxLights?(l=p,m=n,p=j):(l=Math.ceil(_maxLights*p/(n+p)),p=m=_maxLights-l);var q=0,j=0;for(n=b.length;j<n;j++)k=b[j],k.castShadow&&(k instanceof THREE.SpotLight&&q++,k instanceof THREE.DirectionalLight&&!k.shadowCascade&&q++);var r;a:{n=a.fragmentShader;k=a.vertexShader;j=a.uniforms;b=a.attributes;c={map:!!a.map,envMap:!!a.envMap,lightMap:!!a.lightMap,vertexColors:a.vertexColors,
fog:c,useFog:a.fog,sizeAttenuation:a.sizeAttenuation,skinning:a.skinning,maxBones:50,morphTargets:a.morphTargets,morphNormals:a.morphNormals,maxMorphTargets:this.maxMorphTargets,maxMorphNormals:this.maxMorphNormals,maxDirLights:l,maxPointLights:m,maxSpotLights:p,maxShadows:q,shadowMapEnabled:this.shadowMapEnabled&&d.receiveShadow,shadowMapSoft:this.shadowMapSoft,shadowMapDebug:this.shadowMapDebug,shadowMapCascade:this.shadowMapCascade,alphaTest:a.alphaTest,metal:a.metal,perPixel:a.perPixel,wrapAround:a.wrapAround,
doubleSided:d&&d.doubleSided};var u;d=[];h?d.push(h):(d.push(n),d.push(k));for(u in c)d.push(u),d.push(c[u]);h=d.join();u=0;for(d=E.length;u<d;u++)if(E[u].code===h){r=E[u].program;break a}u=g.createProgram();d=["precision "+_precision+" float;",0<dc?"#define VERTEX_TEXTURES":"",C.gammaInput?"#define GAMMA_INPUT":"",C.gammaOutput?"#define GAMMA_OUTPUT":"",C.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":"","#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,
"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_SHADOWS "+c.maxShadows,"#define MAX_BONES "+c.maxBones,c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.vertexColors?"#define USE_COLOR":"",c.skinning?"#define USE_SKINNING":"",c.morphTargets?"#define USE_MORPHTARGETS":"",c.morphNormals?"#define USE_MORPHNORMALS":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.shadowMapEnabled?
"#define USE_SHADOWMAP":"",c.shadowMapSoft?"#define SHADOWMAP_SOFT":"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",c.sizeAttenuation?"#define USE_SIZEATTENUATION":"","uniform mat4 objectMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\n#ifdef USE_MORPHNORMALS\nattribute vec3 morphNormal0;\nattribute vec3 morphNormal1;\nattribute vec3 morphNormal2;\nattribute vec3 morphNormal3;\n#else\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinVertexA;\nattribute vec4 skinVertexB;\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n"].join("\n");
l=["precision "+_precision+" float;","#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_SHADOWS "+c.maxShadows,c.alphaTest?"#define ALPHATEST "+c.alphaTest:"",C.gammaInput?"#define GAMMA_INPUT":"",C.gammaOutput?"#define GAMMA_OUTPUT":"",C.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":"",c.useFog&&c.fog?"#define USE_FOG":"",c.useFog&&c.fog instanceof THREE.FogExp2?"#define FOG_EXP2":"",c.map?"#define USE_MAP":
"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.vertexColors?"#define USE_COLOR":"",c.metal?"#define METAL":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapSoft?"#define SHADOWMAP_SOFT":"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n");
g.attachShader(u,s("fragment",l+n));g.attachShader(u,s("vertex",d+k));g.linkProgram(u);g.getProgramParameter(u,g.LINK_STATUS)||console.error("Could not initialise shader\nVALIDATE_STATUS: "+g.getProgramParameter(u,g.VALIDATE_STATUS)+", gl error ["+g.getError()+"]");u.uniforms={};u.attributes={};var w;d="viewMatrix modelViewMatrix projectionMatrix normalMatrix objectMatrix cameraPosition boneGlobalMatrices morphTargetInfluences".split(" ");for(w in j)d.push(w);w=d;d=0;for(j=w.length;d<j;d++)n=w[d],
u.uniforms[n]=g.getUniformLocation(u,n);d="position normal uv uv2 tangent color skinVertexA skinVertexB skinIndex skinWeight".split(" ");for(w=0;w<c.maxMorphTargets;w++)d.push("morphTarget"+w);for(w=0;w<c.maxMorphNormals;w++)d.push("morphNormal"+w);for(r in b)d.push(r);r=d;w=0;for(b=r.length;w<b;w++)c=r[w],u.attributes[c]=g.getAttribLocation(u,c);u.id=E.length;E.push({program:u,code:h});C.info.memory.programs=E.length;r=u}a.program=r;r=a.program.attributes;0<=r.position&&g.enableVertexAttribArray(r.position);
0<=r.color&&g.enableVertexAttribArray(r.color);0<=r.normal&&g.enableVertexAttribArray(r.normal);0<=r.tangent&&g.enableVertexAttribArray(r.tangent);a.skinning&&(0<=r.skinVertexA&&0<=r.skinVertexB&&0<=r.skinIndex&&0<=r.skinWeight)&&(g.enableVertexAttribArray(r.skinVertexA),g.enableVertexAttribArray(r.skinVertexB),g.enableVertexAttribArray(r.skinIndex),g.enableVertexAttribArray(r.skinWeight));if(a.attributes)for(f in a.attributes)void 0!==r[f]&&0<=r[f]&&g.enableVertexAttribArray(r[f]);if(a.morphTargets){a.numSupportedMorphTargets=
0;u="morphTarget";for(f=0;f<this.maxMorphTargets;f++)w=u+f,0<=r[w]&&(g.enableVertexAttribArray(r[w]),a.numSupportedMorphTargets++)}if(a.morphNormals){a.numSupportedMorphNormals=0;u="morphNormal";for(f=0;f<this.maxMorphNormals;f++)w=u+f,0<=r[w]&&(g.enableVertexAttribArray(r[w]),a.numSupportedMorphNormals++)}a.uniformsList=[];for(e in a.uniforms)a.uniformsList.push([a.uniforms[e],e])};this.setFaceCulling=function(a,b){a?(!b||"ccw"===b?g.frontFace(g.CCW):g.frontFace(g.CW),"back"===a?g.cullFace(g.BACK):
"front"===a?g.cullFace(g.FRONT):g.cullFace(g.FRONT_AND_BACK),g.enable(g.CULL_FACE)):g.disable(g.CULL_FACE)};this.setObjectFaces=function(a){za!==a.doubleSided&&(a.doubleSided?g.disable(g.CULL_FACE):g.enable(g.CULL_FACE),za=a.doubleSided);Ea!==a.flipSided&&(a.flipSided?g.frontFace(g.CW):g.frontFace(g.CCW),Ea=a.flipSided)};this.setDepthTest=function(a){J!==a&&(a?g.enable(g.DEPTH_TEST):g.disable(g.DEPTH_TEST),J=a)};this.setDepthWrite=function(a){T!==a&&(g.depthMask(a),T=a)};this.setBlending=function(a,
b,c,d){if(a!==Fa){switch(a){case THREE.NoBlending:g.disable(g.BLEND);break;case THREE.AdditiveBlending:g.enable(g.BLEND);g.blendEquation(g.FUNC_ADD);g.blendFunc(g.SRC_ALPHA,g.ONE);break;case THREE.SubtractiveBlending:g.enable(g.BLEND);g.blendEquation(g.FUNC_ADD);g.blendFunc(g.ZERO,g.ONE_MINUS_SRC_COLOR);break;case THREE.MultiplyBlending:g.enable(g.BLEND);g.blendEquation(g.FUNC_ADD);g.blendFunc(g.ZERO,g.SRC_COLOR);break;case THREE.CustomBlending:g.enable(g.BLEND);break;default:g.enable(g.BLEND),g.blendEquationSeparate(g.FUNC_ADD,
g.FUNC_ADD),g.blendFuncSeparate(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA,g.ONE,g.ONE_MINUS_SRC_ALPHA)}Fa=a}if(a===THREE.CustomBlending){if(b!==ia&&(g.blendEquation(w(b)),ia=b),c!==Ga||d!==pa)g.blendFunc(w(c),w(d)),Ga=c,pa=d}else pa=Ga=ia=null};this.setTexture=function(a,b){if(a.needsUpdate){a.__webglInit||(a.__webglInit=!0,a.__webglTexture=g.createTexture(),C.info.memory.textures++);g.activeTexture(g.TEXTURE0+b);g.bindTexture(g.TEXTURE_2D,a.__webglTexture);g.pixelStorei(g.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
a.premultiplyAlpha);var c=a.image,d=0===(c.width&c.width-1)&&0===(c.height&c.height-1),e=w(a.format),f=w(a.type);y(g.TEXTURE_2D,a,d);a instanceof THREE.DataTexture?g.texImage2D(g.TEXTURE_2D,0,e,c.width,c.height,0,e,f,c.data):g.texImage2D(g.TEXTURE_2D,0,e,e,f,a.image);a.generateMipmaps&&d&&g.generateMipmap(g.TEXTURE_2D);a.needsUpdate=!1;if(a.onUpdate)a.onUpdate()}else g.activeTexture(g.TEXTURE0+b),g.bindTexture(g.TEXTURE_2D,a.__webglTexture)};this.setRenderTarget=function(a){var b=a instanceof THREE.WebGLRenderTargetCube;
if(a&&!a.__webglFramebuffer){void 0===a.depthBuffer&&(a.depthBuffer=!0);void 0===a.stencilBuffer&&(a.stencilBuffer=!0);a.__webglTexture=g.createTexture();var c=0===(a.width&a.width-1)&&0===(a.height&a.height-1),d=w(a.format),e=w(a.type);if(b){a.__webglFramebuffer=[];a.__webglRenderbuffer=[];g.bindTexture(g.TEXTURE_CUBE_MAP,a.__webglTexture);y(g.TEXTURE_CUBE_MAP,a,c);for(var f=0;6>f;f++){a.__webglFramebuffer[f]=g.createFramebuffer();a.__webglRenderbuffer[f]=g.createRenderbuffer();g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+
f,0,d,a.width,a.height,0,d,e,null);var h=a,j=g.TEXTURE_CUBE_MAP_POSITIVE_X+f;g.bindFramebuffer(g.FRAMEBUFFER,a.__webglFramebuffer[f]);g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,j,h.__webglTexture,0);D(a.__webglRenderbuffer[f],a)}c&&g.generateMipmap(g.TEXTURE_CUBE_MAP)}else a.__webglFramebuffer=g.createFramebuffer(),a.__webglRenderbuffer=g.createRenderbuffer(),g.bindTexture(g.TEXTURE_2D,a.__webglTexture),y(g.TEXTURE_2D,a,c),g.texImage2D(g.TEXTURE_2D,0,d,a.width,a.height,0,d,e,null),d=
g.TEXTURE_2D,g.bindFramebuffer(g.FRAMEBUFFER,a.__webglFramebuffer),g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,d,a.__webglTexture,0),D(a.__webglRenderbuffer,a),c&&g.generateMipmap(g.TEXTURE_2D);b?g.bindTexture(g.TEXTURE_CUBE_MAP,null):g.bindTexture(g.TEXTURE_2D,null);g.bindRenderbuffer(g.RENDERBUFFER,null);g.bindFramebuffer(g.FRAMEBUFFER,null)}a?(b=b?a.__webglFramebuffer[a.activeCubeFace]:a.__webglFramebuffer,c=a.width,a=a.height,e=d=0):(b=null,c=Ja,a=Sa,d=K,e=ta);b!==na&&(g.bindFramebuffer(g.FRAMEBUFFER,
b),g.viewport(d,e,c,a),na=b);Pa=c;mb=a}};
THREE.WebGLRenderTarget=function(a,b,c){this.width=a;this.height=b;c=c||{};this.wrapS=void 0!==c.wrapS?c.wrapS:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==c.wrapT?c.wrapT:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==c.magFilter?c.magFilter:THREE.LinearFilter;this.minFilter=void 0!==c.minFilter?c.minFilter:THREE.LinearMipMapLinearFilter;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.format=void 0!==c.format?c.format:THREE.RGBAFormat;this.type=void 0!==c.type?c.type:
THREE.UnsignedByteType;this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.generateMipmaps=!0};
THREE.WebGLRenderTarget.prototype.clone=function(){var a=new THREE.WebGLRenderTarget(this.width,this.height);a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.format=this.format;a.type=this.type;a.depthBuffer=this.depthBuffer;a.stencilBuffer=this.stencilBuffer;return a};THREE.WebGLRenderTargetCube=function(a,b,c){THREE.WebGLRenderTarget.call(this,a,b,c);this.activeCubeFace=0};
THREE.WebGLRenderTargetCube.prototype=new THREE.WebGLRenderTarget;THREE.WebGLRenderTargetCube.prototype.constructor=THREE.WebGLRenderTargetCube;THREE.RenderableVertex=function(){this.positionWorld=new THREE.Vector3;this.positionScreen=new THREE.Vector4;this.visible=!0};THREE.RenderableVertex.prototype.copy=function(a){this.positionWorld.copy(a.positionWorld);this.positionScreen.copy(a.positionScreen)};
THREE.RenderableFace3=function(){this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.centroidWorld=new THREE.Vector3;this.centroidScreen=new THREE.Vector3;this.normalWorld=new THREE.Vector3;this.vertexNormalsWorld=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.faceMaterial=this.material=null;this.uvs=[[]];this.z=null};
THREE.RenderableFace4=function(){this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.v4=new THREE.RenderableVertex;this.centroidWorld=new THREE.Vector3;this.centroidScreen=new THREE.Vector3;this.normalWorld=new THREE.Vector3;this.vertexNormalsWorld=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.faceMaterial=this.material=null;this.uvs=[[]];this.z=null};THREE.RenderableObject=function(){this.z=this.object=null};
THREE.RenderableLine=function(){this.z=null;this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.material=null};
THREE.GeometryUtils={merge:function(a,b){for(var c,d,e=a.vertices.length,f=b instanceof THREE.Mesh?b.geometry:b,h=a.vertices,j=f.vertices,k=a.faces,l=f.faces,m=a.faceVertexUvs[0],n=f.faceVertexUvs[0],q={},p=0;p<a.materials.length;p++)q[a.materials[p].id]=p;b instanceof THREE.Mesh&&(b.matrixAutoUpdate&&b.updateMatrix(),c=b.matrix,d=new THREE.Matrix4,d.extractRotation(c,b.scale));for(var p=0,r=j.length;p<r;p++){var u=j[p].clone();c&&c.multiplyVector3(u);h.push(u)}p=0;for(r=l.length;p<r;p++){var h=l[p],
s,y,D=h.vertexNormals,z=h.vertexColors;h instanceof THREE.Face3?s=new THREE.Face3(h.a+e,h.b+e,h.c+e):h instanceof THREE.Face4&&(s=new THREE.Face4(h.a+e,h.b+e,h.c+e,h.d+e));s.normal.copy(h.normal);d&&d.multiplyVector3(s.normal);j=0;for(u=D.length;j<u;j++)y=D[j].clone(),d&&d.multiplyVector3(y),s.vertexNormals.push(y);s.color.copy(h.color);j=0;for(u=z.length;j<u;j++)y=z[j],s.vertexColors.push(y.clone());void 0!==h.materialIndex&&(j=f.materials[h.materialIndex],u=j.id,z=q[u],void 0===z&&(z=a.materials.length,
q[u]=z,a.materials.push(j)),s.materialIndex=z);s.centroid.copy(h.centroid);c&&c.multiplyVector3(s.centroid);k.push(s)}p=0;for(r=n.length;p<r;p++){c=n[p];d=[];j=0;for(u=c.length;j<u;j++)d.push(new THREE.UV(c[j].u,c[j].v));m.push(d)}},clone:function(a){var b=new THREE.Geometry,c,d=a.vertices,e=a.faces,f=a.faceVertexUvs[0];a.materials&&(b.materials=a.materials.slice());a=0;for(c=d.length;a<c;a++)b.vertices.push(d[a].clone());a=0;for(c=e.length;a<c;a++)b.faces.push(e[a].clone());a=0;for(c=f.length;a<
c;a++){for(var d=f[a],e=[],h=0,j=d.length;h<j;h++)e.push(new THREE.UV(d[h].u,d[h].v));b.faceVertexUvs[0].push(e)}return b},randomPointInTriangle:function(a,b,c){var d,e,f,h=new THREE.Vector3,j=THREE.GeometryUtils.__v1;d=THREE.GeometryUtils.random();e=THREE.GeometryUtils.random();1<d+e&&(d=1-d,e=1-e);f=1-d-e;h.copy(a);h.multiplyScalar(d);j.copy(b);j.multiplyScalar(e);h.addSelf(j);j.copy(c);j.multiplyScalar(f);h.addSelf(j);return h},randomPointInFace:function(a,b,c){var d,e,f;if(a instanceof THREE.Face3)return d=
b.vertices[a.a],e=b.vertices[a.b],f=b.vertices[a.c],THREE.GeometryUtils.randomPointInTriangle(d,e,f);if(a instanceof THREE.Face4){d=b.vertices[a.a];e=b.vertices[a.b];f=b.vertices[a.c];b=b.vertices[a.d];var h;c?a._area1&&a._area2?(c=a._area1,h=a._area2):(c=THREE.GeometryUtils.triangleArea(d,e,b),h=THREE.GeometryUtils.triangleArea(e,f,b),a._area1=c,a._area2=h):(c=THREE.GeometryUtils.triangleArea(d,e,b),h=THREE.GeometryUtils.triangleArea(e,f,b));return THREE.GeometryUtils.random()*(c+h)<c?THREE.GeometryUtils.randomPointInTriangle(d,
e,b):THREE.GeometryUtils.randomPointInTriangle(e,f,b)}},randomPointsInGeometry:function(a,b){function c(a){function b(c,d){if(d<c)return c;var e=c+Math.floor((d-c)/2);return l[e]>a?b(c,e-1):l[e]<a?b(e+1,d):e}return b(0,l.length-1)}var d,e,f=a.faces,h=a.vertices,j=f.length,k=0,l=[],m,n,q,p;for(e=0;e<j;e++)d=f[e],d instanceof THREE.Face3?(m=h[d.a],n=h[d.b],q=h[d.c],d._area=THREE.GeometryUtils.triangleArea(m,n,q)):d instanceof THREE.Face4&&(m=h[d.a],n=h[d.b],q=h[d.c],p=h[d.d],d._area1=THREE.GeometryUtils.triangleArea(m,
n,p),d._area2=THREE.GeometryUtils.triangleArea(n,q,p),d._area=d._area1+d._area2),k+=d._area,l[e]=k;d=[];for(e=0;e<b;e++)h=THREE.GeometryUtils.random()*k,h=c(h),d[e]=THREE.GeometryUtils.randomPointInFace(f[h],a,!0);return d},triangleArea:function(a,b,c){var d,e=THREE.GeometryUtils.__v1;e.sub(a,b);d=e.length();e.sub(a,c);a=e.length();e.sub(b,c);c=e.length();b=0.5*(d+a+c);return Math.sqrt(b*(b-d)*(b-a)*(b-c))},center:function(a){a.computeBoundingBox();var b=a.boundingBox,c=new THREE.Vector3;c.add(b.min,
b.max);c.multiplyScalar(-0.5);a.applyMatrix((new THREE.Matrix4).makeTranslation(c.x,c.y,c.z));a.computeBoundingBox();return c},normalizeUVs:function(a){a=a.faceVertexUvs[0];for(var b=0,c=a.length;b<c;b++)for(var d=a[b],e=0,f=d.length;e<f;e++)1!==d[e].u&&(d[e].u-=Math.floor(d[e].u)),1!==d[e].v&&(d[e].v-=Math.floor(d[e].v))},triangulateQuads:function(a){var b,c,d,e,f=[],h=[],j=[];b=0;for(c=a.faceUvs.length;b<c;b++)h[b]=[];b=0;for(c=a.faceVertexUvs.length;b<c;b++)j[b]=[];b=0;for(c=a.faces.length;b<c;b++)if(d=
a.faces[b],d instanceof THREE.Face4){e=d.a;var k=d.b,l=d.c,m=d.d,n=new THREE.Face3,q=new THREE.Face3;n.color.copy(d.color);q.color.copy(d.color);n.materialIndex=d.materialIndex;q.materialIndex=d.materialIndex;n.a=e;n.b=k;n.c=m;q.a=k;q.b=l;q.c=m;4===d.vertexColors.length&&(n.vertexColors[0]=d.vertexColors[0].clone(),n.vertexColors[1]=d.vertexColors[1].clone(),n.vertexColors[2]=d.vertexColors[3].clone(),q.vertexColors[0]=d.vertexColors[1].clone(),q.vertexColors[1]=d.vertexColors[2].clone(),q.vertexColors[2]=
d.vertexColors[3].clone());f.push(n,q);d=0;for(e=a.faceVertexUvs.length;d<e;d++)a.faceVertexUvs[d].length&&(n=a.faceVertexUvs[d][b],k=n[1],l=n[2],m=n[3],n=[n[0].clone(),k.clone(),m.clone()],k=[k.clone(),l.clone(),m.clone()],j[d].push(n,k));d=0;for(e=a.faceUvs.length;d<e;d++)a.faceUvs[d].length&&(k=a.faceUvs[d][b],h[d].push(k,k))}else{f.push(d);d=0;for(e=a.faceUvs.length;d<e;d++)h[d].push(a.faceUvs[d]);d=0;for(e=a.faceVertexUvs.length;d<e;d++)j[d].push(a.faceVertexUvs[d])}a.faces=f;a.faceUvs=h;a.faceVertexUvs=
j;a.computeCentroids();a.computeFaceNormals();a.computeVertexNormals();a.hasTangents&&a.computeTangents()},explode:function(a){for(var b=[],c=0,d=a.faces.length;c<d;c++){var e=b.length,f=a.faces[c];if(f instanceof THREE.Face4){var h=f.a,j=f.b,k=f.c,h=a.vertices[h],j=a.vertices[j],k=a.vertices[k],l=a.vertices[f.d];b.push(h.clone());b.push(j.clone());b.push(k.clone());b.push(l.clone());f.a=e;f.b=e+1;f.c=e+2;f.d=e+3}else h=f.a,j=f.b,k=f.c,h=a.vertices[h],j=a.vertices[j],k=a.vertices[k],b.push(h.clone()),
b.push(j.clone()),b.push(k.clone()),f.a=e,f.b=e+1,f.c=e+2}a.vertices=b;delete a.__tmpVertices},tessellate:function(a,b){var c,d,e,f,h,j,k,l,m,n,q,p,r,u,s,y,D,z,w,C=[],g=[];c=0;for(d=a.faceVertexUvs.length;c<d;c++)g[c]=[];c=0;for(d=a.faces.length;c<d;c++)if(e=a.faces[c],e instanceof THREE.Face3)if(f=e.a,h=e.b,j=e.c,l=a.vertices[f],m=a.vertices[h],n=a.vertices[j],p=l.distanceTo(m),r=m.distanceTo(n),q=l.distanceTo(n),p>b||r>b||q>b){k=a.vertices.length;z=e.clone();w=e.clone();p>=r&&p>=q?(l=l.clone(),
l.lerpSelf(m,0.5),z.a=f,z.b=k,z.c=j,w.a=k,w.b=h,w.c=j,3===e.vertexNormals.length&&(f=e.vertexNormals[0].clone(),f.lerpSelf(e.vertexNormals[1],0.5),z.vertexNormals[1].copy(f),w.vertexNormals[0].copy(f)),3===e.vertexColors.length&&(f=e.vertexColors[0].clone(),f.lerpSelf(e.vertexColors[1],0.5),z.vertexColors[1].copy(f),w.vertexColors[0].copy(f)),e=0):r>=p&&r>=q?(l=m.clone(),l.lerpSelf(n,0.5),z.a=f,z.b=h,z.c=k,w.a=k,w.b=j,w.c=f,3===e.vertexNormals.length&&(f=e.vertexNormals[1].clone(),f.lerpSelf(e.vertexNormals[2],
0.5),z.vertexNormals[2].copy(f),w.vertexNormals[0].copy(f),w.vertexNormals[1].copy(e.vertexNormals[2]),w.vertexNormals[2].copy(e.vertexNormals[0])),3===e.vertexColors.length&&(f=e.vertexColors[1].clone(),f.lerpSelf(e.vertexColors[2],0.5),z.vertexColors[2].copy(f),w.vertexColors[0].copy(f),w.vertexColors[1].copy(e.vertexColors[2]),w.vertexColors[2].copy(e.vertexColors[0])),e=1):(l=l.clone(),l.lerpSelf(n,0.5),z.a=f,z.b=h,z.c=k,w.a=k,w.b=h,w.c=j,3===e.vertexNormals.length&&(f=e.vertexNormals[0].clone(),
f.lerpSelf(e.vertexNormals[2],0.5),z.vertexNormals[2].copy(f),w.vertexNormals[0].copy(f)),3===e.vertexColors.length&&(f=e.vertexColors[0].clone(),f.lerpSelf(e.vertexColors[2],0.5),z.vertexColors[2].copy(f),w.vertexColors[0].copy(f)),e=2);C.push(z,w);a.vertices.push(l);f=0;for(h=a.faceVertexUvs.length;f<h;f++)a.faceVertexUvs[f].length&&(l=a.faceVertexUvs[f][c],w=l[0],j=l[1],z=l[2],0===e?(m=w.clone(),m.lerpSelf(j,0.5),l=[w.clone(),m.clone(),z.clone()],j=[m.clone(),j.clone(),z.clone()]):1===e?(m=j.clone(),
m.lerpSelf(z,0.5),l=[w.clone(),j.clone(),m.clone()],j=[m.clone(),z.clone(),w.clone()]):(m=w.clone(),m.lerpSelf(z,0.5),l=[w.clone(),j.clone(),m.clone()],j=[m.clone(),j.clone(),z.clone()]),g[f].push(l,j))}else{C.push(e);f=0;for(h=a.faceVertexUvs.length;f<h;f++)g[f].push(a.faceVertexUvs[f][c])}else if(f=e.a,h=e.b,j=e.c,k=e.d,l=a.vertices[f],m=a.vertices[h],n=a.vertices[j],q=a.vertices[k],p=l.distanceTo(m),r=m.distanceTo(n),u=n.distanceTo(q),s=l.distanceTo(q),p>b||r>b||u>b||s>b){y=a.vertices.length;D=
a.vertices.length+1;z=e.clone();w=e.clone();p>=r&&p>=u&&p>=s||u>=r&&u>=p&&u>=s?(p=l.clone(),p.lerpSelf(m,0.5),m=n.clone(),m.lerpSelf(q,0.5),z.a=f,z.b=y,z.c=D,z.d=k,w.a=y,w.b=h,w.c=j,w.d=D,4===e.vertexNormals.length&&(f=e.vertexNormals[0].clone(),f.lerpSelf(e.vertexNormals[1],0.5),h=e.vertexNormals[2].clone(),h.lerpSelf(e.vertexNormals[3],0.5),z.vertexNormals[1].copy(f),z.vertexNormals[2].copy(h),w.vertexNormals[0].copy(f),w.vertexNormals[3].copy(h)),4===e.vertexColors.length&&(f=e.vertexColors[0].clone(),
f.lerpSelf(e.vertexColors[1],0.5),h=e.vertexColors[2].clone(),h.lerpSelf(e.vertexColors[3],0.5),z.vertexColors[1].copy(f),z.vertexColors[2].copy(h),w.vertexColors[0].copy(f),w.vertexColors[3].copy(h)),e=0):(p=m.clone(),p.lerpSelf(n,0.5),m=q.clone(),m.lerpSelf(l,0.5),z.a=f,z.b=h,z.c=y,z.d=D,w.a=D,w.b=y,w.c=j,w.d=k,4===e.vertexNormals.length&&(f=e.vertexNormals[1].clone(),f.lerpSelf(e.vertexNormals[2],0.5),h=e.vertexNormals[3].clone(),h.lerpSelf(e.vertexNormals[0],0.5),z.vertexNormals[2].copy(f),z.vertexNormals[3].copy(h),
w.vertexNormals[0].copy(h),w.vertexNormals[1].copy(f)),4===e.vertexColors.length&&(f=e.vertexColors[1].clone(),f.lerpSelf(e.vertexColors[2],0.5),h=e.vertexColors[3].clone(),h.lerpSelf(e.vertexColors[0],0.5),z.vertexColors[2].copy(f),z.vertexColors[3].copy(h),w.vertexColors[0].copy(h),w.vertexColors[1].copy(f)),e=1);C.push(z,w);a.vertices.push(p,m);f=0;for(h=a.faceVertexUvs.length;f<h;f++)a.faceVertexUvs[f].length&&(l=a.faceVertexUvs[f][c],w=l[0],j=l[1],z=l[2],l=l[3],0===e?(m=w.clone(),m.lerpSelf(j,
0.5),n=z.clone(),n.lerpSelf(l,0.5),w=[w.clone(),m.clone(),n.clone(),l.clone()],j=[m.clone(),j.clone(),z.clone(),n.clone()]):(m=j.clone(),m.lerpSelf(z,0.5),n=l.clone(),n.lerpSelf(w,0.5),w=[w.clone(),j.clone(),m.clone(),n.clone()],j=[n.clone(),m.clone(),z.clone(),l.clone()]),g[f].push(w,j))}else{C.push(e);f=0;for(h=a.faceVertexUvs.length;f<h;f++)g[f].push(a.faceVertexUvs[f][c])}a.faces=C;a.faceVertexUvs=g}};THREE.GeometryUtils.random=THREE.Math.random16;THREE.GeometryUtils.__v1=new THREE.Vector3;
THREE.ImageUtils={crossOrigin:"anonymous",loadTexture:function(a,b,c){var d=new Image,e=new THREE.Texture(d,b);d.onload=function(){e.needsUpdate=!0;c&&c(this)};d.crossOrigin=this.crossOrigin;d.src=a;return e},loadTextureCube:function(a,b,c){var d,e=[],f=new THREE.Texture(e,b);b=e.loadCount=0;for(d=a.length;b<d;++b)e[b]=new Image,e[b].onload=function(){e.loadCount+=1;6===e.loadCount&&(f.needsUpdate=!0);c&&c(this)},e[b].crossOrigin=this.crossOrigin,e[b].src=a[b];return f},getNormalMap:function(a,b){var c=
function(a){var b=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);return[a[0]/b,a[1]/b,a[2]/b]};b|=1;var d=a.width,e=a.height,f=document.createElement("canvas");f.width=d;f.height=e;var h=f.getContext("2d");h.drawImage(a,0,0);for(var j=h.getImageData(0,0,d,e).data,k=h.createImageData(d,e),l=k.data,m=0;m<d;m++)for(var n=0;n<e;n++){var q=0>n-1?0:n-1,p=n+1>e-1?e-1:n+1,r=0>m-1?0:m-1,u=m+1>d-1?d-1:m+1,s=[],y=[0,0,j[4*(n*d+m)]/255*b];s.push([-1,0,j[4*(n*d+r)]/255*b]);s.push([-1,-1,j[4*(q*d+r)]/255*b]);s.push([0,
-1,j[4*(q*d+m)]/255*b]);s.push([1,-1,j[4*(q*d+u)]/255*b]);s.push([1,0,j[4*(n*d+u)]/255*b]);s.push([1,1,j[4*(p*d+u)]/255*b]);s.push([0,1,j[4*(p*d+m)]/255*b]);s.push([-1,1,j[4*(p*d+r)]/255*b]);q=[];r=s.length;for(p=0;p<r;p++){var u=s[p],D=s[(p+1)%r],u=[u[0]-y[0],u[1]-y[1],u[2]-y[2]],D=[D[0]-y[0],D[1]-y[1],D[2]-y[2]];q.push(c([u[1]*D[2]-u[2]*D[1],u[2]*D[0]-u[0]*D[2],u[0]*D[1]-u[1]*D[0]]))}s=[0,0,0];for(p=0;p<q.length;p++)s[0]+=q[p][0],s[1]+=q[p][1],s[2]+=q[p][2];s[0]/=q.length;s[1]/=q.length;s[2]/=q.length;
y=4*(n*d+m);l[y]=255*((s[0]+1)/2)|0;l[y+1]=255*(s[1]+0.5)|0;l[y+2]=255*s[2]|0;l[y+3]=255}h.putImageData(k,0,0);return f},generateDataTexture:function(a,b,c){var d=a*b,e=new Uint8Array(3*d),f=Math.floor(255*c.r),h=Math.floor(255*c.g);c=Math.floor(255*c.b);for(var j=0;j<d;j++)e[3*j]=f,e[3*j+1]=h,e[3*j+2]=c;a=new THREE.DataTexture(e,a,b,THREE.RGBFormat);a.needsUpdate=!0;return a}};
THREE.SceneUtils={showHierarchy:function(a,b){THREE.SceneUtils.traverseHierarchy(a,function(a){a.visible=b})},traverseHierarchy:function(a,b){var c,d,e=a.children.length;for(d=0;d<e;d++)c=a.children[d],b(c),THREE.SceneUtils.traverseHierarchy(c,b)},createMultiMaterialObject:function(a,b){var c,d=b.length,e=new THREE.Object3D;for(c=0;c<d;c++){var f=new THREE.Mesh(a,b[c]);e.add(f)}return e},cloneObject:function(a){var b;a instanceof THREE.Mesh?b=new THREE.Mesh(a.geometry,a.material):a instanceof THREE.Line?
b=new THREE.Line(a.geometry,a.material,a.type):a instanceof THREE.Ribbon?b=new THREE.Ribbon(a.geometry,a.material):a instanceof THREE.ParticleSystem?(b=new THREE.ParticleSystem(a.geometry,a.material),b.sortParticles=a.sortParticles):a instanceof THREE.Particle?b=new THREE.Particle(a.material):a instanceof THREE.Sprite?(b=new THREE.Sprite({}),b.color.copy(a.color),b.map=a.map,b.blending=a.blending,b.useScreenCoordinates=a.useScreenCoordinates,b.mergeWith3D=a.mergeWith3D,b.affectedByDistance=a.affectedByDistance,
b.scaleByViewport=a.scaleByViewport,b.alignment=a.alignment,b.rotation3d.copy(a.rotation3d),b.rotation=a.rotation,b.opacity=a.opacity,b.uvOffset.copy(a.uvOffset),b.uvScale.copy(a.uvScale)):a instanceof THREE.LOD?b=new THREE.LOD:a instanceof THREE.Object3D&&(b=new THREE.Object3D);b.name=a.name;b.parent=a.parent;b.up.copy(a.up);b.position.copy(a.position);b.rotation instanceof THREE.Vector3&&b.rotation.copy(a.rotation);b.eulerOrder=a.eulerOrder;b.scale.copy(a.scale);b.dynamic=a.dynamic;b.doubleSided=
a.doubleSided;b.flipSided=a.flipSided;b.renderDepth=a.renderDepth;b.rotationAutoUpdate=a.rotationAutoUpdate;b.matrix.copy(a.matrix);b.matrixWorld.copy(a.matrixWorld);b.matrixRotationWorld.copy(a.matrixRotationWorld);b.matrixAutoUpdate=a.matrixAutoUpdate;b.matrixWorldNeedsUpdate=a.matrixWorldNeedsUpdate;b.quaternion.copy(a.quaternion);b.useQuaternion=a.useQuaternion;b.boundRadius=a.boundRadius;b.boundRadiusScale=a.boundRadiusScale;b.visible=a.visible;b.castShadow=a.castShadow;b.receiveShadow=a.receiveShadow;
b.frustumCulled=a.frustumCulled;for(var c=0;c<a.children.length;c++){var d=THREE.SceneUtils.cloneObject(a.children[c]);b.children[c]=d;d.parent=b}if(a instanceof THREE.LOD)for(c=0;c<a.LODs.length;c++)b.LODs[c]={visibleAtDistance:a.LODs[c].visibleAtDistance,object3D:b.children[c]};return b},detach:function(a,b,c){a.applyMatrix(b.matrixWorld);b.remove(a);c.add(a)},attach:function(a,b,c){var d=new THREE.Matrix4;d.getInverse(c.matrixWorld);a.applyMatrix(d);b.remove(a);c.add(a)}};
THREE.WebGLRenderer&&(THREE.ShaderUtils={lib:{fresnel:{uniforms:{mRefractionRatio:{type:"f",value:1.02},mFresnelBias:{type:"f",value:0.1},mFresnelPower:{type:"f",value:2},mFresnelScale:{type:"f",value:1},tCube:{type:"t",value:1,texture:null}},fragmentShader:"uniform samplerCube tCube;\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\nvoid main() {\nvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\nvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\nrefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\nrefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\nrefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\nrefractedColor.a = 1.0;\ngl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\n}",
vertexShader:"uniform float mRefractionRatio;\nuniform float mFresnelBias;\nuniform float mFresnelScale;\nuniform float mFresnelPower;\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvec3 nWorld = normalize ( mat3( objectMatrix[0].xyz, objectMatrix[1].xyz, objectMatrix[2].xyz ) * normal );\nvec3 I = mPosition.xyz - cameraPosition;\nvReflect = reflect( I, nWorld );\nvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\nvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\nvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\nvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\ngl_Position = projectionMatrix * mvPosition;\n}"},
normal:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{enableAO:{type:"i",value:0},enableDiffuse:{type:"i",value:0},enableSpecular:{type:"i",value:0},enableReflection:{type:"i",value:0},tDiffuse:{type:"t",value:0,texture:null},tCube:{type:"t",value:1,texture:null},tNormal:{type:"t",value:2,texture:null},tSpecular:{type:"t",value:3,texture:null},tAO:{type:"t",value:4,texture:null},tDisplacement:{type:"t",value:5,texture:null},uNormalScale:{type:"f",
value:1},uDisplacementBias:{type:"f",value:0},uDisplacementScale:{type:"f",value:1},uDiffuseColor:{type:"c",value:new THREE.Color(16777215)},uSpecularColor:{type:"c",value:new THREE.Color(1118481)},uAmbientColor:{type:"c",value:new THREE.Color(16777215)},uShininess:{type:"f",value:30},uOpacity:{type:"f",value:1},uReflectivity:{type:"f",value:0.5},uOffset:{type:"v2",value:new THREE.Vector2(0,0)},uRepeat:{type:"v2",value:new THREE.Vector2(1,1)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),
fragmentShader:["uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform float uNormalScale;\nuniform float uReflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3( 1.0 ), uOpacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse ) {\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( tDiffuse, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n#endif\n}\nif( enableAO ) {\n#ifdef GAMMA_INPUT\nvec4 aoColor = texture2D( tAO, vUv );\naoColor.xyz *= aoColor.xyz;\ngl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n#endif\n}\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\nvec3 finalNormal = tsb * normalTex;\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec3 pointVector = normalize( vPointLight[ i ].xyz );\nfloat pointDistance = vPointLight[ i ].w;\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n#endif\npointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\nvec3 pointHalfVector = normalize( pointVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\n#else\npointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor) + totalSpecular;\nif ( enableReflection ) {\nvec3 wPos = cameraPosition - vViewPosition;\nvec3 vReflect = reflect( normalize( wPos ), normal );\nvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\n}",
THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n"),vertexShader:["attribute vec4 tangent;\nuniform vec2 uOffset;\nuniform vec2 uRepeat;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvViewPosition = -mvPosition.xyz;\nvNormal = normalMatrix * normal;\nvTangent = normalMatrix * tangent.xyz;\nvBinormal = cross( vNormal, vTangent ) * tangent.w;\nvUv = uv * uRepeat + uOffset;\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#ifdef VERTEX_TEXTURES\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\nvec4 displacedPosition = vec4( normalize( vNormal.xyz ) * df, 0.0 ) + mvPosition;\ngl_Position = projectionMatrix * displacedPosition;\n#else\ngl_Position = projectionMatrix * mvPosition;\n#endif",
THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n")},cube:{uniforms:{tCube:{type:"t",value:1,texture:null},tFlip:{type:"f",value:-1}},vertexShader:"varying vec3 vViewPosition;\nvoid main() {\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvViewPosition = cameraPosition - mPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vViewPosition;\nvoid main() {\nvec3 wPos = cameraPosition - vViewPosition;\ngl_FragColor = textureCube( tCube, vec3( tFlip * wPos.x, wPos.yz ) );\n}"}}});
THREE.BufferGeometry=function(){this.id=THREE.GeometryCount++;this.vertexColorArray=this.vertexUvArray=this.vertexNormalArray=this.vertexPositionArray=this.vertexIndexArray=this.vertexColorBuffer=this.vertexUvBuffer=this.vertexNormalBuffer=this.vertexPositionBuffer=this.vertexIndexBuffer=null;this.dynamic=!1;this.boundingSphere=this.boundingBox=null;this.morphTargets=[]};THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,computeBoundingBox:function(){},computeBoundingSphere:function(){}};
THREE.CubeGeometry=function(a,b,c,d,e,f,h,j){function k(a,b,c,h,j,k,m,p){var n,q=d||1,r=e||1,s=j/2,u=k/2,y=l.vertices.length;if("x"===a&&"y"===b||"y"===a&&"x"===b)n="z";else if("x"===a&&"z"===b||"z"===a&&"x"===b)n="y",r=f||1;else if("z"===a&&"y"===b||"y"===a&&"z"===b)n="x",q=f||1;var z=q+1,D=r+1,J=j/q,T=k/r,L=new THREE.Vector3;L[n]=0<m?1:-1;for(j=0;j<D;j++)for(k=0;k<z;k++){var S=new THREE.Vector3;S[a]=(k*J-s)*c;S[b]=(j*T-u)*h;S[n]=m;l.vertices.push(S)}for(j=0;j<r;j++)for(k=0;k<q;k++)a=new THREE.Face4(k+
z*j+y,k+z*(j+1)+y,k+1+z*(j+1)+y,k+1+z*j+y),a.normal.copy(L),a.vertexNormals.push(L.clone(),L.clone(),L.clone(),L.clone()),a.materialIndex=p,l.faces.push(a),l.faceVertexUvs[0].push([new THREE.UV(k/q,j/r),new THREE.UV(k/q,(j+1)/r),new THREE.UV((k+1)/q,(j+1)/r),new THREE.UV((k+1)/q,j/r)])}THREE.Geometry.call(this);var l=this,m=a/2,n=b/2,q=c/2,p,r,u,s,y,D;if(void 0!==h){if(h instanceof Array)this.materials=h;else{this.materials=[];for(p=0;6>p;p++)this.materials.push(h)}p=0;s=1;r=2;y=3;u=4;D=5}else this.materials=
[];this.sides={px:!0,nx:!0,py:!0,ny:!0,pz:!0,nz:!0};if(void 0!=j)for(var z in j)void 0!==this.sides[z]&&(this.sides[z]=j[z]);this.sides.px&&k("z","y",-1,-1,c,b,m,p);this.sides.nx&&k("z","y",1,-1,c,b,-m,s);this.sides.py&&k("x","z",1,1,a,c,n,r);this.sides.ny&&k("x","z",1,-1,a,c,-n,y);this.sides.pz&&k("x","y",1,-1,a,b,q,u);this.sides.nz&&k("x","y",-1,-1,a,b,-q,D);this.computeCentroids();this.mergeVertices()};THREE.CubeGeometry.prototype=new THREE.Geometry;THREE.CubeGeometry.prototype.constructor=THREE.CubeGeometry;
THREE.CylinderGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);a=void 0!==a?a:20;b=void 0!==b?b:20;c=void 0!==c?c:100;var h=c/2;d=d||8;e=e||1;var j,k,l=[],m=[];for(k=0;k<=e;k++){var n=[],q=[],p=k/e,r=p*(b-a)+a;for(j=0;j<=d;j++){var u=j/d,s=new THREE.Vector3;s.x=r*Math.sin(2*u*Math.PI);s.y=-p*c+h;s.z=r*Math.cos(2*u*Math.PI);this.vertices.push(s);n.push(this.vertices.length-1);q.push(new THREE.UV(u,p))}l.push(n);m.push(q)}c=(b-a)/c;for(j=0;j<d;j++){0!==a?(n=this.vertices[l[0][j]].clone(),q=
this.vertices[l[0][j+1]].clone()):(n=this.vertices[l[1][j]].clone(),q=this.vertices[l[1][j+1]].clone());n.setY(Math.sqrt(n.x*n.x+n.z*n.z)*c).normalize();q.setY(Math.sqrt(q.x*q.x+q.z*q.z)*c).normalize();for(k=0;k<e;k++){var p=l[k][j],r=l[k+1][j],u=l[k+1][j+1],s=l[k][j+1],y=n.clone(),D=n.clone(),z=q.clone(),w=q.clone(),C=m[k][j].clone(),g=m[k+1][j].clone(),E=m[k+1][j+1].clone(),Q=m[k][j+1].clone();this.faces.push(new THREE.Face4(p,r,u,s,[y,D,z,w]));this.faceVertexUvs[0].push([C,g,E,Q])}}if(!f&&0<a){this.vertices.push(new THREE.Vector3(0,
h,0));for(j=0;j<d;j++)p=l[0][j],r=l[0][j+1],u=this.vertices.length-1,y=new THREE.Vector3(0,1,0),D=new THREE.Vector3(0,1,0),z=new THREE.Vector3(0,1,0),C=m[0][j].clone(),g=m[0][j+1].clone(),E=new THREE.UV(g.u,0),this.faces.push(new THREE.Face3(p,r,u,[y,D,z])),this.faceVertexUvs[0].push([C,g,E])}if(!f&&0<b){this.vertices.push(new THREE.Vector3(0,-h,0));for(j=0;j<d;j++)p=l[k][j+1],r=l[k][j],u=this.vertices.length-1,y=new THREE.Vector3(0,-1,0),D=new THREE.Vector3(0,-1,0),z=new THREE.Vector3(0,-1,0),C=
m[k][j+1].clone(),g=m[k][j].clone(),E=new THREE.UV(g.u,1),this.faces.push(new THREE.Face3(p,r,u,[y,D,z])),this.faceVertexUvs[0].push([C,g,E])}this.computeCentroids();this.computeFaceNormals()};THREE.CylinderGeometry.prototype=new THREE.Geometry;THREE.CylinderGeometry.prototype.constructor=THREE.CylinderGeometry;
THREE.PlaneGeometry=function(a,b,c,d){THREE.Geometry.call(this);var e=a/2,f=b/2;c=c||1;d=d||1;var h=c+1,j=d+1,k=a/c,l=b/d,m=new THREE.Vector3(0,1,0);for(a=0;a<j;a++)for(b=0;b<h;b++)this.vertices.push(new THREE.Vector3(b*k-e,0,a*l-f));for(a=0;a<d;a++)for(b=0;b<c;b++)e=new THREE.Face4(b+h*a,b+h*(a+1),b+1+h*(a+1),b+1+h*a),e.normal.copy(m),e.vertexNormals.push(m.clone(),m.clone(),m.clone(),m.clone()),this.faces.push(e),this.faceVertexUvs[0].push([new THREE.UV(b/c,a/d),new THREE.UV(b/c,(a+1)/d),new THREE.UV((b+
1)/c,(a+1)/d),new THREE.UV((b+1)/c,a/d)]);this.computeCentroids()};THREE.PlaneGeometry.prototype=new THREE.Geometry;THREE.PlaneGeometry.prototype.constructor=THREE.PlaneGeometry;
THREE.SphereGeometry=function(a,b,c,d,e,f,h){THREE.Geometry.call(this);a=a||50;d=void 0!==d?d:0;e=void 0!==e?e:2*Math.PI;f=void 0!==f?f:0;h=void 0!==h?h:Math.PI;b=Math.max(3,Math.floor(b)||8);c=Math.max(2,Math.floor(c)||6);var j,k,l=[],m=[];for(k=0;k<=c;k++){var n=[],q=[];for(j=0;j<=b;j++){var p=j/b,r=k/c,u=new THREE.Vector3;u.x=-a*Math.cos(d+p*e)*Math.sin(f+r*h);u.y=a*Math.cos(f+r*h);u.z=a*Math.sin(d+p*e)*Math.sin(f+r*h);this.vertices.push(u);n.push(this.vertices.length-1);q.push(new THREE.UV(p,
r))}l.push(n);m.push(q)}for(k=0;k<c;k++)for(j=0;j<b;j++){d=l[k][j+1];e=l[k][j];f=l[k+1][j];h=l[k+1][j+1];var n=this.vertices[d].clone().normalize(),q=this.vertices[e].clone().normalize(),p=this.vertices[f].clone().normalize(),r=this.vertices[h].clone().normalize(),u=m[k][j+1].clone(),s=m[k][j].clone(),y=m[k+1][j].clone(),D=m[k+1][j+1].clone();Math.abs(this.vertices[d].y)==a?(this.faces.push(new THREE.Face3(d,f,h,[n,p,r])),this.faceVertexUvs[0].push([u,y,D])):Math.abs(this.vertices[f].y)==a?(this.faces.push(new THREE.Face3(d,
e,f,[n,q,p])),this.faceVertexUvs[0].push([u,s,y])):(this.faces.push(new THREE.Face4(d,e,f,h,[n,q,p,r])),this.faceVertexUvs[0].push([u,s,y,D]))}this.computeCentroids();this.computeFaceNormals();this.boundingSphere={radius:a}};THREE.SphereGeometry.prototype=new THREE.Geometry;THREE.SphereGeometry.prototype.constructor=THREE.SphereGeometry;
THREE.PolyhedronGeometry=function(a,b,c,d){function e(a){var b=a.normalize().clone();b.index=k.vertices.push(b)-1;var c=Math.atan2(a.z,-a.x)/2/Math.PI+0.5;a=Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+0.5;b.uv=new THREE.UV(c,a);return b}function f(a,b,c,d){1>d?(d=new THREE.Face3(a.index,b.index,c.index,[a.clone(),b.clone(),c.clone()]),d.centroid.addSelf(a).addSelf(b).addSelf(c).divideScalar(3),d.normal=d.centroid.clone().normalize(),k.faces.push(d),d=Math.atan2(d.centroid.z,-d.centroid.x),
k.faceVertexUvs[0].push([j(a.uv,a,d),j(b.uv,b,d),j(c.uv,c,d)])):(d-=1,f(a,h(a,b),h(a,c),d),f(h(a,b),b,h(b,c),d),f(h(a,c),h(b,c),c,d),f(h(a,b),h(b,c),h(a,c),d))}function h(a,b){n[a.index]||(n[a.index]=[]);n[b.index]||(n[b.index]=[]);var c=n[a.index][b.index];void 0===c&&(n[a.index][b.index]=n[b.index][a.index]=c=e((new THREE.Vector3).add(a,b).divideScalar(2)));return c}function j(a,b,c){0>c&&1===a.u&&(a=new THREE.UV(a.u-1,a.v));0===b.x&&0===b.z&&(a=new THREE.UV(c/2/Math.PI+0.5,a.v));return a}THREE.Geometry.call(this);
c=c||1;d=d||0;for(var k=this,l=0,m=a.length;l<m;l++)e(new THREE.Vector3(a[l][0],a[l][1],a[l][2]));var n=[];a=this.vertices;l=0;for(m=b.length;l<m;l++)f(a[b[l][0]],a[b[l][1]],a[b[l][2]],d);this.mergeVertices();l=0;for(m=this.vertices.length;l<m;l++)this.vertices[l].multiplyScalar(c);this.computeCentroids();this.boundingSphere={radius:c}};THREE.PolyhedronGeometry.prototype=new THREE.Geometry;THREE.PolyhedronGeometry.prototype.constructor=THREE.PolyhedronGeometry;
THREE.IcosahedronGeometry=function(a,b){var c=(1+Math.sqrt(5))/2;THREE.PolyhedronGeometry.call(this,[[-1,c,0],[1,c,0],[-1,-c,0],[1,-c,0],[0,-1,c],[0,1,c],[0,-1,-c],[0,1,-c],[c,0,-1],[c,0,1],[-c,0,-1],[-c,0,1]],[[0,11,5],[0,5,1],[0,1,7],[0,7,10],[0,10,11],[1,5,9],[5,11,4],[11,10,2],[10,7,6],[7,1,8],[3,9,4],[3,4,2],[3,2,6],[3,6,8],[3,8,9],[4,9,5],[2,4,11],[6,2,10],[8,6,7],[9,8,1]],a,b)};THREE.IcosahedronGeometry.prototype=new THREE.Geometry;THREE.IcosahedronGeometry.prototype.constructor=THREE.IcosahedronGeometry;
(function(a){a.ShaderLib.lambert.fragmentShader=a.ShaderLib.lambert.fragmentShader.replace("gl_FrontFacing","true");a.ShaderLib.lambert.vertexShader=a.ShaderLib.lambert.vertexShader.replace(/\}$/,"#ifdef DOUBLE_SIDED\n if (transformedNormal.z < 0.0) vLightFront = vLightBack;\n #endif\n }")})(THREE);
(function(a){a._Canvas3D=function(b,c,f,h){this._uniqueId=(""+Math.random()).substring(3);this._id=b;this._isJava=this._is2D=!1;this._jmolType="Jmol._Canvas3D (Jmol/GLmol)";this._platform="J.awtjs.Platform";if(h)return this;window[b]=this;this._createCanvas(b,c,new a.GLmol);if(!a._document||this._deferApplet)return this;this._init();return this};a.GLmol=function(){return this};var b=a.GLmol;b.extendApplet=function(a){a._refresh=function(){if(this._applet&&this._applet.viewer){var a=this._applet.viewer.getGLmolView(),
b=this._GLmol,c=b.rotationGroup;if(c){var d=b.modelGroup,k=a.quaternion;c.quaternion=new THREE.Quaternion(-k.q3,-k.q0,k.q1,k.q2);k=a.scale;c.position.z=b.CAMERA_Z+(a.cameraDistance+0.5*a.pixelCount)/k;d.position.x=-a.center.x;d.position.y=-a.center.y;d.position.z=-a.center.z;a.perspective?(b.camera=b.perspectiveCamera,b.camera.fov=b.fov):(b.camera=b.orthoscopicCamera,b.camera.right=0.5*a.width/k,b.camera.left=-b.camera.right,b.camera.top=0.5*a.height/k,b.camera.bottom=-b.camera.top);b.camera.updateProjectionMatrix();
var l=this;requestAnimationFrame(function(){l._GLmol.show()})}}};return a};b.extendJSExporter=function(a){a.jsInitExport=function(a){a._GLmol.initializeJmolExport()};a.jsSphere=function(a,b,c,d,k){a._GLmol.addJmolSphere(d,k[0],k[1])};a.jsCylinder=function(a,b,c,d,k,l){a._GLmol.addJmolCylinder(d,k,l[0],l[1],l[2])};a.jsTriangle=function(a,b,c,d,k){a._GLmol.addJmolTriangle(b,c,d,k)};a.jsEndExport=function(a){a._GLmol.finalizeJmolExport();a._refresh()};a.jsSurface=function(a,b,c,d,k,l,m,n,q,p,r,u){m=
{};if(null!=r){m.vertexColors=THREE.VertexColors;var s=Array(r.length);for(p=r.length;0<=--p;)s[p]=new THREE.Color(r[p])}else null!=u?m.vertexColors=THREE.FaceColors:m.color=p;n=new THREE.Geometry;for(p=0;p<k;p++)n.vertices.push(new THREE.Vector3(b[p].x,b[p].y,b[p].z));for(p=0;p<l;p++){b=d[p][0];k=d[p][1];var y=d[p][2],D=d[p][3],z=3==q||3==d[p].length,w=z?new THREE.Face3(b,k,y):new THREE.Face4(b,k,y,D);w.vertexNormals[0]=c[b];w.vertexNormals[1]=c[k];w.vertexNormals[2]=c[y];z?null!=r&&(w.vertexColors=
[s[b],s[k],s[y]]):w.vertexNormals[3]=c[D];null!=u&&(w.color=new THREE.Color(u[p]));n.faces.push(w)}c=new THREE.Mesh(n,new THREE.MeshLambertMaterial(m));c.doubleSided=!0;a._GLmol.modelGroup.add(c)}};b.getMat=function(a,b){if(!a._mat||a._matColor!=b)a._matColor=b,a._mat=new THREE.MeshLambertMaterial({color:b,specular:16777215});return a._mat};b.setPt=function(a,b){a.x=b.x;a.y=b.y;a.z=b.z};var c=b.prototype;c.create=function(){this.container=a.$(this.applet,"appletdiv");this.WIDTH=this.container.width();
this.HEIGHT=this.container.height();this.ASPECT=this.WIDTH/this.HEIGHT;this.NEAR=1;FAR=800;this.CAMERA_Z=-150;this.applet.aaScale=2;this.renderer=new THREE.WebGLRenderer({antialias:!0});var b=this.renderer.domElement;b.width=this.container.width();b.height=this.container.height();b.applet=this.applet;a._jsSetMouse(b);this.applet._canvas=b;b.style.width="100%";b.style.height="100%";b.id=this.id+"_canvas";this.container.append(b);this.renderer.setSize(this.WIDTH*this.applet.aaScale,this.HEIGHT*this.applet.aaScale);
this.renderer.sortObjects=!1;this.camera=new THREE.PerspectiveCamera(16.26,this.ASPECT,1,800);this.camera.position=new THREE.Vector3(0,0,this.CAMERA_Z);this.camera.lookAt(new THREE.Vector3(0,0,0));this.perspectiveCamera=this.camera;this.orthoscopicCamera=new THREE.OrthographicCamera;this.orthoscopicCamera.position.z=this.CAMERA_Z;this.orthoscopicCamera.lookAt(new THREE.Vector3(0,0,0));var c=this;a.$resize(function(){c.WIDTH=c.container.width();c.HEIGHT=c.container.height();c.ASPECT=c.WIDTH/c.HEIGHT;
c.renderer.setSize(c.WIDTH,c.HEIGHT);c.camera.aspect=c.ASPECT;c.camera.updateProjectionMatrix();c.show()});this.modelGroup=this.rotationGroup=this.scene=null;this.bgColor=0;this.fov=16.26;this.fogStart=0.4;this.slabNear=-50;this.slabFar=50;this.cylinderQuality=this.sphereQuality=16};c.getView=function(){if(!this.modelGroup)return[0,0,0,0,0,0,0,1];var a=this.modelGroup.position,b=this.rotationGroup.quaternion;return[a.x,a.y,a.z,this.rotationGroup.position.z,b.x,b.y,b.z,b.w]};c.setView=function(a){this.modelGroup&&
this.rotationGroup&&(this.modelGroup.position.x=a[0],this.modelGroup.position.y=a[1],this.modelGroup.position.z=a[2],this.rotationGroup.position.z=a[3],this.rotationGroup.quaternion.x=a[4],this.rotationGroup.quaternion.y=a[5],this.rotationGroup.quaternion.z=a[6],this.rotationGroup.quaternion.w=a[7],this.show())};c.setBackground=function(a,b){this.bgColor=a;this.renderer.setClearColorHex(a,b|1);this.scene.fog.color=new THREE.Color(a)};c.setupLights=function(a){var b=new THREE.DirectionalLight(16777215);
b.position=(new THREE.Vector3(1,1,-2.5)).normalize();b.intensity=1;a.add(b);b=new THREE.AmbientLight(1052688);a.add(b)};c.setSlabAndFog=function(){var a=this.rotationGroup.position.z-this.camera.position.z;1>a&&(a=1);this.camera.near=a+this.slabNear;1>this.camera.near&&(this.camera.near=1);this.camera.far=a+this.slabFar;this.camera.near+1>this.camera.far&&(this.camera.far=this.camera.near+1);this.scene.fog.near=this.camera.near+this.fogStart*(this.camera.far-this.camera.near);this.scene.fog.far=this.camera.far;
this.camera.updateProjectionMatrix()};c.initializeScene=function(){this.scene=new THREE.Scene;this.scene.fog=new THREE.Fog(this.bgColor,100,200);this.modelGroup=new THREE.Object3D;this.rotationGroup=new THREE.Object3D;this.rotationGroup.useQuaternion=!0;this.rotationGroup.quaternion=new THREE.Quaternion(0,-1,0,0);this.rotationGroup.add(this.modelGroup);this.scene.add(this.rotationGroup);this.setupLights(this.scene)};c.show=function(){this.scene&&(this.setSlabAndFog(),this.renderer.render(this.scene,
this.camera))};c.initializeJmolExport=function(){this._view=this.getView();this.initializeScene();this.tpt1=new THREE.Vector3;this.tpt2=new THREE.Vector3;this._m=new THREE.Matrix4;this._geoTriangles=null;if(!this.sphereGeometry){this.sphereGeometry=new THREE.SphereGeometry(1,this.sphereQuality,this.sphereQuality);this.sphereGeometry0=new THREE.SphereGeometry(1,this.sphereQuality/4,this.sphereQuality/4);var a=this.cylinderGeometry={};a.c=new THREE.CylinderGeometry(1,1,1,this.cylinderQuality,1,!0);
a.c.faceUvs=[];a.c.faceVertexUvs=[];a.c0=new THREE.CylinderGeometry(1,1,1,this.cylinderQuality/4,1,!0);a.c0.faceUvs=[];a.c0.faceVertexUvs=[];a.n=new THREE.CylinderGeometry(1,1,1,this.cylinderQuality,1,!1);a.n.faceUvs=[];a.n.faceVertexUvs=[];a.n0=new THREE.CylinderGeometry(1,1,1,this.cylinderQuality/4,1,!1);a.n0.faceUvs=[];a.n0.faceVertexUvs=[]}};c.drawSphere=function(a,c,f,h){f=new THREE.Mesh(0.05>h?this.sphereGeometry0:this.sphereGeometry,b.getMat(this,f));a.add(f);f.scale.x=f.scale.y=f.scale.z=
h;f.position.x=c.x;f.position.y=c.y;f.position.z=c.z};c.addJmolSphere=function(a,b,c){this.drawSphere(this.modelGroup,a,b,c)};c.addJmolCylinder=function(a,c,f,h,j){b.setPt(this.tpt1,a);b.setPt(this.tpt2,c);this.drawCylinder(this.modelGroup,this.tpt1,this.tpt2,0+j,f,!0)};c.addJmolTriangle=function(a,b,c,h){var j=this._geoTriangles;j||(j=this._geoTriangles=new THREE.Geometry);var k=j.vertices.length;j.vertices.push(new THREE.Vector3(b.x,b.y,b.z));j.vertices.push(new THREE.Vector3(c.x,c.y,c.z));j.vertices.push(new THREE.Vector3(h.x,
h.y,h.z));a=new THREE.Face3(k,k+1,k+2,null,new THREE.Color(a));j.faces.push(a)};c.finalizeJmolExport=function(){if(this._geoTriangles){var a=this._geoTriangles;a.computeFaceNormals();a=new THREE.Mesh(a,new THREE.MeshLambertMaterial({vertexColors:THREE.FaceColors}));a.doubleSided=!0;this.modelGroup.add(a)}this.setView(this._view)};c.drawCylinder=function(a,c,f,h,j,k){c&&f&&(midpoint=(new THREE.Vector3).add(c,f).multiplyScalar(0.5),j=new THREE.Mesh(this.cylinderGeometry[(k?"c":"n")+(0.05>h?"0":"")],
b.getMat(this,j)),j.position=midpoint,j.lookAt(c),j.updateMatrix(),j.matrixAutoUpdate=!1,j.matrix.multiplySelf(this._m.makeScale(h,h,c.distanceTo(f)).rotateX(Math.PI/2)),a.add(j))}})(Jmol);
