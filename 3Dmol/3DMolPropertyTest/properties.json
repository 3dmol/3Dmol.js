{
    "viewers": {
        "0": {
            "container": {
                "0": {},
                "selector": "",
                "context": {},
                "length": 1
            },
            "ui": {}
        }
    },
    "SurfaceType": {
        "VDW": 1,
        "MS": 2,
        "SAS": 3,
        "SES": 4
    },
    "syncSurface": false,
    "Math": {},
    "Object3DIDCount": 10,
    "GeometryIDCount": 7,
    "MaterialIdCount": 4,
    "SpriteAlignment": {
        "topLeft": {
            "x": 1,
            "y": -1
        },
        "topCenter": {
            "x": 0,
            "y": -1
        },
        "topRight": {
            "x": -1,
            "y": -1
        },
        "centerLeft": {
            "x": 1,
            "y": 0
        },
        "center": {
            "x": 0,
            "y": 0
        },
        "centerRight": {
            "x": -1,
            "y": 0
        },
        "bottomLeft": {
            "x": 1,
            "y": 1
        },
        "bottomCenter": {
            "x": 0,
            "y": 1
        },
        "bottomRight": {
            "x": -1,
            "y": 1
        }
    },
    "TextureIdCount": 0,
    "FrontSide": 0,
    "BackSide": 1,
    "DoubleSide": 2,
    "NoShading": 0,
    "FlatShading": 1,
    "SmoothShading": 2,
    "NoColors": 0,
    "FaceColors": 1,
    "VertexColors": 2,
    "MultiplyOperation": 0,
    "MixOperation": 1,
    "AddOperation": 2,
    "ClampToEdgeWrapping": 1001,
    "LinearFilter": 1006,
    "NearestFilter": 1007,
    "LinearMipMapLinearFilter": 1008,
    "UnsignedByteType": 1009,
    "FloatType": 1010,
    "RGBAFormat": 1021,
    "RFormat": 1022,
    "R32Format": 1023,
    "LineStrip": 0,
    "LinePieces": 1,
    "ShaderUtils": {
        "stickimposterFragmentShader": "uniform float opacity;\nuniform mat4 projectionMatrix;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\nvarying vec3 vLight;\nvarying vec3 vColor;\nvarying vec3 cposition;\nvarying vec3 p1;\nvarying vec3 p2;\nvarying float r;\n//DEFINEFRAGCOLOR\nvoid main() {\n    vec3 color = abs(vColor);\n    vec3 pos = cposition;\n    vec3 p = pos;\n    vec3 v = vec3(0.0,0.0,-1.0);\n    if(projectionMatrix[3][3] == 0.0) v = normalize(pos);\n    vec3 pa = p1;\n    vec3 va = normalize(p2-p1);\n    vec3 tmp1 = v-(dot(v,va)*va);\n    vec3 deltap = p-pa;\n    float A = dot(tmp1,tmp1);\n    if(A == 0.0) discard;\n    vec3 tmp2 = deltap-(dot(deltap,va)*va);\n    float B = 2.0*dot(tmp1, tmp2);\n    float C = dot(tmp2,tmp2)-r*r;\n    float det = (B*B) - (4.0*A*C);\n    if(det < 0.0) discard;\n    float sqrtDet = sqrt(det);\n    float posT = (-B+sqrtDet)/(2.0*A);\n    float negT = (-B-sqrtDet)/(2.0*A);\n    float intersectionT = min(posT,negT);\n    vec3 qi = p+v*intersectionT;\n    float dotp1 = dot(va,qi-p1);\n    float dotp2 = dot(va,qi-p2);\n    vec3 norm;\n    if( dotp1 < 0.0 || dotp2 > 0.0) {\n       vec3 cp;\n       if( dotp1 < 0.0) {         cp = p1;\n       } else {\n          cp = p2;\n       }\n       vec3 diff = p-cp;\n       A = dot(v,v);\n       B = dot(diff,v)*2.0;\n       C = dot(diff,diff)-r*r;\n       det = (B*B) - (4.0*C);\n       if(det < 0.0) discard;\n       sqrtDet = sqrt(det);\n       posT = (-B+sqrtDet)/(2.0);\n       negT = (-B-sqrtDet)/(2.0);\n       float t = min(posT,negT);\n       qi = p+v*t; \n       norm = normalize(qi-cp); \n    } else {\n       norm = normalize(qi-(dotp1*va + p1));\n    }\n    vec4 clipPos = projectionMatrix * vec4(qi, 1.0);\n    float ndcDepth = clipPos.z / clipPos.w;\n    float depth = ((gl_DepthRange.diff * ndcDepth) + gl_DepthRange.near + gl_DepthRange.far) / 2.0;\n    gl_FragDepthEXT = depth;"
    },
    "ShaderLib": {
        "basic": {
            "fragmentShader": "uniform mat4 viewMatrix;\nuniform float opacity;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\nvarying vec3 vColor;\n//DEFINEFRAGCOLOR\nvoid main() {\n    gl_FragColor = vec4( vColor, opacity );\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\n    float fogFactor = smoothstep( fogNear, fogFar, depth );\n    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}",
            "vertexShader": "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nattribute vec3 position;\nattribute vec3 color;\nvarying vec3 vColor;\nvoid main() {\n    vColor = color;\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    gl_Position = projectionMatrix * mvPosition;\n}",
            "uniforms": {
                "opacity": {
                    "type": "f",
                    "value": 1
                },
                "fogColor": {
                    "type": "c",
                    "value": {
                        "r": 1,
                        "g": 1,
                        "b": 1
                    }
                },
                "fogNear": {
                    "type": "f",
                    "value": 1
                },
                "fogFar": {
                    "type": "f",
                    "value": 2000
                }
            }
        },
        "sphereimposter": {
            "fragmentShader": "uniform mat4 viewMatrix;\nuniform float opacity;\nuniform mat4 projectionMatrix;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\nuniform float uDepth;\nuniform vec3 directionalLightColor[ 1 ];\nvarying vec3 vColor;\nvarying vec2 mapping;\nvarying float rval;\nvarying vec3 vLight;\nvarying vec3 center;\n//DEFINEFRAGCOLOR\nvoid main() {\n    float lensqr = dot(mapping,mapping);\n    float rsqr = rval*rval;\n    if(lensqr > rsqr)\n       discard;\n    float z = sqrt(rsqr-lensqr);\n    vec3 cameraPos = center+ vec3(mapping.x,mapping.y,z);\n    vec4 clipPos = projectionMatrix * vec4(cameraPos, 1.0);\n    float ndcDepth = clipPos.z / clipPos.w;\n    gl_FragDepthEXT = ((gl_DepthRange.diff * ndcDepth) + gl_DepthRange.near + gl_DepthRange.far) / 2.0;\n    vec3 norm = normalize(vec3(mapping.x,mapping.y,z));\n    float dotProduct = dot( norm, vLight );\n    vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n    vec3 vLight = directionalLightColor[ 0 ] * directionalLightWeighting;\n    gl_FragColor = vec4(vLight*vColor, opacity*opacity );\n    float fogFactor = smoothstep( fogNear, fogFar, gl_FragDepthEXT/gl_FragCoord.w );\n    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}",
            "vertexShader": "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 directionalLightColor[ 1 ];\nuniform vec3 directionalLightDirection[ 1 ];\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec3 color;\nvarying vec2 mapping;\nvarying vec3 vColor;\nvarying float rval;\nvarying vec3 vLight;\nvarying vec3 center;\nvoid main() {\n    vColor = color;\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    center = mvPosition.xyz;\n    vec4 projPosition = projectionMatrix * mvPosition;\n    vec4 adjust = projectionMatrix* vec4(normal,0.0); adjust.z = 0.0; adjust.w = 0.0;\n    vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ 0 ], 0.0 );\n    vLight = normalize( lDirection.xyz );\n    mapping = normal.xy;\n    rval = abs(normal.x);\n    gl_Position = projPosition+adjust;\n}",
            "uniforms": {
                "opacity": {
                    "type": "f",
                    "value": 1
                },
                "fogColor": {
                    "type": "c",
                    "value": {
                        "r": 1,
                        "g": 1,
                        "b": 1
                    }
                },
                "fogNear": {
                    "type": "f",
                    "value": 1
                },
                "fogFar": {
                    "type": "f",
                    "value": 2000
                },
                "directionalLightColor": {
                    "type": "fv",
                    "value": []
                },
                "directionalLightDirection": {
                    "type": "fv",
                    "value": []
                }
            }
        },
        "lambert": {
            "fragmentShader": "uniform mat4 viewMatrix;\nuniform float opacity;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\nvarying vec3 vLightFront;\nvarying vec3 vColor;\n//DEFINEFRAGCOLOR\nvoid main() {\n    gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\n    #ifndef WIREFRAME\n    gl_FragColor.xyz *= vLightFront;\n    #endif\n    gl_FragColor = gl_FragColor * vec4( vColor, opacity );\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\n    float fogFactor = smoothstep( fogNear, fogFar, depth );\n    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}",
            "vertexShader": "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 directionalLightColor[ 1 ];\nuniform vec3 directionalLightDirection[ 1 ];\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec3 color;\nvarying vec3 vColor;\nvarying vec3 vLightFront;\nvoid main() {\n    vColor = color;\n    vec3 objectNormal = normal;\n    vec3 transformedNormal = normalMatrix * objectNormal;\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    vLightFront = vec3( 0.0 );\n    transformedNormal = normalize( transformedNormal );\n    vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ 0 ], 0.0 );\n    vec3 dirVector = normalize( lDirection.xyz );\n    float dotProduct = dot( transformedNormal, dirVector );\n    vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n    vLightFront += directionalLightColor[ 0 ] * directionalLightWeighting;\n    gl_Position = projectionMatrix * mvPosition;\n}",
            "uniforms": {
                "opacity": {
                    "type": "f",
                    "value": 1
                },
                "fogColor": {
                    "type": "c",
                    "value": {
                        "r": 1,
                        "g": 1,
                        "b": 1
                    }
                },
                "fogNear": {
                    "type": "f",
                    "value": 1
                },
                "fogFar": {
                    "type": "f",
                    "value": 2000
                },
                "directionalLightColor": {
                    "type": "fv",
                    "value": []
                },
                "directionalLightDirection": {
                    "type": "fv",
                    "value": []
                }
            }
        },
        "instanced": {
            "fragmentShader": "uniform mat4 viewMatrix;\nuniform float opacity;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\nvarying vec3 vLightFront;\nvarying vec3 vColor;\n//DEFINEFRAGCOLOR\nvoid main() {\n    gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\n    #ifndef WIREFRAME\n    gl_FragColor.xyz *= vLightFront;\n    #endif\n    gl_FragColor = gl_FragColor * vec4( vColor, opacity );\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\n    float fogFactor = smoothstep( fogNear, fogFar, depth );\n    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}",
            "vertexShader": "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 directionalLightColor[ 1 ];\nuniform vec3 directionalLightDirection[ 1 ];\nattribute vec3 offset;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec3 color;\nattribute float radius;\nvarying vec3 vColor;\nvarying vec3 vLightFront;\nvoid main() {\n    vColor = color;\n    vec3 objectNormal = normal;\n    vec3 transformedNormal = normalMatrix * objectNormal;\n    vec4 mvPosition = modelViewMatrix * vec4( position * radius + offset, 1.0 );\n    vLightFront = vec3( 0.0 );\n    transformedNormal = normalize( transformedNormal );\n    vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ 0 ], 0.0 );\n    vec3 dirVector = normalize( lDirection.xyz );\n    float dotProduct = dot( transformedNormal, dirVector );\n    vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n    vLightFront += directionalLightColor[ 0 ] * directionalLightWeighting;\n    gl_Position = projectionMatrix * mvPosition;\n}",
            "uniforms": {
                "opacity": {
                    "type": "f",
                    "value": 1
                },
                "fogColor": {
                    "type": "c",
                    "value": {
                        "r": 1,
                        "g": 1,
                        "b": 1
                    }
                },
                "fogNear": {
                    "type": "f",
                    "value": 1
                },
                "fogFar": {
                    "type": "f",
                    "value": 2000
                },
                "directionalLightColor": {
                    "type": "fv",
                    "value": []
                },
                "directionalLightDirection": {
                    "type": "fv",
                    "value": []
                }
            }
        },
        "outline": {
            "fragmentShader": "uniform float opacity;\nuniform vec3 outlineColor;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\n//DEFINEFRAGCOLOR\nvoid main() {\n    gl_FragColor = vec4( outlineColor, 1 );\n}",
            "vertexShader": "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float outlineWidth;\nuniform float outlinePushback;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec3 color;\nvoid main() {\n    vec4 norm = modelViewMatrix*vec4(normalize(normal),0.0);\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    mvPosition.xy += norm.xy*outlineWidth;\n    gl_Position = projectionMatrix * mvPosition;\n    mvPosition.z -= outlinePushback;\n    vec4 pushpos = projectionMatrix*mvPosition;\n    gl_Position.z = gl_Position.w*pushpos.z/pushpos.w;\n}",
            "uniforms": {
                "opacity": {
                    "type": "f",
                    "value": 1
                },
                "outlineColor": {
                    "type": "c",
                    "value": {
                        "r": 0,
                        "g": 0,
                        "b": 0
                    }
                },
                "fogColor": {
                    "type": "c",
                    "value": {
                        "r": 1,
                        "g": 1,
                        "b": 1
                    }
                },
                "fogNear": {
                    "type": "f",
                    "value": 1
                },
                "fogFar": {
                    "type": "f",
                    "value": 2000
                },
                "outlineWidth": {
                    "type": "f",
                    "value": 0.1
                },
                "outlinePushback": {
                    "type": "f",
                    "value": 1
                }
            }
        },
        "sphereimposteroutline": {
            "fragmentShader": "uniform float opacity;\nuniform vec3 outlineColor;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\nuniform mat4 projectionMatrix;\nvarying vec2 mapping;\nvarying float rval;\nvarying vec3 center;\nuniform float outlinePushback;\n//DEFINEFRAGCOLOR\nvoid main() {\n    float lensqr = dot(mapping,mapping);\n    float rsqr = rval*rval;\n    if(lensqr > rsqr)\n       discard;\n    float z = sqrt(rsqr-lensqr);\n    vec3 cameraPos = center+ vec3(mapping.x,mapping.y,z-outlinePushback);\n    vec4 clipPos = projectionMatrix * vec4(cameraPos, 1.0);\n    float ndcDepth = clipPos.z / clipPos.w;\n    gl_FragDepthEXT = ((gl_DepthRange.diff * ndcDepth) + gl_DepthRange.near + gl_DepthRange.far) / 2.0;\n    gl_FragColor = vec4(outlineColor, 1 );\n}",
            "vertexShader": "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float outlineWidth;\nuniform float outlinePushback;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec3 color;\nvarying vec2 mapping;\nvarying float rval;\nvarying vec3 center;\nvoid main() {\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    center = mvPosition.xyz;\n    vec4 projPosition = projectionMatrix * mvPosition;\n    vec2 norm = normal.xy + vec2(sign(normal.x)*outlineWidth,sign(normal.y)*outlineWidth);\n    vec4 adjust = projectionMatrix* vec4(norm,normal.z,0.0); adjust.z = 0.0; adjust.w = 0.0;\n    mapping = norm.xy;\n    rval = abs(norm.x);\n    gl_Position = projPosition+adjust;\n}",
            "uniforms": {
                "opacity": {
                    "type": "f",
                    "value": 1
                },
                "outlineColor": {
                    "type": "c",
                    "value": {
                        "r": 0,
                        "g": 0,
                        "b": 0
                    }
                },
                "fogColor": {
                    "type": "c",
                    "value": {
                        "r": 1,
                        "g": 1,
                        "b": 1
                    }
                },
                "fogNear": {
                    "type": "f",
                    "value": 1
                },
                "fogFar": {
                    "type": "f",
                    "value": 2000
                },
                "outlineWidth": {
                    "type": "f",
                    "value": 0.1
                },
                "outlinePushback": {
                    "type": "f",
                    "value": 1
                }
            }
        },
        "stickimposter": {
            "fragmentShader": "uniform float opacity;\nuniform mat4 projectionMatrix;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\nvarying vec3 vLight;\nvarying vec3 vColor;\nvarying vec3 cposition;\nvarying vec3 p1;\nvarying vec3 p2;\nvarying float r;\n//DEFINEFRAGCOLOR\nvoid main() {\n    vec3 color = abs(vColor);\n    vec3 pos = cposition;\n    vec3 p = pos;\n    vec3 v = vec3(0.0,0.0,-1.0);\n    if(projectionMatrix[3][3] == 0.0) v = normalize(pos);\n    vec3 pa = p1;\n    vec3 va = normalize(p2-p1);\n    vec3 tmp1 = v-(dot(v,va)*va);\n    vec3 deltap = p-pa;\n    float A = dot(tmp1,tmp1);\n    if(A == 0.0) discard;\n    vec3 tmp2 = deltap-(dot(deltap,va)*va);\n    float B = 2.0*dot(tmp1, tmp2);\n    float C = dot(tmp2,tmp2)-r*r;\n    float det = (B*B) - (4.0*A*C);\n    if(det < 0.0) discard;\n    float sqrtDet = sqrt(det);\n    float posT = (-B+sqrtDet)/(2.0*A);\n    float negT = (-B-sqrtDet)/(2.0*A);\n    float intersectionT = min(posT,negT);\n    vec3 qi = p+v*intersectionT;\n    float dotp1 = dot(va,qi-p1);\n    float dotp2 = dot(va,qi-p2);\n    vec3 norm;\n    if( dotp1 < 0.0 || dotp2 > 0.0) {\n       vec3 cp;\n       if( dotp1 < 0.0) {         cp = p1;\n       } else {\n          cp = p2;\n       }\n       vec3 diff = p-cp;\n       A = dot(v,v);\n       B = dot(diff,v)*2.0;\n       C = dot(diff,diff)-r*r;\n       det = (B*B) - (4.0*C);\n       if(det < 0.0) discard;\n       sqrtDet = sqrt(det);\n       posT = (-B+sqrtDet)/(2.0);\n       negT = (-B-sqrtDet)/(2.0);\n       float t = min(posT,negT);\n       qi = p+v*t; \n       norm = normalize(qi-cp); \n    } else {\n       norm = normalize(qi-(dotp1*va + p1));\n    }\n    vec4 clipPos = projectionMatrix * vec4(qi, 1.0);\n    float ndcDepth = clipPos.z / clipPos.w;\n    float depth = ((gl_DepthRange.diff * ndcDepth) + gl_DepthRange.near + gl_DepthRange.far) / 2.0;\n    gl_FragDepthEXT = depth;\n    float dotProduct = dot( norm, vLight );\n    vec3 light = vec3( max( dotProduct, 0.0 ) );\n    gl_FragColor = vec4(light*color, opacity*opacity );\n    float fogFactor = smoothstep( fogNear, fogFar, depth );\n    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}",
            "vertexShader": "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 directionalLightColor[ 1 ];\nuniform vec3 directionalLightDirection[ 1 ];\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec3 color;\nattribute float radius;\nvarying vec3 vColor;\nvarying vec3 vLight;\nvarying vec3 cposition;\nvarying vec3 p1;\nvarying vec3 p2;\nvarying float r;\nvoid main() {\n    vColor = color; vColor.z = abs(vColor.z);\n    r = abs(radius);\n    vec4 to = modelViewMatrix*vec4(normal, 1.0);\n    vec4 pt = modelViewMatrix*vec4(position, 1.0);\n    vec4 mvPosition = pt;\n    p1 = pt.xyz; p2 = to.xyz;\n    vec3 norm = to.xyz-pt.xyz;\n    float mult = 1.1;\n    if(length(p1) > length(p2)) {\n       mvPosition = to;\n    }\n    vec3 n = normalize(mvPosition.xyz);\n    if(color.z >= 0.0) {\n       if(projectionMatrix[3][3] == 0.0) {\n         vec3 pnorm = normalize(p1);\n         float t = dot(mvPosition.xyz-p1,n)/dot(pnorm,n);\n         mvPosition.xyz = p1+t*pnorm;\n       } else {\n         mvPosition.xyz = p1;\n       }\n    } else {\n      if(projectionMatrix[3][3] == 0.0) {\n         vec3 pnorm = normalize(p2);\n         float t = dot(mvPosition.xyz-p2,n)/dot(pnorm,n);\n         mvPosition.xyz = p2+t*pnorm;\n       } else {\n         mvPosition.xyz = p2;\n       }\n       mult *= -1.0;\n    }\n    vec3 cr = normalize(cross(mvPosition.xyz,norm))*radius;\n    vec3 doublecr = normalize(cross(mvPosition.xyz,cr))*radius;\n    mvPosition.xyz +=  mult*(cr + doublecr).xyz;\n    cposition = mvPosition.xyz;\n    gl_Position = projectionMatrix * mvPosition;\n    vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ 0 ], 0.0 );\n    vLight = normalize( lDirection.xyz )*directionalLightColor[0];\n}",
            "uniforms": {
                "opacity": {
                    "type": "f",
                    "value": 1
                },
                "fogColor": {
                    "type": "c",
                    "value": {
                        "r": 1,
                        "g": 1,
                        "b": 1
                    }
                },
                "fogNear": {
                    "type": "f",
                    "value": 1
                },
                "fogFar": {
                    "type": "f",
                    "value": 2000
                },
                "directionalLightColor": {
                    "type": "fv",
                    "value": []
                },
                "directionalLightDirection": {
                    "type": "fv",
                    "value": []
                }
            }
        },
        "stickimposteroutline": {
            "fragmentShader": "uniform float opacity;\nuniform mat4 projectionMatrix;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\nvarying vec3 vLight;\nvarying vec3 vColor;\nvarying vec3 cposition;\nvarying vec3 p1;\nvarying vec3 p2;\nvarying float r;\n//DEFINEFRAGCOLOR\nvoid main() {\n    vec3 color = abs(vColor);\n    vec3 pos = cposition;\n    vec3 p = pos;\n    vec3 v = vec3(0.0,0.0,-1.0);\n    if(projectionMatrix[3][3] == 0.0) v = normalize(pos);\n    vec3 pa = p1;\n    vec3 va = normalize(p2-p1);\n    vec3 tmp1 = v-(dot(v,va)*va);\n    vec3 deltap = p-pa;\n    float A = dot(tmp1,tmp1);\n    if(A == 0.0) discard;\n    vec3 tmp2 = deltap-(dot(deltap,va)*va);\n    float B = 2.0*dot(tmp1, tmp2);\n    float C = dot(tmp2,tmp2)-r*r;\n    float det = (B*B) - (4.0*A*C);\n    if(det < 0.0) discard;\n    float sqrtDet = sqrt(det);\n    float posT = (-B+sqrtDet)/(2.0*A);\n    float negT = (-B-sqrtDet)/(2.0*A);\n    float intersectionT = min(posT,negT);\n    vec3 qi = p+v*intersectionT;\n    float dotp1 = dot(va,qi-p1);\n    float dotp2 = dot(va,qi-p2);\n    vec3 norm;\n    if( dotp1 < 0.0 || dotp2 > 0.0) {\n       vec3 cp;\n       if( dotp1 < 0.0) {         cp = p1;\n       } else {\n          cp = p2;\n       }\n       vec3 diff = p-cp;\n       A = dot(v,v);\n       B = dot(diff,v)*2.0;\n       C = dot(diff,diff)-r*r;\n       det = (B*B) - (4.0*C);\n       if(det < 0.0) discard;\n       sqrtDet = sqrt(det);\n       posT = (-B+sqrtDet)/(2.0);\n       negT = (-B-sqrtDet)/(2.0);\n       float t = min(posT,negT);\n       qi = p+v*t; \n       norm = normalize(qi-cp); \n    } else {\n       norm = normalize(qi-(dotp1*va + p1));\n    }\n    vec4 clipPos = projectionMatrix * vec4(qi, 1.0);\n    float ndcDepth = clipPos.z / clipPos.w;\n    float depth = ((gl_DepthRange.diff * ndcDepth) + gl_DepthRange.near + gl_DepthRange.far) / 2.0;\n    gl_FragDepthEXT = depth;gl_FragColor = vec4(color,1.0);}",
            "vertexShader": "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 directionalLightColor[ 1 ];\nuniform vec3 directionalLightDirection[ 1 ];\nuniform vec3 outlineColor;\nuniform float outlineWidth;\nuniform float outlinePushback;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec3 color;\nattribute float radius;\nvarying vec3 vColor;\nvarying vec3 vLight;\nvarying vec3 cposition;\nvarying vec3 p1;\nvarying vec3 p2;\nvarying float r;\nvoid main() {\n    vColor = outlineColor;\n    float rad = radius+sign(radius)*outlineWidth;\n    r = abs(rad);\n    vec4 to = modelViewMatrix*vec4(normal, 1.0);\n    vec4 pt = modelViewMatrix*vec4(position, 1.0);\n    to.xyz += normalize(to.xyz)*outlinePushback;\n    pt.xyz += normalize(pt.xyz)*outlinePushback;\n    vec4 mvPosition = pt;\n    p1 = pt.xyz; p2 = to.xyz;\n    vec3 norm = to.xyz-pt.xyz;\n    float mult = 1.1;\n    if(length(p1) > length(p2)) {\n       mvPosition = to;\n    }\n    vec3 n = normalize(mvPosition.xyz);\n    if(color.z >= 0.0) {\n       vec3 pnorm = normalize(p1);\n       float t = dot(mvPosition.xyz-p1,n)/dot(pnorm,n);\n       mvPosition.xyz = p1+t*pnorm;\n    } else {\n       vec3 pnorm = normalize(p2);\n       float t = dot(mvPosition.xyz-p2,n)/dot(pnorm,n);\n       mvPosition.xyz = p2+t*pnorm;\n       mult *= -1.0;\n    }\n    vec3 cr = normalize(cross(mvPosition.xyz,norm))*rad;\n    vec3 doublecr = normalize(cross(mvPosition.xyz,cr))*rad;\n    mvPosition.xy +=  mult*(cr + doublecr).xy;\n    cposition = mvPosition.xyz;\n    gl_Position = projectionMatrix * mvPosition;\n    vLight = vec3(1.0,1.0,1.0);\n}",
            "uniforms": {
                "opacity": {
                    "type": "f",
                    "value": 1
                },
                "fogColor": {
                    "type": "c",
                    "value": {
                        "r": 1,
                        "g": 1,
                        "b": 1
                    }
                },
                "fogNear": {
                    "type": "f",
                    "value": 1
                },
                "fogFar": {
                    "type": "f",
                    "value": 2000
                },
                "outlineColor": {
                    "type": "c",
                    "value": {
                        "r": 0,
                        "g": 0,
                        "b": 0
                    }
                },
                "outlineWidth": {
                    "type": "f",
                    "value": 0.1
                },
                "outlinePushback": {
                    "type": "f",
                    "value": 1
                }
            }
        },
        "lambertdouble": {
            "fragmentShader": "uniform mat4 viewMatrix;\nuniform float opacity;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\nvarying vec3 vLightFront;\nvarying vec3 vLightBack;\nvarying vec3 vColor;\n//DEFINEFRAGCOLOR\nvoid main() {\n    gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\n    #ifndef WIREFRAME\n    if ( gl_FrontFacing )\n       gl_FragColor.xyz *= vLightFront;\n    else\n       gl_FragColor.xyz *= vLightBack;\n    #endif\n    gl_FragColor = gl_FragColor * vec4( vColor, opacity );\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\n    float fogFactor = smoothstep( fogNear, fogFar, depth );\n    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}",
            "vertexShader": "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 directionalLightColor[ 1 ];\nuniform vec3 directionalLightDirection[ 1 ];\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec3 color;\nvarying vec3 vColor;\nvarying vec3 vLightFront;\nvarying vec3 vLightBack;\nvoid main() {\n    vColor = color;\n    vec3 objectNormal = normal;\n    vec3 transformedNormal = normalMatrix * objectNormal;\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    vLightFront = vec3( 0.0 );\n    vLightBack = vec3( 0.0 );\n    transformedNormal = normalize( transformedNormal );\n    vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ 0 ], 0.0 );\n    vec3 dirVector = normalize( lDirection.xyz );\n    float dotProduct = dot( transformedNormal, dirVector );\n    vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n    vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n    vLightFront += directionalLightColor[ 0 ] * directionalLightWeighting;\n    vLightBack += directionalLightColor[ 0 ] * directionalLightWeightingBack;\n    gl_Position = projectionMatrix * mvPosition;\n}",
            "uniforms": {
                "opacity": {
                    "type": "f",
                    "value": 1
                },
                "fogColor": {
                    "type": "c",
                    "value": {
                        "r": 1,
                        "g": 1,
                        "b": 1
                    }
                },
                "fogNear": {
                    "type": "f",
                    "value": 1
                },
                "fogFar": {
                    "type": "f",
                    "value": 2000
                },
                "directionalLightColor": {
                    "type": "fv",
                    "value": []
                },
                "directionalLightDirection": {
                    "type": "fv",
                    "value": []
                }
            }
        },
        "sprite": {
            "fragmentShader": "uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\n//DEFINEFRAGCOLOR\nvoid main() {\n    vec4 texture = texture2D(map, vUV);\n    if (texture.a < alphaTest) discard;\n    gl_FragColor = vec4(color * texture.xyz, texture.a * opacity);\n    if (fogType > 0) {\n        float depth = gl_FragCoord.z / gl_FragCoord.w;\n        float fogFactor = 0.0;\n        if (fogType == 1) {\n            fogFactor = smoothstep(fogNear, fogFar, depth);\n        }\n        else {\n            const float LOG2 = 1.442695;\n            float fogFactor = exp2(- fogDensity * fogDensity * depth * depth * LOG2);\n            fogFactor = 1.0 - clamp(fogFactor, 0.0, 1.0);\n        }\n        gl_FragColor = mix(gl_FragColor, vec4(fogColor, gl_FragColor.w), fogFactor);\n    }\n}",
            "vertexShader": "uniform int useScreenCoordinates;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\n    vUV = uvOffset + uv * uvScale;\n    vec2 alignedPosition = position + alignment;\n    vec2 rotatedPosition;\n    rotatedPosition.x = ( cos(rotation) * alignedPosition.x - sin(rotation) * alignedPosition.y ) * scale.x;\n    rotatedPosition.y = ( sin(rotation) * alignedPosition.x + cos(rotation) * alignedPosition.y ) * scale.y;\n    vec4 finalPosition;\n    if(useScreenCoordinates != 0) {\n        finalPosition = vec4(screenPosition.xy + rotatedPosition, screenPosition.z, 1.0);\n    }\n    else {\n        finalPosition = projectionMatrix * modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0); finalPosition /= finalPosition.w;\n        finalPosition.xy += rotatedPosition; \n    }\n    gl_Position = finalPosition;\n}",
            "uniforms": {}
        },
        "volumetric": {
            "fragmentShader": "uniform highp sampler3D data;\nuniform highp sampler2D colormap;\nuniform highp sampler2D depthmap;\nuniform mat4 textmat;\nuniform mat4 projinv;\nuniform mat4 projectionMatrix;\nuniform float step;\nuniform float subsamples;\nuniform float maxdepth;\nuniform float transfermin;\nuniform float transfermax;\nin  vec4 mvPosition;\nout vec4 color;\nvoid main(void) {\n   vec4 pos = mvPosition;\n   bool seengood = false;\n   float i = 0.0;\n   color = vec4(1,1,1,0);\n   float increment = 1.0/subsamples;\n   float maxsteps = (maxdepth*subsamples/step);\n   vec4 maxpos = vec4(pos.x,pos.y,pos.z-maxdepth,1.0);\n   maxpos = projectionMatrix*maxpos;\n   vec4 startp = projectionMatrix*pos;\n   maxpos /= maxpos.w;\n   startp /= startp.w;\n   maxpos = vec4(startp.x,startp.y,maxpos.z,1.0);\n   maxpos = projinv*maxpos;\n   maxpos /= maxpos.w;\n   float incr = step/subsamples;\n   vec2 tpos = startp.xy/2.0+0.5;\n   float depth = texture(depthmap, tpos).r;\n   vec4 direction = maxpos-pos;\n   for( i = 0.0; i <= maxsteps; i++) {\n      vec4 pt = (pos+(i/maxsteps)*direction);\n      vec4 ppt = projectionMatrix*pt;\n      float ptdepth = ppt.z/ppt.w;\n      ptdepth = ((gl_DepthRange.diff * ptdepth) + gl_DepthRange.near + gl_DepthRange.far) / 2.0;\n      if(ptdepth > depth) break;\n      pt = textmat*pt;\n      if(pt.x >= -0.01 && pt.y >= -0.01 && pt.z >= -0.01 && pt.x <= 1.01 && pt.y <= 1.01 && pt.z <= 1.01) {\n         seengood = true;\n      } else if(seengood) {\n         break;\n      }\n      if( pt.x < -0.01 || pt.x > 1.01 || pt.y < -0.01 || pt.y > 1.01 || pt.z < -0.01 || pt.z > 1.01  ){\n          color.a = 0.0;\n          continue;\n      }\n      else {\n         float val = texture(data, pt.zyx).r;\n         if(isinf(val)) continue;\n         float cval = (val-transfermin)/(transfermax-transfermin);\n         vec4 val_color = texture(colormap, vec2(cval,0.5));\n         color.rgb = color.rgb*color.a + (1.0-color.a)*val_color.a*val_color.rgb;\n         color.a += (1.0 - color.a) * val_color.a; \n         if(color.a > 0.0) color.rgb /= color.a;\n      }\n    }\n}",
            "vertexShader": "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nin vec3 position;\nout vec4 mvPosition;\nvoid main() {\n    mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    gl_Position = projectionMatrix*mvPosition;\n}",
            "uniforms": {
                "opacity": {
                    "type": "f",
                    "value": 1
                },
                "fogColor": {
                    "type": "c",
                    "value": {
                        "r": 1,
                        "g": 1,
                        "b": 1
                    }
                },
                "fogNear": {
                    "type": "f",
                    "value": 1
                },
                "fogFar": {
                    "type": "f",
                    "value": 2000
                },
                "data": {
                    "type": "i",
                    "value": 3
                },
                "colormap": {
                    "type": "i",
                    "value": 4
                },
                "depthmap": {
                    "type": "i",
                    "value": 5
                },
                "step": {
                    "type": "f",
                    "value": 1
                },
                "maxdepth": {
                    "type": "f",
                    "value": 100
                },
                "subsamples": {
                    "type": "f",
                    "value": 5
                },
                "textmat": {
                    "type": "mat4",
                    "value": []
                },
                "projinv": {
                    "type": "mat4",
                    "value": []
                },
                "transfermin": {
                    "type": "f",
                    "value": -0.2
                },
                "transfermax": {
                    "type": "f",
                    "value": 0.2
                }
            }
        },
        "screen": {
            "fragmentShader": "uniform sampler2D colormap;\nvarying highp vec2 vTexCoords;\nuniform vec2 dimensions;\n//DEFINEFRAGCOLOR\nvoid main (void) {\n   gl_FragColor = texture2D(colormap, vTexCoords);\n}",
            "vertexShader": "attribute vec2 vertexPosition;\nvarying highp vec2 vTexCoords;\nconst vec2 scale = vec2(0.5, 0.5);\nvoid main() {\n   vTexCoords  = vertexPosition * scale + scale; // scale vertex attribute to [0,1] range\n   gl_Position = vec4(vertexPosition, 0.0, 1.0);\n}",
            "uniforms": {}
        },
        "screenaa": {
            "fragmentShader": "uniform sampler2D colormap;\nvarying highp vec2 vTexCoords;\nuniform vec2 dimensions;\n// Basic FXAA implementation based on the code on geeks3d.com \n#define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#define FXAA_SPAN_MAX     8.0\nvec4 applyFXAA(vec2 fragCoord, sampler2D tex)\n{\n    vec4 color;\n    vec2 inverseVP = vec2(1.0 / dimensions.x, 1.0 / dimensions.y);\n    vec3 rgbNW = texture2D(tex, fragCoord + vec2(-1.0, -1.0) * inverseVP).xyz;\n    vec3 rgbNE = texture2D(tex, fragCoord + vec2(1.0, -1.0) * inverseVP).xyz;\n    vec3 rgbSW = texture2D(tex, fragCoord + vec2(-1.0, 1.0) * inverseVP).xyz;\n    vec3 rgbSE = texture2D(tex, fragCoord + vec2(1.0, 1.0) * inverseVP).xyz;\n    vec3 rgbM  = texture2D(tex, fragCoord  * inverseVP).xyz;\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                        (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n            max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n            dir * rcpDirMin)) * inverseVP;\n    vec3 rgbA = 0.5 * (\n        texture2D(tex, fragCoord + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture2D(tex, fragCoord  + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture2D(tex, fragCoord  + dir * -0.5).xyz +\n        texture2D(tex, fragCoord  + dir * 0.5).xyz);\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, 1.0);\n    else\n        color = vec4(rgbB, 1.0);\n    return color;\n}\n//DEFINEFRAGCOLOR\nvoid main (void) {\n   gl_FragColor = applyFXAA(vTexCoords, colormap);\n}",
            "vertexShader": "attribute vec2 vertexPosition;\nvarying highp vec2 vTexCoords;\nconst vec2 scale = vec2(0.5, 0.5);\nvoid main() {\n   vTexCoords  = vertexPosition * scale + scale; // scale vertex attribute to [0,1] range\n   gl_Position = vec4(vertexPosition, 0.0, 1.0);\n}",
            "uniforms": {}
        }
    },
    "htmlColors": {
        "aliceblue": 15792383,
        "antiquewhite": 16444375,
        "aqua": 65535,
        "aquamarine": 8388564,
        "azure": 15794175,
        "beige": 16119260,
        "bisque": 16770244,
        "black": 0,
        "blanchedalmond": 16772045,
        "blue": 255,
        "blueviolet": 9055202,
        "brown": 10824234,
        "burlywood": 14596231,
        "cadetblue": 6266528,
        "chartreuse": 8388352,
        "chocolate": 13789470,
        "coral": 16744272,
        "cornflowerblue": 6591981,
        "cornsilk": 16775388,
        "crimson": 14423100,
        "cyan": 65535,
        "darkblue": 139,
        "darkcyan": 35723,
        "darkgoldenrod": 12092939,
        "darkgray": 11119017,
        "darkgrey": 11119017,
        "darkgreen": 25600,
        "darkkhaki": 12433259,
        "darkmagenta": 9109643,
        "darkolivegreen": 5597999,
        "darkorange": 16747520,
        "darkorchid": 10040012,
        "darkred": 9109504,
        "darksalmon": 15308410,
        "darkseagreen": 9419919,
        "darkslateblue": 4734347,
        "darkslategray": 3100495,
        "darkslategrey": 3100495,
        "darkturquoise": 52945,
        "darkviolet": 9699539,
        "deeppink": 16716947,
        "deepskyblue": 49151,
        "dimgray": 6908265,
        "dimgrey": 6908265,
        "dodgerblue": 2003199,
        "firebrick": 11674146,
        "floralwhite": 16775920,
        "forestgreen": 2263842,
        "fuchsia": 16711935,
        "gainsboro": 14474460,
        "ghostwhite": 16316671,
        "gold": 16766720,
        "goldenrod": 14329120,
        "gray": 8421504,
        "grey": 8421504,
        "green": 32768,
        "greenyellow": 11403055,
        "honeydew": 15794160,
        "hotpink": 16738740,
        "indianred": 13458524,
        "indigo": 4915330,
        "ivory": 16777200,
        "khaki": 15787660,
        "lavender": 15132410,
        "lavenderblush": 16773365,
        "lawngreen": 8190976,
        "lemonchiffon": 16775885,
        "lightblue": 11393254,
        "lightcoral": 15761536,
        "lightcyan": 14745599,
        "lightgoldenrodyellow": 16448210,
        "lightgray": 13882323,
        "lightgrey": 13882323,
        "lightgreen": 9498256,
        "lightpink": 16758465,
        "lightsalmon": 16752762,
        "lightseagreen": 2142890,
        "lightskyblue": 8900346,
        "lightslategray": 7833753,
        "lightslategrey": 7833753,
        "lightsteelblue": 11584734,
        "lightyellow": 16777184,
        "lime": 65280,
        "limegreen": 3329330,
        "linen": 16445670,
        "magenta": 16711935,
        "maroon": 8388608,
        "mediumaquamarine": 6737322,
        "mediumblue": 205,
        "mediumorchid": 12211667,
        "mediumpurple": 9662683,
        "mediumseagreen": 3978097,
        "mediumslateblue": 8087790,
        "mediumspringgreen": 64154,
        "mediumturquoise": 4772300,
        "mediumvioletred": 13047173,
        "midnightblue": 1644912,
        "mintcream": 16121850,
        "mistyrose": 16770273,
        "moccasin": 16770229,
        "navajowhite": 16768685,
        "navy": 128,
        "oldlace": 16643558,
        "olive": 8421376,
        "olivedrab": 7048739,
        "orange": 16753920,
        "orangered": 16729344,
        "orchid": 14315734,
        "palegoldenrod": 15657130,
        "palegreen": 10025880,
        "paleturquoise": 11529966,
        "palevioletred": 14381203,
        "papayawhip": 16773077,
        "peachpuff": 16767673,
        "peru": 13468991,
        "pink": 16761035,
        "plum": 14524637,
        "powderblue": 11591910,
        "purple": 8388736,
        "rebeccapurple": 6697881,
        "red": 16711680,
        "rosybrown": 12357519,
        "royalblue": 4286945,
        "saddlebrown": 9127187,
        "salmon": 16416882,
        "sandybrown": 16032864,
        "seagreen": 3050327,
        "seashell": 16774638,
        "sienna": 10506797,
        "silver": 12632256,
        "skyblue": 8900331,
        "slateblue": 6970061,
        "slategray": 7372944,
        "slategrey": 7372944,
        "snow": 16775930,
        "springgreen": 65407,
        "steelblue": 4620980,
        "tan": 13808780,
        "teal": 32896,
        "thistle": 14204888,
        "tomato": 16737095,
        "turquoise": 4251856,
        "violet": 15631086,
        "wheat": 16113331,
        "white": 16777215,
        "whitesmoke": 16119285,
        "yellow": 16776960,
        "yellowgreen": 10145074
    },
    "CC": {
        "rgbRegEx": {},
        "cache": {
            "0": {
                "r": 0,
                "g": 0,
                "b": 0
            },
            "47046": {
                "r": 0,
                "g": 0.7176470588235294,
                "b": 0.7764705882352941
            },
            "49087": {
                "r": 0,
                "g": 0.7490196078431373,
                "b": 0.7490196078431373
            },
            "50871": {
                "r": 0,
                "g": 0.7764705882352941,
                "b": 0.7176470588235294
            },
            "110541": {
                "r": 0.00392156862745098,
                "g": 0.6862745098039216,
                "b": 0.803921568627451
            },
            "118191": {
                "r": 0.00392156862745098,
                "g": 0.803921568627451,
                "b": 0.6862745098039216
            },
            "173780": {
                "r": 0.00784313725490196,
                "g": 0.6509803921568628,
                "b": 0.8313725490196079
            },
            "185510": {
                "r": 0.00784313725490196,
                "g": 0.8313725490196079,
                "b": 0.6509803921568628
            },
            "302811": {
                "r": 0.01568627450980392,
                "g": 0.6196078431372549,
                "b": 0.8588235294117647
            },
            "318366": {
                "r": 0.01568627450980392,
                "g": 0.8588235294117647,
                "b": 0.6196078431372549
            },
            "497121": {
                "r": 0.027450980392156862,
                "g": 0.5843137254901961,
                "b": 0.8823529411764706
            },
            "516501": {
                "r": 0.027450980392156862,
                "g": 0.8823529411764706,
                "b": 0.5843137254901961
            },
            "756966": {
                "r": 0.043137254901960784,
                "g": 0.5490196078431373,
                "b": 0.9019607843137255
            },
            "779916": {
                "r": 0.043137254901960784,
                "g": 0.9019607843137255,
                "b": 0.5490196078431373
            },
            "951275": {
                "r": 0.054901960784313725,
                "g": 0.5137254901960784,
                "b": 0.9215686274509803
            },
            "977795": {
                "r": 0.054901960784313725,
                "g": 0.9215686274509803,
                "b": 0.5137254901960784
            },
            "1276912": {
                "r": 0.07450980392156863,
                "g": 0.4823529411764706,
                "b": 0.9411764705882353
            },
            "1306747": {
                "r": 0.07450980392156863,
                "g": 0.9411764705882353,
                "b": 0.4823529411764706
            },
            "1602291": {
                "r": 0.09411764705882353,
                "g": 0.4470588235294118,
                "b": 0.9529411764705882
            },
            "1635186": {
                "r": 0.09411764705882353,
                "g": 0.9529411764705882,
                "b": 0.4470588235294118
            },
            "1927671": {
                "r": 0.11372549019607843,
                "g": 0.4117647058823529,
                "b": 0.9686274509803922
            },
            "1963881": {
                "r": 0.11372549019607843,
                "g": 0.9686274509803922,
                "b": 0.4117647058823529
            },
            "2318586": {
                "r": 0.13725490196078433,
                "g": 0.3764705882352941,
                "b": 0.9803921568627451
            },
            "2357856": {
                "r": 0.13725490196078433,
                "g": 0.9803921568627451,
                "b": 0.3764705882352941
            },
            "2775292": {
                "r": 0.16470588235294117,
                "g": 0.34509803921568627,
                "b": 0.9882352941176471
            },
            "2817112": {
                "r": 0.16470588235294117,
                "g": 0.9882352941176471,
                "b": 0.34509803921568627
            },
            "3231741": {
                "r": 0.19215686274509805,
                "g": 0.30980392156862746,
                "b": 0.9921568627450981
            },
            "3276111": {
                "r": 0.19215686274509805,
                "g": 0.9921568627450981,
                "b": 0.30980392156862746
            },
            "3688446": {
                "r": 0.2196078431372549,
                "g": 0.2784313725490196,
                "b": 0.996078431372549
            },
            "3735111": {
                "r": 0.2196078431372549,
                "g": 0.996078431372549,
                "b": 0.2784313725490196
            },
            "4145151": {
                "r": 0.24705882352941178,
                "g": 0.24705882352941178,
                "b": 1
            },
            "4194111": {
                "r": 0.24705882352941178,
                "g": 1,
                "b": 0.24705882352941178
            },
            "4667646": {
                "r": 0.2784313725490196,
                "g": 0.2196078431372549,
                "b": 0.996078431372549
            },
            "4718136": {
                "r": 0.2784313725490196,
                "g": 0.996078431372549,
                "b": 0.2196078431372549
            },
            "5190141": {
                "r": 0.30980392156862746,
                "g": 0.19215686274509805,
                "b": 0.9921568627450981
            },
            "5242161": {
                "r": 0.30980392156862746,
                "g": 0.9921568627450981,
                "b": 0.19215686274509805
            },
            "5778172": {
                "r": 0.34509803921568627,
                "g": 0.16470588235294117,
                "b": 0.9882352941176471
            },
            "5831722": {
                "r": 0.34509803921568627,
                "g": 0.9882352941176471,
                "b": 0.16470588235294117
            },
            "6300666": {
                "r": 0.3764705882352941,
                "g": 0.13725490196078433,
                "b": 0.9803921568627451
            },
            "6355491": {
                "r": 0.3764705882352941,
                "g": 0.9803921568627451,
                "b": 0.13725490196078433
            },
            "6888951": {
                "r": 0.4117647058823529,
                "g": 0.11372549019607843,
                "b": 0.9686274509803922
            },
            "6944541": {
                "r": 0.4117647058823529,
                "g": 0.9686274509803922,
                "b": 0.11372549019607843
            },
            "7477491": {
                "r": 0.4470588235294118,
                "g": 0.09411764705882353,
                "b": 0.9529411764705882
            },
            "7533336": {
                "r": 0.4470588235294118,
                "g": 0.9529411764705882,
                "b": 0.09411764705882353
            },
            "8066032": {
                "r": 0.4823529411764706,
                "g": 0.07450980392156863,
                "b": 0.9411764705882353
            },
            "8122387": {
                "r": 0.4823529411764706,
                "g": 0.9411764705882353,
                "b": 0.07450980392156863
            },
            "8589035": {
                "r": 0.5137254901960784,
                "g": 0.054901960784313725,
                "b": 0.9215686274509803
            },
            "8645390": {
                "r": 0.5137254901960784,
                "g": 0.9215686274509803,
                "b": 0.054901960784313725
            },
            "9178086": {
                "r": 0.5490196078431373,
                "g": 0.043137254901960784,
                "b": 0.9019607843137255
            },
            "9233931": {
                "r": 0.5490196078431373,
                "g": 0.9019607843137255,
                "b": 0.043137254901960784
            },
            "9766881": {
                "r": 0.5843137254901961,
                "g": 0.027450980392156862,
                "b": 0.8823529411764706
            },
            "9822471": {
                "r": 0.5843137254901961,
                "g": 0.8823529411764706,
                "b": 0.027450980392156862
            },
            "10355931": {
                "r": 0.6196078431372549,
                "g": 0.01568627450980392,
                "b": 0.8588235294117647
            },
            "10410756": {
                "r": 0.6196078431372549,
                "g": 0.8588235294117647,
                "b": 0.01568627450980392
            },
            "10879700": {
                "r": 0.6509803921568628,
                "g": 0.00784313725490196,
                "b": 0.8313725490196079
            },
            "10933250": {
                "r": 0.6509803921568628,
                "g": 0.8313725490196079,
                "b": 0.00784313725490196
            },
            "11469261": {
                "r": 0.6862745098039216,
                "g": 0.00392156862745098,
                "b": 0.803921568627451
            },
            "11521281": {
                "r": 0.6862745098039216,
                "g": 0.803921568627451,
                "b": 0.00392156862745098
            },
            "11993286": {
                "r": 0.7176470588235294,
                "g": 0,
                "b": 0.7764705882352941
            },
            "12043776": {
                "r": 0.7176470588235294,
                "g": 0.7764705882352941,
                "b": 0
            },
            "12517567": {
                "r": 0.7490196078431373,
                "g": 0,
                "b": 0.7490196078431373
            },
            "12566272": {
                "r": 0.7490196078431373,
                "g": 0.7490196078431373,
                "b": 0
            },
            "13022976": {
                "r": 0.7764705882352941,
                "g": 0.7176470588235294,
                "b": 0
            },
            "13479681": {
                "r": 0.803921568627451,
                "g": 0.6862745098039216,
                "b": 0.00392156862745098
            },
            "13936130": {
                "r": 0.8313725490196079,
                "g": 0.6509803921568628,
                "b": 0.00784313725490196
            },
            "14392836": {
                "r": 0.8588235294117647,
                "g": 0.6196078431372549,
                "b": 0.01568627450980392
            },
            "14783751": {
                "r": 0.8823529411764706,
                "g": 0.5843137254901961,
                "b": 0.027450980392156862
            },
            "15109131": {
                "r": 0.9019607843137255,
                "g": 0.5490196078431373,
                "b": 0.043137254901960784
            },
            "15434510": {
                "r": 0.9215686274509803,
                "g": 0.5137254901960784,
                "b": 0.054901960784313725
            },
            "15760147": {
                "r": 0.9411764705882353,
                "g": 0.4823529411764706,
                "b": 0.07450980392156863
            },
            "15954456": {
                "r": 0.9529411764705882,
                "g": 0.4470588235294118,
                "b": 0.09411764705882353
            },
            "16214301": {
                "r": 0.9686274509803922,
                "g": 0.4117647058823529,
                "b": 0.11372549019607843
            },
            "16408611": {
                "r": 0.9803921568627451,
                "g": 0.3764705882352941,
                "b": 0.13725490196078433
            },
            "16537642": {
                "r": 0.9882352941176471,
                "g": 0.34509803921568627,
                "b": 0.16470588235294117
            },
            "16600881": {
                "r": 0.9921568627450981,
                "g": 0.30980392156862746,
                "b": 0.19215686274509805
            },
            "16664376": {
                "r": 0.996078431372549,
                "g": 0.2784313725490196,
                "b": 0.2196078431372549
            },
            "16727871": {
                "r": 1,
                "g": 0.24705882352941178,
                "b": 0.24705882352941178
            },
            "16777215": {
                "r": 1,
                "g": 1,
                "b": 1
            }
        }
    },
    "ssColors": {
        "pyMol": {
            "h": 16711680,
            "s": 16776960,
            "c": 65280
        },
        "Jmol": {
            "h": 16711808,
            "s": 16762880,
            "c": 16777215
        }
    },
    "elementColors": {
        "defaultColor": 16716947,
        "Jmol": {
            "H": 16777215,
            "He": 14286847,
            "HE": 14286847,
            "Li": 13402367,
            "LI": 13402367,
            "Be": 12779264,
            "BE": 12779264,
            "B": 16758197,
            "C": 9474192,
            "N": 3166456,
            "O": 16715021,
            "F": 9494608,
            "Ne": 11789301,
            "NE": 11789301,
            "Na": 11230450,
            "NA": 11230450,
            "Mg": 9109248,
            "MG": 9109248,
            "Al": 12560038,
            "AL": 12560038,
            "Si": 15780000,
            "SI": 15780000,
            "P": 16744448,
            "S": 16777008,
            "Cl": 2093087,
            "CL": 2093087,
            "Ar": 8442339,
            "AR": 8442339,
            "K": 9388244,
            "Ca": 4062976,
            "CA": 4062976,
            "Sc": 15132390,
            "SC": 15132390,
            "Ti": 12567239,
            "TI": 12567239,
            "V": 10921643,
            "Cr": 9083335,
            "CR": 9083335,
            "Mn": 10255047,
            "MN": 10255047,
            "Fe": 14706227,
            "FE": 14706227,
            "Co": 15765664,
            "CO": 15765664,
            "Ni": 5296208,
            "NI": 5296208,
            "Cu": 13140019,
            "CU": 13140019,
            "Zn": 8224944,
            "ZN": 8224944,
            "Ga": 12750735,
            "GA": 12750735,
            "Ge": 6721423,
            "GE": 6721423,
            "As": 12419299,
            "AS": 12419299,
            "Se": 16752896,
            "SE": 16752896,
            "Br": 10889513,
            "BR": 10889513,
            "Kr": 6076625,
            "KR": 6076625,
            "Rb": 7351984,
            "RB": 7351984,
            "Sr": 65280,
            "SR": 65280,
            "Y": 9764863,
            "Zr": 9756896,
            "ZR": 9756896,
            "Nb": 7586505,
            "NB": 7586505,
            "Mo": 5551541,
            "MO": 5551541,
            "Tc": 3907230,
            "TC": 3907230,
            "Ru": 2396047,
            "RU": 2396047,
            "Rh": 687500,
            "RH": 687500,
            "Pd": 27013,
            "PD": 27013,
            "Ag": 12632256,
            "AG": 12632256,
            "Cd": 16767375,
            "CD": 16767375,
            "In": 10909043,
            "IN": 10909043,
            "Sn": 6717568,
            "SN": 6717568,
            "Sb": 10380213,
            "SB": 10380213,
            "Te": 13924864,
            "TE": 13924864,
            "I": 9699476,
            "Xe": 4366000,
            "XE": 4366000,
            "Cs": 5707663,
            "CS": 5707663,
            "Ba": 51456,
            "BA": 51456,
            "La": 7394559,
            "LA": 7394559,
            "Ce": 16777159,
            "CE": 16777159,
            "Pr": 14286791,
            "PR": 14286791,
            "Nd": 13107143,
            "ND": 13107143,
            "Pm": 10747847,
            "PM": 10747847,
            "Sm": 9437127,
            "SM": 9437127,
            "Eu": 6422471,
            "EU": 6422471,
            "Gd": 4587463,
            "GD": 4587463,
            "Tb": 3211207,
            "TB": 3211207,
            "Dy": 2097095,
            "DY": 2097095,
            "Ho": 65436,
            "HO": 65436,
            "Er": 58997,
            "ER": 58997,
            "Tm": 54354,
            "TM": 54354,
            "Yb": 48952,
            "YB": 48952,
            "Lu": 43812,
            "LU": 43812,
            "Hf": 5096191,
            "HF": 5096191,
            "Ta": 5089023,
            "TA": 5089023,
            "W": 2200790,
            "Re": 2522539,
            "RE": 2522539,
            "Os": 2516630,
            "OS": 2516630,
            "Ir": 1528967,
            "IR": 1528967,
            "Pt": 13684960,
            "PT": 13684960,
            "Au": 16765219,
            "AU": 16765219,
            "Hg": 12105936,
            "HG": 12105936,
            "Tl": 10900557,
            "TL": 10900557,
            "Pb": 5724513,
            "PB": 5724513,
            "Bi": 10375093,
            "BI": 10375093,
            "Po": 11230208,
            "PO": 11230208,
            "At": 7688005,
            "AT": 7688005,
            "Rn": 4358806,
            "RN": 4358806,
            "Fr": 4325478,
            "FR": 4325478,
            "Ra": 32000,
            "RA": 32000,
            "Ac": 7384058,
            "AC": 7384058,
            "Th": 47871,
            "TH": 47871,
            "Pa": 41471,
            "PA": 41471,
            "U": 36863,
            "Np": 33023,
            "NP": 33023,
            "Pu": 27647,
            "PU": 27647,
            "Am": 5528818,
            "AM": 5528818,
            "Cm": 7888099,
            "CM": 7888099,
            "Bk": 9064419,
            "BK": 9064419,
            "Cf": 10565332,
            "CF": 10565332,
            "Es": 11739092,
            "ES": 11739092,
            "Fm": 11739066,
            "FM": 11739066,
            "Md": 11734438,
            "MD": 11734438,
            "No": 12389767,
            "NO": 12389767,
            "Lr": 13041766,
            "LR": 13041766,
            "Rf": 13369433,
            "RF": 13369433,
            "Db": 13697103,
            "DB": 13697103,
            "Sg": 14221381,
            "SG": 14221381,
            "Bh": 14680120,
            "BH": 14680120,
            "Hs": 15073326,
            "HS": 15073326,
            "Mt": 15400998,
            "MT": 15400998
        },
        "rasmol": {
            "H": 16777215,
            "He": 16761035,
            "HE": 16761035,
            "Li": 11674146,
            "LI": 11674146,
            "B": 65280,
            "C": 13158600,
            "N": 9408511,
            "O": 15728640,
            "F": 14329120,
            "Na": 255,
            "NA": 255,
            "Mg": 2263842,
            "MG": 2263842,
            "Al": 8421520,
            "AL": 8421520,
            "Si": 14329120,
            "SI": 14329120,
            "P": 16753920,
            "S": 16762930,
            "Cl": 65280,
            "CL": 65280,
            "Ca": 8421520,
            "CA": 8421520,
            "Ti": 8421520,
            "TI": 8421520,
            "Cr": 8421520,
            "CR": 8421520,
            "Mn": 8421520,
            "MN": 8421520,
            "Fe": 16753920,
            "FE": 16753920,
            "Ni": 10824234,
            "NI": 10824234,
            "Cu": 10824234,
            "CU": 10824234,
            "Zn": 10824234,
            "ZN": 10824234,
            "Br": 10824234,
            "BR": 10824234,
            "Ag": 8421520,
            "AG": 8421520,
            "I": 10494192,
            "Ba": 16753920,
            "BA": 16753920,
            "Au": 14329120,
            "AU": 14329120
        },
        "defaultColors": {
            "H": 16777215,
            "He": 16761035,
            "HE": 16761035,
            "Li": 11674146,
            "LI": 11674146,
            "B": 65280,
            "C": 13158600,
            "N": 9408511,
            "O": 15728640,
            "F": 14329120,
            "Na": 255,
            "NA": 255,
            "Mg": 2263842,
            "MG": 2263842,
            "Al": 8421520,
            "AL": 8421520,
            "Si": 14329120,
            "SI": 14329120,
            "P": 16753920,
            "S": 16762930,
            "Cl": 65280,
            "CL": 65280,
            "Ca": 8421520,
            "CA": 8421520,
            "Ti": 8421520,
            "TI": 8421520,
            "Cr": 8421520,
            "CR": 8421520,
            "Mn": 8421520,
            "MN": 8421520,
            "Fe": 16753920,
            "FE": 16753920,
            "Ni": 10824234,
            "NI": 10824234,
            "Cu": 10824234,
            "CU": 10824234,
            "Zn": 10824234,
            "ZN": 10824234,
            "Br": 10824234,
            "BR": 10824234,
            "Ag": 8421520,
            "AG": 8421520,
            "I": 10494192,
            "Ba": 16753920,
            "BA": 16753920,
            "Au": 14329120,
            "AU": 14329120
        },
        "greenCarbon": {
            "H": 16777215,
            "He": 16761035,
            "HE": 16761035,
            "Li": 11674146,
            "LI": 11674146,
            "B": 65280,
            "C": 65280,
            "N": 9408511,
            "O": 15728640,
            "F": 14329120,
            "Na": 255,
            "NA": 255,
            "Mg": 2263842,
            "MG": 2263842,
            "Al": 8421520,
            "AL": 8421520,
            "Si": 14329120,
            "SI": 14329120,
            "P": 16753920,
            "S": 16762930,
            "Cl": 65280,
            "CL": 65280,
            "Ca": 8421520,
            "CA": 8421520,
            "Ti": 8421520,
            "TI": 8421520,
            "Cr": 8421520,
            "CR": 8421520,
            "Mn": 8421520,
            "MN": 8421520,
            "Fe": 16753920,
            "FE": 16753920,
            "Ni": 10824234,
            "NI": 10824234,
            "Cu": 10824234,
            "CU": 10824234,
            "Zn": 10824234,
            "ZN": 10824234,
            "Br": 10824234,
            "BR": 10824234,
            "Ag": 8421520,
            "AG": 8421520,
            "I": 10494192,
            "Ba": 16753920,
            "BA": 16753920,
            "Au": 14329120,
            "AU": 14329120
        },
        "cyanCarbon": {
            "H": 16777215,
            "He": 16761035,
            "HE": 16761035,
            "Li": 11674146,
            "LI": 11674146,
            "B": 65280,
            "C": 65535,
            "N": 9408511,
            "O": 15728640,
            "F": 14329120,
            "Na": 255,
            "NA": 255,
            "Mg": 2263842,
            "MG": 2263842,
            "Al": 8421520,
            "AL": 8421520,
            "Si": 14329120,
            "SI": 14329120,
            "P": 16753920,
            "S": 16762930,
            "Cl": 65280,
            "CL": 65280,
            "Ca": 8421520,
            "CA": 8421520,
            "Ti": 8421520,
            "TI": 8421520,
            "Cr": 8421520,
            "CR": 8421520,
            "Mn": 8421520,
            "MN": 8421520,
            "Fe": 16753920,
            "FE": 16753920,
            "Ni": 10824234,
            "NI": 10824234,
            "Cu": 10824234,
            "CU": 10824234,
            "Zn": 10824234,
            "ZN": 10824234,
            "Br": 10824234,
            "BR": 10824234,
            "Ag": 8421520,
            "AG": 8421520,
            "I": 10494192,
            "Ba": 16753920,
            "BA": 16753920,
            "Au": 14329120,
            "AU": 14329120
        },
        "magentaCarbon": {
            "H": 16777215,
            "He": 16761035,
            "HE": 16761035,
            "Li": 11674146,
            "LI": 11674146,
            "B": 65280,
            "C": 16711935,
            "N": 9408511,
            "O": 15728640,
            "F": 14329120,
            "Na": 255,
            "NA": 255,
            "Mg": 2263842,
            "MG": 2263842,
            "Al": 8421520,
            "AL": 8421520,
            "Si": 14329120,
            "SI": 14329120,
            "P": 16753920,
            "S": 16762930,
            "Cl": 65280,
            "CL": 65280,
            "Ca": 8421520,
            "CA": 8421520,
            "Ti": 8421520,
            "TI": 8421520,
            "Cr": 8421520,
            "CR": 8421520,
            "Mn": 8421520,
            "MN": 8421520,
            "Fe": 16753920,
            "FE": 16753920,
            "Ni": 10824234,
            "NI": 10824234,
            "Cu": 10824234,
            "CU": 10824234,
            "Zn": 10824234,
            "ZN": 10824234,
            "Br": 10824234,
            "BR": 10824234,
            "Ag": 8421520,
            "AG": 8421520,
            "I": 10494192,
            "Ba": 16753920,
            "BA": 16753920,
            "Au": 14329120,
            "AU": 14329120
        },
        "yellowCarbon": {
            "H": 16777215,
            "He": 16761035,
            "HE": 16761035,
            "Li": 11674146,
            "LI": 11674146,
            "B": 65280,
            "C": 16776960,
            "N": 9408511,
            "O": 15728640,
            "F": 14329120,
            "Na": 255,
            "NA": 255,
            "Mg": 2263842,
            "MG": 2263842,
            "Al": 8421520,
            "AL": 8421520,
            "Si": 14329120,
            "SI": 14329120,
            "P": 16753920,
            "S": 16762930,
            "Cl": 65280,
            "CL": 65280,
            "Ca": 8421520,
            "CA": 8421520,
            "Ti": 8421520,
            "TI": 8421520,
            "Cr": 8421520,
            "CR": 8421520,
            "Mn": 8421520,
            "MN": 8421520,
            "Fe": 16753920,
            "FE": 16753920,
            "Ni": 10824234,
            "NI": 10824234,
            "Cu": 10824234,
            "CU": 10824234,
            "Zn": 10824234,
            "ZN": 10824234,
            "Br": 10824234,
            "BR": 10824234,
            "Ag": 8421520,
            "AG": 8421520,
            "I": 10494192,
            "Ba": 16753920,
            "BA": 16753920,
            "Au": 14329120,
            "AU": 14329120
        },
        "whiteCarbon": {
            "H": 16777215,
            "He": 16761035,
            "HE": 16761035,
            "Li": 11674146,
            "LI": 11674146,
            "B": 65280,
            "C": 16777215,
            "N": 9408511,
            "O": 15728640,
            "F": 14329120,
            "Na": 255,
            "NA": 255,
            "Mg": 2263842,
            "MG": 2263842,
            "Al": 8421520,
            "AL": 8421520,
            "Si": 14329120,
            "SI": 14329120,
            "P": 16753920,
            "S": 16762930,
            "Cl": 65280,
            "CL": 65280,
            "Ca": 8421520,
            "CA": 8421520,
            "Ti": 8421520,
            "TI": 8421520,
            "Cr": 8421520,
            "CR": 8421520,
            "Mn": 8421520,
            "MN": 8421520,
            "Fe": 16753920,
            "FE": 16753920,
            "Ni": 10824234,
            "NI": 10824234,
            "Cu": 10824234,
            "CU": 10824234,
            "Zn": 10824234,
            "ZN": 10824234,
            "Br": 10824234,
            "BR": 10824234,
            "Ag": 8421520,
            "AG": 8421520,
            "I": 10494192,
            "Ba": 16753920,
            "BA": 16753920,
            "Au": 14329120,
            "AU": 14329120
        },
        "orangeCarbon": {
            "H": 16777215,
            "He": 16761035,
            "HE": 16761035,
            "Li": 11674146,
            "LI": 11674146,
            "B": 65280,
            "C": 16753920,
            "N": 9408511,
            "O": 15728640,
            "F": 14329120,
            "Na": 255,
            "NA": 255,
            "Mg": 2263842,
            "MG": 2263842,
            "Al": 8421520,
            "AL": 8421520,
            "Si": 14329120,
            "SI": 14329120,
            "P": 16753920,
            "S": 16762930,
            "Cl": 65280,
            "CL": 65280,
            "Ca": 8421520,
            "CA": 8421520,
            "Ti": 8421520,
            "TI": 8421520,
            "Cr": 8421520,
            "CR": 8421520,
            "Mn": 8421520,
            "MN": 8421520,
            "Fe": 16753920,
            "FE": 16753920,
            "Ni": 10824234,
            "NI": 10824234,
            "Cu": 10824234,
            "CU": 10824234,
            "Zn": 10824234,
            "ZN": 10824234,
            "Br": 10824234,
            "BR": 10824234,
            "Ag": 8421520,
            "AG": 8421520,
            "I": 10494192,
            "Ba": 16753920,
            "BA": 16753920,
            "Au": 14329120,
            "AU": 14329120
        },
        "purpleCarbon": {
            "H": 16777215,
            "He": 16761035,
            "HE": 16761035,
            "Li": 11674146,
            "LI": 11674146,
            "B": 65280,
            "C": 8388736,
            "N": 9408511,
            "O": 15728640,
            "F": 14329120,
            "Na": 255,
            "NA": 255,
            "Mg": 2263842,
            "MG": 2263842,
            "Al": 8421520,
            "AL": 8421520,
            "Si": 14329120,
            "SI": 14329120,
            "P": 16753920,
            "S": 16762930,
            "Cl": 65280,
            "CL": 65280,
            "Ca": 8421520,
            "CA": 8421520,
            "Ti": 8421520,
            "TI": 8421520,
            "Cr": 8421520,
            "CR": 8421520,
            "Mn": 8421520,
            "MN": 8421520,
            "Fe": 16753920,
            "FE": 16753920,
            "Ni": 10824234,
            "NI": 10824234,
            "Cu": 10824234,
            "CU": 10824234,
            "Zn": 10824234,
            "ZN": 10824234,
            "Br": 10824234,
            "BR": 10824234,
            "Ag": 8421520,
            "AG": 8421520,
            "I": 10494192,
            "Ba": 16753920,
            "BA": 16753920,
            "Au": 14329120,
            "AU": 14329120
        },
        "blueCarbon": {
            "H": 16777215,
            "He": 16761035,
            "HE": 16761035,
            "Li": 11674146,
            "LI": 11674146,
            "B": 65280,
            "C": 255,
            "N": 9408511,
            "O": 15728640,
            "F": 14329120,
            "Na": 255,
            "NA": 255,
            "Mg": 2263842,
            "MG": 2263842,
            "Al": 8421520,
            "AL": 8421520,
            "Si": 14329120,
            "SI": 14329120,
            "P": 16753920,
            "S": 16762930,
            "Cl": 65280,
            "CL": 65280,
            "Ca": 8421520,
            "CA": 8421520,
            "Ti": 8421520,
            "TI": 8421520,
            "Cr": 8421520,
            "CR": 8421520,
            "Mn": 8421520,
            "MN": 8421520,
            "Fe": 16753920,
            "FE": 16753920,
            "Ni": 10824234,
            "NI": 10824234,
            "Cu": 10824234,
            "CU": 10824234,
            "Zn": 10824234,
            "ZN": 10824234,
            "Br": 10824234,
            "BR": 10824234,
            "Ag": 8421520,
            "AG": 8421520,
            "I": 10494192,
            "Ba": 16753920,
            "BA": 16753920,
            "Au": 14329120,
            "AU": 14329120
        }
    },
    "residues": {
        "amino": {
            "ALA": 13158600,
            "ARG": 1334015,
            "ASN": 56540,
            "ASP": 15075850,
            "CYS": 15132160,
            "GLN": 56540,
            "GLU": 15075850,
            "GLY": 15461355,
            "HIS": 8553170,
            "ILE": 1016335,
            "LEU": 1016335,
            "LYS": 1334015,
            "MET": 15132160,
            "PHE": 3289770,
            "PRO": 14456450,
            "SER": 16422400,
            "THR": 16422400,
            "TRP": 11819700,
            "TYR": 3289770,
            "VAL": 1016335,
            "ASX": 16738740,
            "GLX": 16738740
        },
        "shapely": {
            "ALA": 9240460,
            "ARG": 124,
            "ASN": 16743536,
            "ASP": 10485826,
            "CYS": 16777072,
            "GLN": 16731212,
            "GLU": 6684672,
            "GLY": 16777215,
            "HIS": 7368959,
            "ILE": 19456,
            "LEU": 4546117,
            "LYS": 4671416,
            "MET": 12099650,
            "PHE": 5459026,
            "PRO": 5395026,
            "SER": 16740418,
            "THR": 12078080,
            "TRP": 5195264,
            "TYR": 9203788,
            "VAL": 16747775,
            "ASX": 16711935,
            "GLX": 16711935
        },
        "nucleic": {
            "A": 10526975,
            "G": 16740464,
            "I": 8454143,
            "C": 16747595,
            "T": 10551200,
            "U": 16744576
        }
    },
    "chains": {
        "atom": {
            "A": 12636415,
            "B": 11599792,
            "C": 16761032,
            "D": 16777088,
            "E": 16761087,
            "F": 11596016,
            "G": 16765040,
            "H": 15761536,
            "I": 16113331,
            "J": 49151,
            "K": 13458524,
            "L": 6737322,
            "M": 10145074,
            "N": 15631086,
            "O": 52945,
            "P": 65407,
            "Q": 3978097,
            "R": 139,
            "S": 12433259,
            "T": 25600,
            "U": 8388608,
            "V": 8421376,
            "W": 8388736,
            "X": 32896,
            "Y": 12092939,
            "Z": 11674146
        },
        "hetatm": {
            "A": 9478351,
            "B": 8441752,
            "C": 13602992,
            "D": 13619056,
            "E": 13603023,
            "F": 8437952,
            "G": 13607008,
            "H": 12603504,
            "I": 12955267,
            "J": 42959,
            "K": 11881548,
            "L": 5682578,
            "M": 9090346,
            "N": 12481214,
            "O": 46753,
            "P": 53103,
            "Q": 3447649,
            "R": 187,
            "S": 10854235,
            "T": 37888,
            "U": 11534336,
            "V": 11579392,
            "W": 11534512,
            "X": 45232,
            "Y": 15250963,
            "Z": 12726834
        }
    },
    "builtinColorSchemes": {
        "ssPyMol": {
            "prop": "ss",
            "map": {
                "h": 16711680,
                "s": 16776960,
                "c": 65280
            }
        },
        "ssJmol": {
            "prop": "ss",
            "map": {
                "h": 16711808,
                "s": 16762880,
                "c": 16777215
            }
        },
        "Jmol": {
            "prop": "elem",
            "map": {
                "H": 16777215,
                "He": 14286847,
                "HE": 14286847,
                "Li": 13402367,
                "LI": 13402367,
                "Be": 12779264,
                "BE": 12779264,
                "B": 16758197,
                "C": 9474192,
                "N": 3166456,
                "O": 16715021,
                "F": 9494608,
                "Ne": 11789301,
                "NE": 11789301,
                "Na": 11230450,
                "NA": 11230450,
                "Mg": 9109248,
                "MG": 9109248,
                "Al": 12560038,
                "AL": 12560038,
                "Si": 15780000,
                "SI": 15780000,
                "P": 16744448,
                "S": 16777008,
                "Cl": 2093087,
                "CL": 2093087,
                "Ar": 8442339,
                "AR": 8442339,
                "K": 9388244,
                "Ca": 4062976,
                "CA": 4062976,
                "Sc": 15132390,
                "SC": 15132390,
                "Ti": 12567239,
                "TI": 12567239,
                "V": 10921643,
                "Cr": 9083335,
                "CR": 9083335,
                "Mn": 10255047,
                "MN": 10255047,
                "Fe": 14706227,
                "FE": 14706227,
                "Co": 15765664,
                "CO": 15765664,
                "Ni": 5296208,
                "NI": 5296208,
                "Cu": 13140019,
                "CU": 13140019,
                "Zn": 8224944,
                "ZN": 8224944,
                "Ga": 12750735,
                "GA": 12750735,
                "Ge": 6721423,
                "GE": 6721423,
                "As": 12419299,
                "AS": 12419299,
                "Se": 16752896,
                "SE": 16752896,
                "Br": 10889513,
                "BR": 10889513,
                "Kr": 6076625,
                "KR": 6076625,
                "Rb": 7351984,
                "RB": 7351984,
                "Sr": 65280,
                "SR": 65280,
                "Y": 9764863,
                "Zr": 9756896,
                "ZR": 9756896,
                "Nb": 7586505,
                "NB": 7586505,
                "Mo": 5551541,
                "MO": 5551541,
                "Tc": 3907230,
                "TC": 3907230,
                "Ru": 2396047,
                "RU": 2396047,
                "Rh": 687500,
                "RH": 687500,
                "Pd": 27013,
                "PD": 27013,
                "Ag": 12632256,
                "AG": 12632256,
                "Cd": 16767375,
                "CD": 16767375,
                "In": 10909043,
                "IN": 10909043,
                "Sn": 6717568,
                "SN": 6717568,
                "Sb": 10380213,
                "SB": 10380213,
                "Te": 13924864,
                "TE": 13924864,
                "I": 9699476,
                "Xe": 4366000,
                "XE": 4366000,
                "Cs": 5707663,
                "CS": 5707663,
                "Ba": 51456,
                "BA": 51456,
                "La": 7394559,
                "LA": 7394559,
                "Ce": 16777159,
                "CE": 16777159,
                "Pr": 14286791,
                "PR": 14286791,
                "Nd": 13107143,
                "ND": 13107143,
                "Pm": 10747847,
                "PM": 10747847,
                "Sm": 9437127,
                "SM": 9437127,
                "Eu": 6422471,
                "EU": 6422471,
                "Gd": 4587463,
                "GD": 4587463,
                "Tb": 3211207,
                "TB": 3211207,
                "Dy": 2097095,
                "DY": 2097095,
                "Ho": 65436,
                "HO": 65436,
                "Er": 58997,
                "ER": 58997,
                "Tm": 54354,
                "TM": 54354,
                "Yb": 48952,
                "YB": 48952,
                "Lu": 43812,
                "LU": 43812,
                "Hf": 5096191,
                "HF": 5096191,
                "Ta": 5089023,
                "TA": 5089023,
                "W": 2200790,
                "Re": 2522539,
                "RE": 2522539,
                "Os": 2516630,
                "OS": 2516630,
                "Ir": 1528967,
                "IR": 1528967,
                "Pt": 13684960,
                "PT": 13684960,
                "Au": 16765219,
                "AU": 16765219,
                "Hg": 12105936,
                "HG": 12105936,
                "Tl": 10900557,
                "TL": 10900557,
                "Pb": 5724513,
                "PB": 5724513,
                "Bi": 10375093,
                "BI": 10375093,
                "Po": 11230208,
                "PO": 11230208,
                "At": 7688005,
                "AT": 7688005,
                "Rn": 4358806,
                "RN": 4358806,
                "Fr": 4325478,
                "FR": 4325478,
                "Ra": 32000,
                "RA": 32000,
                "Ac": 7384058,
                "AC": 7384058,
                "Th": 47871,
                "TH": 47871,
                "Pa": 41471,
                "PA": 41471,
                "U": 36863,
                "Np": 33023,
                "NP": 33023,
                "Pu": 27647,
                "PU": 27647,
                "Am": 5528818,
                "AM": 5528818,
                "Cm": 7888099,
                "CM": 7888099,
                "Bk": 9064419,
                "BK": 9064419,
                "Cf": 10565332,
                "CF": 10565332,
                "Es": 11739092,
                "ES": 11739092,
                "Fm": 11739066,
                "FM": 11739066,
                "Md": 11734438,
                "MD": 11734438,
                "No": 12389767,
                "NO": 12389767,
                "Lr": 13041766,
                "LR": 13041766,
                "Rf": 13369433,
                "RF": 13369433,
                "Db": 13697103,
                "DB": 13697103,
                "Sg": 14221381,
                "SG": 14221381,
                "Bh": 14680120,
                "BH": 14680120,
                "Hs": 15073326,
                "HS": 15073326,
                "Mt": 15400998,
                "MT": 15400998
            }
        },
        "amino": {
            "prop": "resn",
            "map": {
                "ALA": 13158600,
                "ARG": 1334015,
                "ASN": 56540,
                "ASP": 15075850,
                "CYS": 15132160,
                "GLN": 56540,
                "GLU": 15075850,
                "GLY": 15461355,
                "HIS": 8553170,
                "ILE": 1016335,
                "LEU": 1016335,
                "LYS": 1334015,
                "MET": 15132160,
                "PHE": 3289770,
                "PRO": 14456450,
                "SER": 16422400,
                "THR": 16422400,
                "TRP": 11819700,
                "TYR": 3289770,
                "VAL": 1016335,
                "ASX": 16738740,
                "GLX": 16738740
            }
        },
        "shapely": {
            "prop": "resn",
            "map": {
                "ALA": 9240460,
                "ARG": 124,
                "ASN": 16743536,
                "ASP": 10485826,
                "CYS": 16777072,
                "GLN": 16731212,
                "GLU": 6684672,
                "GLY": 16777215,
                "HIS": 7368959,
                "ILE": 19456,
                "LEU": 4546117,
                "LYS": 4671416,
                "MET": 12099650,
                "PHE": 5459026,
                "PRO": 5395026,
                "SER": 16740418,
                "THR": 12078080,
                "TRP": 5195264,
                "TYR": 9203788,
                "VAL": 16747775,
                "ASX": 16711935,
                "GLX": 16711935
            }
        },
        "nucleic": {
            "prop": "resn",
            "map": {
                "A": 10526975,
                "G": 16740464,
                "I": 8454143,
                "C": 16747595,
                "T": 10551200,
                "U": 16744576
            }
        },
        "chain": {
            "prop": "chain",
            "map": {
                "A": 12636415,
                "B": 11599792,
                "C": 16761032,
                "D": 16777088,
                "E": 16761087,
                "F": 11596016,
                "G": 16765040,
                "H": 15761536,
                "I": 16113331,
                "J": 49151,
                "K": 13458524,
                "L": 6737322,
                "M": 10145074,
                "N": 15631086,
                "O": 52945,
                "P": 65407,
                "Q": 3978097,
                "R": 139,
                "S": 12433259,
                "T": 25600,
                "U": 8388608,
                "V": 8421376,
                "W": 8388736,
                "X": 32896,
                "Y": 12092939,
                "Z": 11674146
            }
        },
        "rasmol": {
            "prop": "elem",
            "map": {
                "H": 16777215,
                "He": 16761035,
                "HE": 16761035,
                "Li": 11674146,
                "LI": 11674146,
                "B": 65280,
                "C": 13158600,
                "N": 9408511,
                "O": 15728640,
                "F": 14329120,
                "Na": 255,
                "NA": 255,
                "Mg": 2263842,
                "MG": 2263842,
                "Al": 8421520,
                "AL": 8421520,
                "Si": 14329120,
                "SI": 14329120,
                "P": 16753920,
                "S": 16762930,
                "Cl": 65280,
                "CL": 65280,
                "Ca": 8421520,
                "CA": 8421520,
                "Ti": 8421520,
                "TI": 8421520,
                "Cr": 8421520,
                "CR": 8421520,
                "Mn": 8421520,
                "MN": 8421520,
                "Fe": 16753920,
                "FE": 16753920,
                "Ni": 10824234,
                "NI": 10824234,
                "Cu": 10824234,
                "CU": 10824234,
                "Zn": 10824234,
                "ZN": 10824234,
                "Br": 10824234,
                "BR": 10824234,
                "Ag": 8421520,
                "AG": 8421520,
                "I": 10494192,
                "Ba": 16753920,
                "BA": 16753920,
                "Au": 14329120,
                "AU": 14329120
            }
        },
        "default": {
            "prop": "elem",
            "map": {
                "H": 16777215,
                "He": 16761035,
                "HE": 16761035,
                "Li": 11674146,
                "LI": 11674146,
                "B": 65280,
                "C": 13158600,
                "N": 9408511,
                "O": 15728640,
                "F": 14329120,
                "Na": 255,
                "NA": 255,
                "Mg": 2263842,
                "MG": 2263842,
                "Al": 8421520,
                "AL": 8421520,
                "Si": 14329120,
                "SI": 14329120,
                "P": 16753920,
                "S": 16762930,
                "Cl": 65280,
                "CL": 65280,
                "Ca": 8421520,
                "CA": 8421520,
                "Ti": 8421520,
                "TI": 8421520,
                "Cr": 8421520,
                "CR": 8421520,
                "Mn": 8421520,
                "MN": 8421520,
                "Fe": 16753920,
                "FE": 16753920,
                "Ni": 10824234,
                "NI": 10824234,
                "Cu": 10824234,
                "CU": 10824234,
                "Zn": 10824234,
                "ZN": 10824234,
                "Br": 10824234,
                "BR": 10824234,
                "Ag": 8421520,
                "AG": 8421520,
                "I": 10494192,
                "Ba": 16753920,
                "BA": 16753920,
                "Au": 14329120,
                "AU": 14329120
            }
        },
        "greenCarbon": {
            "prop": "elem",
            "map": {
                "H": 16777215,
                "He": 16761035,
                "HE": 16761035,
                "Li": 11674146,
                "LI": 11674146,
                "B": 65280,
                "C": 65280,
                "N": 9408511,
                "O": 15728640,
                "F": 14329120,
                "Na": 255,
                "NA": 255,
                "Mg": 2263842,
                "MG": 2263842,
                "Al": 8421520,
                "AL": 8421520,
                "Si": 14329120,
                "SI": 14329120,
                "P": 16753920,
                "S": 16762930,
                "Cl": 65280,
                "CL": 65280,
                "Ca": 8421520,
                "CA": 8421520,
                "Ti": 8421520,
                "TI": 8421520,
                "Cr": 8421520,
                "CR": 8421520,
                "Mn": 8421520,
                "MN": 8421520,
                "Fe": 16753920,
                "FE": 16753920,
                "Ni": 10824234,
                "NI": 10824234,
                "Cu": 10824234,
                "CU": 10824234,
                "Zn": 10824234,
                "ZN": 10824234,
                "Br": 10824234,
                "BR": 10824234,
                "Ag": 8421520,
                "AG": 8421520,
                "I": 10494192,
                "Ba": 16753920,
                "BA": 16753920,
                "Au": 14329120,
                "AU": 14329120
            }
        },
        "chainHetatm": {
            "prop": "chain",
            "map": {
                "A": 9478351,
                "B": 8441752,
                "C": 13602992,
                "D": 13619056,
                "E": 13603023,
                "F": 8437952,
                "G": 13607008,
                "H": 12603504,
                "I": 12955267,
                "J": 42959,
                "K": 11881548,
                "L": 5682578,
                "M": 9090346,
                "N": 12481214,
                "O": 46753,
                "P": 53103,
                "Q": 3447649,
                "R": 187,
                "S": 10854235,
                "T": 37888,
                "U": 11534336,
                "V": 11579392,
                "W": 11534512,
                "X": 45232,
                "Y": 15250963,
                "Z": 12726834
            }
        },
        "cyanCarbon": {
            "prop": "elem",
            "map": {
                "H": 16777215,
                "He": 16761035,
                "HE": 16761035,
                "Li": 11674146,
                "LI": 11674146,
                "B": 65280,
                "C": 65535,
                "N": 9408511,
                "O": 15728640,
                "F": 14329120,
                "Na": 255,
                "NA": 255,
                "Mg": 2263842,
                "MG": 2263842,
                "Al": 8421520,
                "AL": 8421520,
                "Si": 14329120,
                "SI": 14329120,
                "P": 16753920,
                "S": 16762930,
                "Cl": 65280,
                "CL": 65280,
                "Ca": 8421520,
                "CA": 8421520,
                "Ti": 8421520,
                "TI": 8421520,
                "Cr": 8421520,
                "CR": 8421520,
                "Mn": 8421520,
                "MN": 8421520,
                "Fe": 16753920,
                "FE": 16753920,
                "Ni": 10824234,
                "NI": 10824234,
                "Cu": 10824234,
                "CU": 10824234,
                "Zn": 10824234,
                "ZN": 10824234,
                "Br": 10824234,
                "BR": 10824234,
                "Ag": 8421520,
                "AG": 8421520,
                "I": 10494192,
                "Ba": 16753920,
                "BA": 16753920,
                "Au": 14329120,
                "AU": 14329120
            }
        },
        "magentaCarbon": {
            "prop": "elem",
            "map": {
                "H": 16777215,
                "He": 16761035,
                "HE": 16761035,
                "Li": 11674146,
                "LI": 11674146,
                "B": 65280,
                "C": 16711935,
                "N": 9408511,
                "O": 15728640,
                "F": 14329120,
                "Na": 255,
                "NA": 255,
                "Mg": 2263842,
                "MG": 2263842,
                "Al": 8421520,
                "AL": 8421520,
                "Si": 14329120,
                "SI": 14329120,
                "P": 16753920,
                "S": 16762930,
                "Cl": 65280,
                "CL": 65280,
                "Ca": 8421520,
                "CA": 8421520,
                "Ti": 8421520,
                "TI": 8421520,
                "Cr": 8421520,
                "CR": 8421520,
                "Mn": 8421520,
                "MN": 8421520,
                "Fe": 16753920,
                "FE": 16753920,
                "Ni": 10824234,
                "NI": 10824234,
                "Cu": 10824234,
                "CU": 10824234,
                "Zn": 10824234,
                "ZN": 10824234,
                "Br": 10824234,
                "BR": 10824234,
                "Ag": 8421520,
                "AG": 8421520,
                "I": 10494192,
                "Ba": 16753920,
                "BA": 16753920,
                "Au": 14329120,
                "AU": 14329120
            }
        },
        "purpleCarbon": {
            "prop": "elem",
            "map": {
                "H": 16777215,
                "He": 16761035,
                "HE": 16761035,
                "Li": 11674146,
                "LI": 11674146,
                "B": 65280,
                "C": 8388736,
                "N": 9408511,
                "O": 15728640,
                "F": 14329120,
                "Na": 255,
                "NA": 255,
                "Mg": 2263842,
                "MG": 2263842,
                "Al": 8421520,
                "AL": 8421520,
                "Si": 14329120,
                "SI": 14329120,
                "P": 16753920,
                "S": 16762930,
                "Cl": 65280,
                "CL": 65280,
                "Ca": 8421520,
                "CA": 8421520,
                "Ti": 8421520,
                "TI": 8421520,
                "Cr": 8421520,
                "CR": 8421520,
                "Mn": 8421520,
                "MN": 8421520,
                "Fe": 16753920,
                "FE": 16753920,
                "Ni": 10824234,
                "NI": 10824234,
                "Cu": 10824234,
                "CU": 10824234,
                "Zn": 10824234,
                "ZN": 10824234,
                "Br": 10824234,
                "BR": 10824234,
                "Ag": 8421520,
                "AG": 8421520,
                "I": 10494192,
                "Ba": 16753920,
                "BA": 16753920,
                "Au": 14329120,
                "AU": 14329120
            }
        },
        "whiteCarbon": {
            "prop": "elem",
            "map": {
                "H": 16777215,
                "He": 16761035,
                "HE": 16761035,
                "Li": 11674146,
                "LI": 11674146,
                "B": 65280,
                "C": 16777215,
                "N": 9408511,
                "O": 15728640,
                "F": 14329120,
                "Na": 255,
                "NA": 255,
                "Mg": 2263842,
                "MG": 2263842,
                "Al": 8421520,
                "AL": 8421520,
                "Si": 14329120,
                "SI": 14329120,
                "P": 16753920,
                "S": 16762930,
                "Cl": 65280,
                "CL": 65280,
                "Ca": 8421520,
                "CA": 8421520,
                "Ti": 8421520,
                "TI": 8421520,
                "Cr": 8421520,
                "CR": 8421520,
                "Mn": 8421520,
                "MN": 8421520,
                "Fe": 16753920,
                "FE": 16753920,
                "Ni": 10824234,
                "NI": 10824234,
                "Cu": 10824234,
                "CU": 10824234,
                "Zn": 10824234,
                "ZN": 10824234,
                "Br": 10824234,
                "BR": 10824234,
                "Ag": 8421520,
                "AG": 8421520,
                "I": 10494192,
                "Ba": 16753920,
                "BA": 16753920,
                "Au": 14329120,
                "AU": 14329120
            }
        },
        "orangeCarbon": {
            "prop": "elem",
            "map": {
                "H": 16777215,
                "He": 16761035,
                "HE": 16761035,
                "Li": 11674146,
                "LI": 11674146,
                "B": 65280,
                "C": 16753920,
                "N": 9408511,
                "O": 15728640,
                "F": 14329120,
                "Na": 255,
                "NA": 255,
                "Mg": 2263842,
                "MG": 2263842,
                "Al": 8421520,
                "AL": 8421520,
                "Si": 14329120,
                "SI": 14329120,
                "P": 16753920,
                "S": 16762930,
                "Cl": 65280,
                "CL": 65280,
                "Ca": 8421520,
                "CA": 8421520,
                "Ti": 8421520,
                "TI": 8421520,
                "Cr": 8421520,
                "CR": 8421520,
                "Mn": 8421520,
                "MN": 8421520,
                "Fe": 16753920,
                "FE": 16753920,
                "Ni": 10824234,
                "NI": 10824234,
                "Cu": 10824234,
                "CU": 10824234,
                "Zn": 10824234,
                "ZN": 10824234,
                "Br": 10824234,
                "BR": 10824234,
                "Ag": 8421520,
                "AG": 8421520,
                "I": 10494192,
                "Ba": 16753920,
                "BA": 16753920,
                "Au": 14329120,
                "AU": 14329120
            }
        },
        "yellowCarbon": {
            "prop": "elem",
            "map": {
                "H": 16777215,
                "He": 16761035,
                "HE": 16761035,
                "Li": 11674146,
                "LI": 11674146,
                "B": 65280,
                "C": 16776960,
                "N": 9408511,
                "O": 15728640,
                "F": 14329120,
                "Na": 255,
                "NA": 255,
                "Mg": 2263842,
                "MG": 2263842,
                "Al": 8421520,
                "AL": 8421520,
                "Si": 14329120,
                "SI": 14329120,
                "P": 16753920,
                "S": 16762930,
                "Cl": 65280,
                "CL": 65280,
                "Ca": 8421520,
                "CA": 8421520,
                "Ti": 8421520,
                "TI": 8421520,
                "Cr": 8421520,
                "CR": 8421520,
                "Mn": 8421520,
                "MN": 8421520,
                "Fe": 16753920,
                "FE": 16753920,
                "Ni": 10824234,
                "NI": 10824234,
                "Cu": 10824234,
                "CU": 10824234,
                "Zn": 10824234,
                "ZN": 10824234,
                "Br": 10824234,
                "BR": 10824234,
                "Ag": 8421520,
                "AG": 8421520,
                "I": 10494192,
                "Ba": 16753920,
                "BA": 16753920,
                "Au": 14329120,
                "AU": 14329120
            }
        },
        "blueCaron": {
            "prop": "elem",
            "map": {
                "H": 16777215,
                "He": 16761035,
                "HE": 16761035,
                "Li": 11674146,
                "LI": 11674146,
                "B": 65280,
                "C": 255,
                "N": 9408511,
                "O": 15728640,
                "F": 14329120,
                "Na": 255,
                "NA": 255,
                "Mg": 2263842,
                "MG": 2263842,
                "Al": 8421520,
                "AL": 8421520,
                "Si": 14329120,
                "SI": 14329120,
                "P": 16753920,
                "S": 16762930,
                "Cl": 65280,
                "CL": 65280,
                "Ca": 8421520,
                "CA": 8421520,
                "Ti": 8421520,
                "TI": 8421520,
                "Cr": 8421520,
                "CR": 8421520,
                "Mn": 8421520,
                "MN": 8421520,
                "Fe": 16753920,
                "FE": 16753920,
                "Ni": 10824234,
                "NI": 10824234,
                "Cu": 10824234,
                "CU": 10824234,
                "Zn": 10824234,
                "ZN": 10824234,
                "Br": 10824234,
                "BR": 10824234,
                "Ag": 8421520,
                "AG": 8421520,
                "I": 10494192,
                "Ba": 16753920,
                "BA": 16753920,
                "Au": 14329120,
                "AU": 14329120
            }
        }
    },
    "CAP": {
        "NONE": 0,
        "FLAT": 1,
        "ROUND": 2
    },
    "GLDraw": {},
    "ShapeIDCount": 0,
    "LabelCount": 0,
    "MarchingCube": {
        "edgeTable": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2816,
            0,
            0,
            0,
            1792,
            0,
            3328,
            3584,
            3840,
            0,
            0,
            0,
            138,
            0,
            21,
            0,
            134,
            0,
            0,
            0,
            652,
            0,
            2067,
            3865,
            3600,
            0,
            0,
            0,
            42,
            0,
            0,
            0,
            294,
            0,
            0,
            21,
            28,
            0,
            3875,
            1049,
            3360,
            0,
            168,
            162,
            170,
            0,
            645,
            2475,
            2210,
            0,
            687,
            293,
            172,
            4010,
            3747,
            3497,
            3232,
            0,
            0,
            0,
            0,
            0,
            69,
            0,
            900,
            0,
            0,
            0,
            1792,
            138,
            131,
            1608,
            1920,
            0,
            81,
            0,
            2074,
            84,
            85,
            84,
            86,
            0,
            81,
            0,
            3676,
            330,
            1105,
            1881,
            1616,
            0,
            0,
            0,
            42,
            0,
            69,
            0,
            502,
            0,
            0,
            21,
            3580,
            138,
            2035,
            1273,
            1520,
            2816,
            104,
            2337,
            106,
            840,
            581,
            367,
            102,
            2816,
            3695,
            3429,
            3180,
            1898,
            1635,
            1385,
            1120,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            3910,
            0,
            0,
            69,
            588,
            42,
            2083,
            41,
            2880,
            0,
            0,
            0,
            1722,
            0,
            2293,
            4095,
            3830,
            0,
            255,
            757,
            764,
            2538,
            2291,
            3065,
            2800,
            0,
            0,
            81,
            338,
            0,
            3925,
            1119,
            3414,
            84,
            855,
            85,
            340,
            2130,
            2899,
            89,
            2384,
            1792,
            712,
            194,
            1162,
            4036,
            3781,
            3535,
            3270,
            708,
            719,
            197,
            204,
            3018,
            2755,
            2505,
            2240,
            0,
            0,
            0,
            0,
            168,
            420,
            168,
            1958,
            162,
            162,
            676,
            2988,
            170,
            163,
            680,
            928,
            3328,
            3096,
            3328,
            3642,
            52,
            53,
            1855,
            1590,
            2340,
            2111,
            2869,
            2620,
            298,
            51,
            825,
            560,
            3584,
            3584,
            3090,
            3482,
            1668,
            1941,
            1183,
            1430,
            146,
            2975,
            2069,
            2460,
            154,
            915,
            153,
            400,
            3840,
            3592,
            3329,
            3082,
            1796,
            1541,
            1295,
            1030,
            2818,
            2575,
            2309,
            2060,
            778,
            515,
            265,
            0
        ],
        "triTable": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                11,
                9,
                8
            ],
            [],
            [],
            [],
            [
                8,
                10,
                9
            ],
            [],
            [
                10,
                8,
                11
            ],
            [
                9,
                11,
                10
            ],
            [
                8,
                10,
                9,
                8,
                11,
                10
            ],
            [],
            [],
            [],
            [
                1,
                7,
                3
            ],
            [],
            [
                4,
                2,
                0
            ],
            [],
            [
                2,
                1,
                7
            ],
            [],
            [],
            [],
            [
                2,
                7,
                3,
                2,
                9,
                7
            ],
            [],
            [
                1,
                4,
                11,
                1,
                0,
                4
            ],
            [
                3,
                8,
                0,
                11,
                9,
                4,
                11,
                10,
                9
            ],
            [
                4,
                11,
                9,
                11,
                10,
                9
            ],
            [],
            [],
            [],
            [
                5,
                3,
                1
            ],
            [],
            [],
            [],
            [
                2,
                5,
                8,
                2,
                1,
                5
            ],
            [],
            [],
            [
                2,
                4,
                0
            ],
            [
                3,
                2,
                4
            ],
            [],
            [
                0,
                9,
                1,
                8,
                10,
                5,
                8,
                11,
                10
            ],
            [
                3,
                4,
                0,
                3,
                10,
                4
            ],
            [
                5,
                8,
                10,
                8,
                11,
                10
            ],
            [],
            [
                3,
                5,
                7
            ],
            [
                7,
                1,
                5
            ],
            [
                1,
                7,
                3,
                1,
                5,
                7
            ],
            [],
            [
                9,
                2,
                0,
                9,
                7,
                2
            ],
            [
                0,
                3,
                8,
                1,
                7,
                11,
                1,
                5,
                7
            ],
            [
                11,
                1,
                7,
                1,
                5,
                7
            ],
            [],
            [
                9,
                1,
                0,
                5,
                3,
                2,
                5,
                7,
                3
            ],
            [
                8,
                2,
                5,
                8,
                0,
                2
            ],
            [
                2,
                5,
                3,
                5,
                7,
                3
            ],
            [
                3,
                9,
                1,
                3,
                8,
                9,
                7,
                11,
                10,
                7,
                10,
                5
            ],
            [
                9,
                1,
                0,
                10,
                7,
                11,
                10,
                5,
                7
            ],
            [
                3,
                8,
                0,
                7,
                10,
                5,
                7,
                11,
                10
            ],
            [
                11,
                5,
                7,
                11,
                10,
                5
            ],
            [],
            [],
            [],
            [],
            [],
            [
                0,
                6,
                2
            ],
            [],
            [
                7,
                2,
                9,
                7,
                9,
                8
            ],
            [],
            [],
            [],
            [
                8,
                10,
                9
            ],
            [
                7,
                1,
                3
            ],
            [
                7,
                1,
                0
            ],
            [
                6,
                9,
                3,
                6,
                10,
                9
            ],
            [
                7,
                10,
                8,
                10,
                9,
                8
            ],
            [],
            [
                6,
                0,
                4
            ],
            [],
            [
                11,
                1,
                4,
                11,
                3,
                1
            ],
            [
                2,
                4,
                6
            ],
            [
                2,
                0,
                4,
                2,
                4,
                6
            ],
            [
                2,
                4,
                6
            ],
            [
                1,
                4,
                2,
                4,
                6,
                2
            ],
            [],
            [
                6,
                0,
                4
            ],
            [],
            [
                2,
                11,
                3,
                6,
                9,
                4,
                6,
                10,
                9
            ],
            [
                8,
                6,
                1,
                8,
                1,
                3
            ],
            [
                10,
                0,
                6,
                0,
                4,
                6
            ],
            [
                8,
                0,
                3,
                9,
                6,
                10,
                9,
                4,
                6
            ],
            [
                10,
                4,
                6,
                10,
                9,
                4
            ],
            [],
            [],
            [],
            [
                5,
                3,
                1
            ],
            [],
            [
                0,
                6,
                2
            ],
            [],
            [
                7,
                4,
                8,
                5,
                2,
                1,
                5,
                6,
                2
            ],
            [],
            [],
            [
                2,
                4,
                0
            ],
            [
                7,
                4,
                8,
                2,
                11,
                3,
                10,
                5,
                6
            ],
            [
                7,
                1,
                3
            ],
            [
                5,
                6,
                10,
                0,
                9,
                1,
                8,
                7,
                4
            ],
            [
                5,
                6,
                10,
                7,
                0,
                3,
                7,
                4,
                0
            ],
            [
                10,
                5,
                6,
                4,
                8,
                7
            ],
            [
                9,
                11,
                8
            ],
            [
                3,
                5,
                6
            ],
            [
                0,
                5,
                11,
                0,
                11,
                8
            ],
            [
                6,
                3,
                5,
                3,
                1,
                5
            ],
            [
                3,
                9,
                6,
                3,
                8,
                9
            ],
            [
                9,
                6,
                0,
                6,
                2,
                0
            ],
            [
                0,
                3,
                8,
                2,
                5,
                6,
                2,
                1,
                5
            ],
            [
                1,
                6,
                2,
                1,
                5,
                6
            ],
            [
                9,
                11,
                8
            ],
            [
                1,
                0,
                9,
                6,
                10,
                5,
                11,
                3,
                2
            ],
            [
                6,
                10,
                5,
                2,
                8,
                0,
                2,
                11,
                8
            ],
            [
                3,
                2,
                11,
                10,
                5,
                6
            ],
            [
                10,
                5,
                6,
                9,
                3,
                8,
                9,
                1,
                3
            ],
            [
                0,
                9,
                1,
                5,
                6,
                10
            ],
            [
                8,
                0,
                3,
                10,
                5,
                6
            ],
            [
                10,
                5,
                6
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                10,
                2,
                9,
                11,
                6,
                9,
                8,
                11
            ],
            [],
            [],
            [
                6,
                0,
                2
            ],
            [
                3,
                6,
                9,
                3,
                2,
                6
            ],
            [
                3,
                5,
                1
            ],
            [
                0,
                5,
                1,
                0,
                11,
                5
            ],
            [
                0,
                3,
                5
            ],
            [
                6,
                9,
                11,
                9,
                8,
                11
            ],
            [],
            [],
            [],
            [
                4,
                5,
                9,
                7,
                1,
                10,
                7,
                3,
                1
            ],
            [],
            [
                11,
                6,
                7,
                2,
                4,
                5,
                2,
                0,
                4
            ],
            [
                11,
                6,
                7,
                8,
                0,
                3,
                1,
                10,
                2,
                9,
                4,
                5
            ],
            [
                6,
                7,
                11,
                1,
                10,
                2,
                9,
                4,
                5
            ],
            [],
            [
                4,
                1,
                0,
                4,
                5,
                1,
                6,
                7,
                3,
                6,
                3,
                2
            ],
            [
                9,
                4,
                5,
                0,
                6,
                7,
                0,
                2,
                6
            ],
            [
                4,
                5,
                9,
                6,
                3,
                2,
                6,
                7,
                3
            ],
            [
                6,
                7,
                11,
                5,
                3,
                8,
                5,
                1,
                3
            ],
            [
                6,
                7,
                11,
                4,
                1,
                0,
                4,
                5,
                1
            ],
            [
                4,
                5,
                9,
                3,
                8,
                0,
                11,
                6,
                7
            ],
            [
                9,
                4,
                5,
                7,
                11,
                6
            ],
            [],
            [],
            [
                0,
                6,
                4
            ],
            [
                8,
                6,
                4,
                8,
                1,
                6
            ],
            [],
            [
                0,
                10,
                2,
                0,
                9,
                10,
                4,
                8,
                11,
                4,
                11,
                6
            ],
            [
                10,
                2,
                1,
                6,
                0,
                3,
                6,
                4,
                0
            ],
            [
                10,
                2,
                1,
                11,
                4,
                8,
                11,
                6,
                4
            ],
            [
                4,
                2,
                6
            ],
            [
                1,
                0,
                9,
                2,
                4,
                8,
                2,
                6,
                4
            ],
            [
                2,
                4,
                0,
                2,
                6,
                4
            ],
            [
                8,
                2,
                4,
                2,
                6,
                4
            ],
            [
                11,
                4,
                1,
                11,
                6,
                4
            ],
            [
                0,
                9,
                1,
                4,
                11,
                6,
                4,
                8,
                11
            ],
            [
                3,
                6,
                0,
                6,
                4,
                0
            ],
            [
                8,
                6,
                4,
                8,
                11,
                6
            ],
            [
                10,
                8,
                9
            ],
            [
                6,
                3,
                9,
                6,
                7,
                3
            ],
            [
                6,
                7,
                1
            ],
            [
                10,
                7,
                1,
                7,
                3,
                1
            ],
            [
                7,
                11,
                6,
                8,
                10,
                2,
                8,
                9,
                10
            ],
            [
                11,
                6,
                7,
                10,
                0,
                9,
                10,
                2,
                0
            ],
            [
                2,
                1,
                10,
                7,
                11,
                6,
                8,
                0,
                3
            ],
            [
                1,
                10,
                2,
                6,
                7,
                11
            ],
            [
                7,
                2,
                6,
                7,
                9,
                2
            ],
            [
                1,
                0,
                9,
                3,
                6,
                7,
                3,
                2,
                6
            ],
            [
                7,
                0,
                6,
                0,
                2,
                6
            ],
            [
                2,
                7,
                3,
                2,
                6,
                7
            ],
            [
                7,
                11,
                6,
                3,
                9,
                1,
                3,
                8,
                9
            ],
            [
                9,
                1,
                0,
                11,
                6,
                7
            ],
            [
                0,
                3,
                8,
                11,
                6,
                7
            ],
            [
                11,
                6,
                7
            ],
            [],
            [],
            [],
            [],
            [
                5,
                3,
                7
            ],
            [
                8,
                5,
                2,
                8,
                7,
                5
            ],
            [
                5,
                3,
                7
            ],
            [
                1,
                10,
                2,
                5,
                8,
                7,
                5,
                9,
                8
            ],
            [
                1,
                7,
                5
            ],
            [
                1,
                7,
                5
            ],
            [
                9,
                2,
                7,
                9,
                7,
                5
            ],
            [
                11,
                3,
                2,
                8,
                5,
                9,
                8,
                7,
                5
            ],
            [
                1,
                3,
                7,
                1,
                7,
                5
            ],
            [
                0,
                7,
                1,
                7,
                5,
                1
            ],
            [
                9,
                3,
                5,
                3,
                7,
                5
            ],
            [
                9,
                7,
                5,
                9,
                8,
                7
            ],
            [
                8,
                10,
                11
            ],
            [
                3,
                4,
                10,
                3,
                10,
                11
            ],
            [
                8,
                10,
                11
            ],
            [
                5,
                9,
                4,
                1,
                11,
                3,
                1,
                10,
                11
            ],
            [
                2,
                4,
                5
            ],
            [
                5,
                2,
                4,
                2,
                0,
                4
            ],
            [
                0,
                3,
                8,
                5,
                9,
                4,
                10,
                2,
                1
            ],
            [
                2,
                1,
                10,
                9,
                4,
                5
            ],
            [
                2,
                8,
                5,
                2,
                11,
                8
            ],
            [
                3,
                2,
                11,
                1,
                4,
                5,
                1,
                0,
                4
            ],
            [
                9,
                4,
                5,
                8,
                2,
                11,
                8,
                0,
                2
            ],
            [
                11,
                3,
                2,
                9,
                4,
                5
            ],
            [
                8,
                5,
                3,
                5,
                1,
                3
            ],
            [
                5,
                0,
                4,
                5,
                1,
                0
            ],
            [
                3,
                8,
                0,
                4,
                5,
                9
            ],
            [
                9,
                4,
                5
            ],
            [
                11,
                9,
                10
            ],
            [
                11,
                9,
                10
            ],
            [
                1,
                11,
                4,
                1,
                10,
                11
            ],
            [
                8,
                7,
                4,
                11,
                1,
                10,
                11,
                3,
                1
            ],
            [
                2,
                7,
                9,
                2,
                9,
                10
            ],
            [
                4,
                8,
                7,
                0,
                10,
                2,
                0,
                9,
                10
            ],
            [
                2,
                1,
                10,
                0,
                7,
                4,
                0,
                3,
                7
            ],
            [
                10,
                2,
                1,
                8,
                7,
                4
            ],
            [
                1,
                7,
                4
            ],
            [
                3,
                2,
                11,
                4,
                8,
                7,
                9,
                1,
                0
            ],
            [
                11,
                4,
                2,
                4,
                0,
                2
            ],
            [
                2,
                11,
                3,
                7,
                4,
                8
            ],
            [
                4,
                1,
                7,
                1,
                3,
                7
            ],
            [
                1,
                0,
                9,
                8,
                7,
                4
            ],
            [
                3,
                4,
                0,
                3,
                7,
                4
            ],
            [
                8,
                7,
                4
            ],
            [
                8,
                9,
                10,
                8,
                10,
                11
            ],
            [
                3,
                9,
                11,
                9,
                10,
                11
            ],
            [
                0,
                10,
                8,
                10,
                11,
                8
            ],
            [
                10,
                3,
                1,
                10,
                11,
                3
            ],
            [
                2,
                8,
                10,
                8,
                9,
                10
            ],
            [
                9,
                2,
                0,
                9,
                10,
                2
            ],
            [
                8,
                0,
                3,
                1,
                10,
                2
            ],
            [
                10,
                2,
                1
            ],
            [
                1,
                11,
                9,
                11,
                8,
                9
            ],
            [
                11,
                3,
                2,
                0,
                9,
                1
            ],
            [
                11,
                0,
                2,
                11,
                8,
                0
            ],
            [
                11,
                3,
                2
            ],
            [
                8,
                1,
                3,
                8,
                9,
                1
            ],
            [
                9,
                1,
                0
            ],
            [
                8,
                0,
                3
            ],
            []
        ]
    },
    "Parsers": {},
    "partialCharges": {
        "ALA:N": -0.15,
        "ALA:CA": 0.1,
        "ALA:CB": 0,
        "ALA:C": 0.6,
        "ALA:O": -0.55,
        "ARG:N": -0.15,
        "ARG:CA": 0.1,
        "ARG:CB": 0,
        "ARG:CG": 0,
        "ARG:CD": 0.1,
        "ARG:NE": -0.1,
        "ARG:CZ": 0.5,
        "ARG:NH1": 0.25,
        "ARG:NH2": 0.25,
        "ARG:C": 0.6,
        "ARG:O": -0.55,
        "ASN:N": -0.15,
        "ASN:CA": 0.1,
        "ASN:CB": 0,
        "ASN:CG": 0.55,
        "ASN:OD1": -0.55,
        "ASN:ND2": 0,
        "ASN:C": 0.6,
        "ASN:O": -0.55,
        "ASP:N": -0.15,
        "ASP:CA": 0.1,
        "ASP:CB": 0,
        "ASP:CG": 0.14,
        "ASP:OD1": -0.57,
        "ASP:OD2": -0.57,
        "ASP:C": 0.6,
        "ASP:O": -0.55,
        "CYS:N": -0.15,
        "CYS:CA": 0.1,
        "CYS:CB": 0.19,
        "CYS:SG": -0.19,
        "CYS:C": 0.6,
        "CYS:O": -0.55,
        "GLN:N": -0.15,
        "GLN:CA": 0.1,
        "GLN:CB": 0,
        "GLN:CG": 0,
        "GLN:CD": 0.55,
        "GLN:OE1": -0.55,
        "GLN:NE2": 0,
        "GLN:C": 0.6,
        "GLN:O": -0.55,
        "GLU:N": -0.15,
        "GLU:CA": 0.1,
        "GLU:CB": 0,
        "GLU:CG": 0,
        "GLU:CD": 0.14,
        "GLU:OE1": -0.57,
        "GLU:OE2": -0.57,
        "GLU:C": 0.6,
        "GLU:O": -0.55,
        "GLY:N": -0.15,
        "GLY:CA": 0.1,
        "GLY:C": 0.6,
        "GLY:O": -0.55,
        "HIS:N": -0.15,
        "HIS:CA": 0.1,
        "HIS:CB": 0,
        "HIS:CG": 0.1,
        "HIS:ND1": -0.1,
        "HIS:CD2": 0.1,
        "HIS:NE2": -0.4,
        "HIS:CE1": 0.3,
        "HIS:C": 0.6,
        "HIS:O": -0.55,
        "ILE:N": -0.15,
        "ILE:CA": 0.1,
        "ILE:CB": 0,
        "ILE:CG2": 0,
        "ILE:CG1": 0,
        "ILE:CD": 0,
        "ILE:C": 0.6,
        "ILE:O": -0.55,
        "LEU:N": -0.15,
        "LEU:CA": 0.1,
        "LEU:CB": 0,
        "LEU:CG": 0,
        "LEU:CD1": 0,
        "LEU:CD2": 0,
        "LEU:C": 0.6,
        "LEU:O": -0.55,
        "LYS:N": -0.15,
        "LYS:CA": 0.1,
        "LYS:CB": 0,
        "LYS:CG": 0,
        "LYS:CD": 0,
        "LYS:CE": 0.25,
        "LYS:NZ": 0.75,
        "LYS:C": 0.6,
        "LYS:O": -0.55,
        "MET:N": -0.15,
        "MET:CA": 0.1,
        "MET:CB": 0,
        "MET:CG": 0.06,
        "MET:SD": -0.12,
        "MET:CE": 0.06,
        "MET:C": 0.6,
        "MET:O": -0.55,
        "PHE:N": -0.15,
        "PHE:CA": 0.1,
        "PHE:CB": 0,
        "PHE:CG": 0,
        "PHE:CD1": 0,
        "PHE:CD2": 0,
        "PHE:CE1": 0,
        "PHE:CE2": 0,
        "PHE:CZ": 0,
        "PHE:C": 0.6,
        "PHE:O": -0.55,
        "PRO:N": -0.25,
        "PRO:CD": 0.1,
        "PRO:CA": 0.1,
        "PRO:CB": 0,
        "PRO:CG": 0,
        "PRO:C": 0.6,
        "PRO:O": -0.55,
        "SER:N": -0.15,
        "SER:CA": 0.1,
        "SER:CB": 0.25,
        "SER:OG": -0.25,
        "SER:C": 0.6,
        "SER:O": -0.55,
        "THR:N": -0.15,
        "THR:CA": 0.1,
        "THR:CB": 0.25,
        "THR:OG1": -0.25,
        "THR:CG2": 0,
        "THR:C": 0.6,
        "THR:O": -0.55,
        "TRP:N": -0.15,
        "TRP:CA": 0.1,
        "TRP:CB": 0,
        "TRP:CG": -0.03,
        "TRP:CD2": 0.1,
        "TRP:CE2": -0.04,
        "TRP:CE3": -0.03,
        "TRP:CD1": 0.06,
        "TRP:NE1": -0.06,
        "TRP:CZ2": 0,
        "TRP:CZ3": 0,
        "TRP:CH2": 0,
        "TRP:C": 0.6,
        "TRP:O": -0.55,
        "TYR:N": -0.15,
        "TYR:CA": 0.1,
        "TYR:CB": 0,
        "TYR:CG": 0,
        "TYR:CD1": 0,
        "TYR:CE1": 0,
        "TYR:CD2": 0,
        "TYR:CE2": 0,
        "TYR:CZ": 0.25,
        "TYR:OH": -0.25,
        "TYR:C": 0.6,
        "TYR:O": -0.55,
        "VAL:N": -0.15,
        "VAL:CA": 0.1,
        "VAL:CB": 0,
        "VAL:CG1": 0,
        "VAL:CG2": 0,
        "VAL:C": 0.6,
        "VAL:O": -0.55
    },
    "workerString": "self.onmessage=function(e){var t=e.data,r=t.type;if(r<0)self.atomData=t.atoms,self.volume=t.volume,self.ps=new ProteinSurface;else{var n=self.ps;n.initparm(t.expandedExtent,1!=r,self.volume),n.fillvoxels(self.atomData,t.extendedAtoms),n.buildboundary(),4!==r&&2!==r||(n.fastdistancemap(),n.boundingatom(!1),n.fillvoxelswaals(self.atomData,t.extendedAtoms)),n.marchingcube(r);var i=n.getFacesAndVertices(t.atomsToShow);self.postMessage(i)}}; var ProteinSurface=function(){var e,t,r=0,n=0,i=0,o=1.4,a=2,s=0,l=0,c=0,u=0,d=null,h=null,f=null,p=0,m=0,g=0,v=0,y=0,b=0,x={H:1.2,Li:1.82,Na:2.27,K:2.75,C:1.7,N:1.55,O:1.52,F:1.47,P:1.8,S:1.8,CL:1.75,BR:1.85,SE:1.9,ZN:1.39,CU:1.4,NI:1.63,X:2},w=function(e){return e.elem&&void 0!==x[e.elem]?e.elem:\"X\"},D={},_={},C=[new Int32Array([1,0,0]),new Int32Array([-1,0,0]),new Int32Array([0,1,0]),new Int32Array([0,-1,0]),new Int32Array([0,0,1]),new Int32Array([0,0,-1]),new Int32Array([1,1,0]),new Int32Array([1,-1,0]),new Int32Array([-1,1,0]),new Int32Array([-1,-1,0]),new Int32Array([1,0,1]),new Int32Array([1,0,-1]),new Int32Array([-1,0,1]),new Int32Array([-1,0,-1]),new Int32Array([0,1,1]),new Int32Array([0,1,-1]),new Int32Array([0,-1,1]),new Int32Array([0,-1,-1]),new Int32Array([1,1,1]),new Int32Array([1,1,-1]),new Int32Array([1,-1,1]),new Int32Array([-1,1,1]),new Int32Array([1,-1,-1]),new Int32Array([-1,-1,1]),new Int32Array([-1,1,-1]),new Int32Array([-1,-1,-1])];this.getFacesAndVertices=function(o){var s={};for(let e=0,t=o.length;e<t;e++)s[o[e]]=!0;var l=t;for(let e=0,t=l.length;e<t;e++)l[e].x=l[e].x/a-r,l[e].y=l[e].y/a-n,l[e].z=l[e].z/a-i;var c=[];for(let t=0,r=e.length;t<r;t+=3){var u=e[t],p=e[t+1],m=e[t+2],g=l[u].atomid,v=l[p].atomid,y=l[m].atomid,b=g;v<b&&(b=v),y<b&&(b=y),s[b]&&(u!==p&&p!==m&&u!==m&&(c.push(u),c.push(p),c.push(m)))}return d=null,h=null,f=null,{vertices:l,faces:c}},this.initparm=function(e,t,x){x>1e6&&(a=1);var w=1/a*5.5;p=e[0][0],v=e[1][0],m=e[0][1],y=e[1][1],g=e[0][2],b=e[1][2],t?(p-=o+w,m-=o+w,g-=o+w,v+=o+w,y+=o+w,b+=o+w):(p-=w,m-=w,g-=w,v+=w,y+=w,b+=w),p=Math.floor(p*a)/a,m=Math.floor(m*a)/a,g=Math.floor(g*a)/a,v=Math.ceil(v*a)/a,y=Math.ceil(y*a)/a,b=Math.ceil(b*a)/a,r=-p,n=-m,i=-g,c=Math.ceil(a*(v-p))+1,l=Math.ceil(a*(y-m))+1,s=Math.ceil(a*(b-g))+1,this.boundingatom(t),u=o*a,d=new Uint8Array(c*l*s),h=new Float64Array(c*l*s),f=new Int32Array(c*l*s)},this.boundingatom=function(e){var t,r,n,i=[];for(var s in x)if(x.hasOwnProperty(s)){var l=x[s];i[s]=e?(l+o)*a+.5:l*a+.5,n=i[s]*i[s],_[s]=Math.floor(i[s])+1,D[s]=new Int32Array(_[s]*_[s]);var c=0;for(let e=0;e<_[s];e++)for(let i=0;i<_[s];i++)(t=e*e+i*i)>n?D[s][c]=-1:(r=Math.sqrt(n-t),D[s][c]=Math.floor(r)),c++}},this.fillvoxels=function(e,t){for(let e=0,t=d.length;e<t;e++)d[e]=0,h[e]=-1,f[e]=-1;for(let n in t){var r=e[t[n]];void 0!==r&&this.fillAtom(r,e)}for(let e=0,t=d.length;e<t;e++)1&d[e]&&(d[e]|=2)},this.fillAtom=function(e,t){var o,u,h,p,m,g,v,y,b,x,C,A,S,$,M,k,z,T,L;o=Math.floor(.5+a*(e.x+r)),u=Math.floor(.5+a*(e.y+n)),h=Math.floor(.5+a*(e.z+i));var E=w(e),I=0,F=l*s;for(x=0,L=_[E];x<L;x++)for(C=0;C<L;C++){if(-1!=D[E][I])for(k=-1;k<2;k++)for(z=-1;z<2;z++)for(T=-1;T<2;T++)if(0!==k&&0!==z&&0!==T)for(v=k*x,b=T*C,A=0;A<=D[E][I];A++)if($=u+(y=A*z),M=h+b,!((S=o+v)<0||$<0||M<0||S>=c||$>=l||M>=s)){var R=S*F+$*s+M;if(1&d[R]){var O=t[f[R]];O.serial!=e.serial&&v*v+y*y+b*b<(p=o+v-Math.floor(.5+a*(O.x+r)))*p+(m=u+y-Math.floor(.5+a*(O.y+n)))*m+(g=h+b-Math.floor(.5+a*(O.z+i)))*g&&(f[R]=e.serial)}else d[R]|=1,f[R]=e.serial}I++}},this.fillvoxelswaals=function(e,t){for(let e=0,t=d.length;e<t;e++)d[e]&=-3;for(let r in t){let n=e[t[r]];void 0!==n&&this.fillAtomWaals(n,e)}},this.fillAtomWaals=function(e,t){var o,u,h,p,m,g,v,y,b,x,C,A,S,$,M,k,z,T,L,E=0;o=Math.floor(.5+a*(e.x+r)),u=Math.floor(.5+a*(e.y+n)),h=Math.floor(.5+a*(e.z+i));var I=w(e),F=l*s;for(S=0,L=_[I];S<L;S++)for($=0;$<L;$++){if(-1!=D[I][E])for(k=-1;k<2;k++)for(z=-1;z<2;z++)for(T=-1;T<2;T++)if(0!==k&&0!==z&&0!==T)for(v=k*S,b=T*$,M=0;M<=D[I][E];M++)if(C=u+(y=M*z),A=h+b,!((x=o+v)<0||C<0||A<0||x>=c||C>=l||A>=s)){var R=x*F+C*s+A;if(2&d[R]){var O=t[f[R]];O.serial!=e.serial&&v*v+y*y+b*b<(p=o+v-Math.floor(.5+a*(O.x+r)))*p+(m=u+y-Math.floor(.5+a*(O.y+n)))*m+(g=h+b-Math.floor(.5+a*(O.z+i)))*g&&(f[R]=e.serial)}else d[R]|=2,f[R]=e.serial}E++}},this.buildboundary=function(){var e=l*s;for(let a=0;a<c;a++)for(let u=0;u<s;u++)for(let h=0;h<l;h++){var t=a*e+h*s+u;if(1&d[t])for(var r=0;r<26;){var n=a+C[r][0],i=u+C[r][2],o=h+C[r][1];if(n>-1&&n<c&&o>-1&&o<l&&i>-1&&i<s&&!(1&d[n*e+o*s+i])){d[t]|=4;break}r++}}};var A=function(e,t,r){var n=new Int32Array(e*t*r*3);this.set=function(e,i,o,a){var s=3*((e*t+i)*r+o);n[s]=a.ix,n[s+1]=a.iy,n[s+2]=a.iz},this.get=function(e,i,o){var a=3*((e*t+i)*r+o);return{ix:n[a],iy:n[a+1],iz:n[a+2]}}};this.fastdistancemap=function(){var e,t,r,n,i,o=new A(c,l,s),f=l*s,p=u*u,m=[],g=[];for(e=0;e<c;e++)for(t=0;t<l;t++)for(r=0;r<s;r++)if(d[i=e*f+t*s+r]&=-3,1&d[i]&&4&d[i]){var v={ix:e,iy:t,iz:r};o.set(e,t,r,v),m.push(v),h[i]=0,d[i]|=2,d[i]&=-5}do{for(g=this.fastoneshell(m,o),m=[],e=0,n=g.length;e<n;e++)i=f*g[e].ix+s*g[e].iy+g[e].iz,d[i]&=-5,h[i]<=1.0404*p&&m.push({ix:g[e].ix,iy:g[e].iy,iz:g[e].iz})}while(0!==m.length);m=[],g=[],o=null;var y=a-.5;y<0&&(y=0);var b=p-.5/(.1+y);for(e=0;e<c;e++)for(t=0;t<l;t++)for(r=0;r<s;r++)d[i=e*f+t*s+r]&=-5,1&d[i]&&(2&d[i]&&!(2&d[i]&&h[i]>=b)||(d[i]|=4))},this.fastoneshell=function(e,t){var r,n,i,o,a,u,f,p,m,g,v,y,b=[];if(0===e.length)return b;var x={ix:-1,iy:-1,iz:-1},w=l*s;for(f=0,m=e.length;f<m;f++)for(r=e[f].ix,n=e[f].iy,i=e[f].iz,v=t.get(r,n,i),p=0;p<6;p++)x.ix=r+C[p][0],x.iy=n+C[p][1],x.iz=i+C[p][2],x.ix<c&&x.ix>-1&&x.iy<l&&x.iy>-1&&x.iz<s&&x.iz>-1&&(y=x.ix*w+s*x.iy+x.iz,1&d[y]&&!(2&d[y])?(t.set(x.ix,x.iy,i+C[p][2],v),g=(o=x.ix-v.ix)*o+(a=x.iy-v.iy)*a+(u=x.iz-v.iz)*u,h[y]=g,d[y]|=2,d[y]|=4,b.push({ix:x.ix,iy:x.iy,iz:x.iz})):1&d[y]&&2&d[y]&&(g=(o=x.ix-v.ix)*o+(a=x.iy-v.iy)*a+(u=x.iz-v.iz)*u)<h[y]&&(t.set(x.ix,x.iy,x.iz,v),h[y]=g,4&d[y]||(d[y]|=4,b.push({ix:x.ix,iy:x.iy,iz:x.iz}))));for(f=0,m=e.length;f<m;f++)for(r=e[f].ix,n=e[f].iy,i=e[f].iz,v=t.get(r,n,i),p=6;p<18;p++)x.ix=r+C[p][0],x.iy=n+C[p][1],x.iz=i+C[p][2],x.ix<c&&x.ix>-1&&x.iy<l&&x.iy>-1&&x.iz<s&&x.iz>-1&&(y=x.ix*w+s*x.iy+x.iz,1&d[y]&&!(2&d[y])?(t.set(x.ix,x.iy,i+C[p][2],v),g=(o=x.ix-v.ix)*o+(a=x.iy-v.iy)*a+(u=x.iz-v.iz)*u,h[y]=g,d[y]|=2,d[y]|=4,b.push({ix:x.ix,iy:x.iy,iz:x.iz})):1&d[y]&&2&d[y]&&(g=(o=x.ix-v.ix)*o+(a=x.iy-v.iy)*a+(u=x.iz-v.iz)*u)<h[y]&&(t.set(x.ix,x.iy,x.iz,v),h[y]=g,4&d[y]||(d[y]|=4,b.push({ix:x.ix,iy:x.iy,iz:x.iz}))));for(f=0,m=e.length;f<m;f++)for(r=e[f].ix,n=e[f].iy,i=e[f].iz,v=t.get(r,n,i),p=18;p<26;p++)x.ix=r+C[p][0],x.iy=n+C[p][1],x.iz=i+C[p][2],x.ix<c&&x.ix>-1&&x.iy<l&&x.iy>-1&&x.iz<s&&x.iz>-1&&(y=x.ix*w+s*x.iy+x.iz,1&d[y]&&!(2&d[y])?(t.set(x.ix,x.iy,i+C[p][2],v),g=(o=x.ix-v.ix)*o+(a=x.iy-v.iy)*a+(u=x.iz-v.iz)*u,h[y]=g,d[y]|=2,d[y]|=4,b.push({ix:x.ix,iy:x.iy,iz:x.iz})):1&d[y]&&2&d[y]&&(g=(o=x.ix-v.ix)*o+(a=x.iy-v.iy)*a+(u=x.iz-v.iz)*u)<h[y]&&(t.set(x.ix,x.iy,x.iz,v),h[y]=g,4&d[y]||(d[y]|=4,b.push({ix:x.ix,iy:x.iy,iz:x.iz}))));return b},this.marchingcubeinit=function(e){for(var t=0,r=d.length;t<r;t++)1==e?d[t]&=-5:4==e?(d[t]&=-3,4&d[t]&&(d[t]|=2),d[t]&=-5):2==e?4&d[t]&&2&d[t]?d[t]&=-5:4&d[t]&&!(2&d[t])&&(d[t]|=2):3==e&&(d[t]&=-5)},this.marchingcube=function(r){this.marchingcubeinit(r),t=[],e=[],MarchingCube.march(d,t,e,{smooth:1,nX:c,nY:l,nZ:s});for(var n=l*s,i=0,o=t.length;i<o;i++)t[i].atomid=f[t[i].x*n+s*t[i].y+t[i].z];MarchingCube.laplacianSmooth(1,t,e)}},MarchingCube=(function(){var e,t,r,n,i={};return i.march=function(i,o,a,s){var l=!!s.fulltable,c=s.hasOwnProperty(\"origin\")&&s.origin.hasOwnProperty(\"x\")?s.origin:{x:0,y:0,z:0},u=!!s.voxel,d=s.matrix,h=s.nX||0,f=s.nY||0,p=s.nZ||0,m=s.scale||1,g=null;g=s.unitCube?s.unitCube:{x:m,y:m,z:m};var v,y,b=new Int32Array(h*f*p);for(v=0,y=b.length;v<y;++v)b[v]=-1;var x=function(e,t,r,n,i,a){var s={x:0,y:0,z:0},l=i;!!!(n&1<<i)&&!!(n&1<<a)&&(l=a),1&l&&r++,2&l&&t++,4&l&&e++,d?s={x:(s=(s=new $3Dmol.Vector3(e,t,r)).applyMatrix4(d)).x,y:s.y,z:s.z}:(s.x=c.x+g.x*e,s.y=c.y+g.y*t,s.z=c.z+g.z*r);var h=(f*e+t)*p+r;return u?(o.push(s),o.length-1):(b[h]<0&&(b[h]=o.length,o.push(s)),b[h])},w=new Int32Array(12),D=l?t:e,_=l?n:r;for(v=0;v<h-1;++v)for(var C=0;C<f-1;++C)for(var A=0;A<p-1;++A){for(var S=0,$=0;$<8;++$){S|=!!(2&i[(f*(v+((4&$)>>2))+C+((2&$)>>1))*p+A+(1&$)])<<$}if(0!==S&&255!==S){var M=D[S];if(0!==M){var k=_[S];1&M&&(w[0]=x(v,C,A,S,0,1)),2&M&&(w[1]=x(v,C,A,S,1,3)),4&M&&(w[2]=x(v,C,A,S,3,2)),8&M&&(w[3]=x(v,C,A,S,2,0)),16&M&&(w[4]=x(v,C,A,S,4,5)),32&M&&(w[5]=x(v,C,A,S,5,7)),64&M&&(w[6]=x(v,C,A,S,7,6)),128&M&&(w[7]=x(v,C,A,S,6,4)),256&M&&(w[8]=x(v,C,A,S,0,4)),512&M&&(w[9]=x(v,C,A,S,1,5)),1024&M&&(w[10]=x(v,C,A,S,3,7)),2048&M&&(w[11]=x(v,C,A,S,2,6));for(var z=0;z<k.length;z+=3){var T=w[k[z]],L=w[k[z+1]],E=w[k[z+2]];u&&z>=3&&(o.push(o[T]),T=o.length-1,o.push(o[L]),L=o.length-1,o.push(o[E]),E=o.length-1),a.push(T),a.push(L),a.push(E)}}}}},i.laplacianSmooth=function(e,t,r){var n,i,o,a,s,l=new Array(t.length);for(n=0,i=t.length;n<i;n++)l[n]={x:0,y:0,z:0};var c,u=new Array(20);for(n=0;n<20;n++)u[n]=new Array(t.length);for(n=0,i=t.length;n<i;n++)u[0][n]=0;for(n=0,i=r.length/3;n<i;n++){var d=3*n,h=3*n+1,f=3*n+2;for(c=!0,o=0,a=u[0][r[d]];o<a;o++)if(r[h]==u[o+1][r[d]]){c=!1;break}for(c&&(u[0][r[d]]++,u[u[0][r[d]]][r[d]]=r[h]),c=!0,o=0,a=u[0][r[d]];o<a;o++)if(r[f]==u[o+1][r[d]]){c=!1;break}for(c&&(u[0][r[d]]++,u[u[0][r[d]]][r[d]]=r[f]),c=!0,o=0,a=u[0][r[h]];o<a;o++)if(r[d]==u[o+1][r[h]]){c=!1;break}for(c&&(u[0][r[h]]++,u[u[0][r[h]]][r[h]]=r[d]),c=!0,o=0,a=u[0][r[h]];o<a;o++)if(r[f]==u[o+1][r[h]]){c=!1;break}for(c&&(u[0][r[h]]++,u[u[0][r[h]]][r[h]]=r[f]),c=!0,o=0;o<u[0][r[f]];o++)if(r[d]==u[o+1][r[f]]){c=!1;break}for(c&&(u[0][r[f]]++,u[u[0][r[f]]][r[f]]=r[d]),c=!0,o=0,a=u[0][r[f]];o<a;o++)if(r[h]==u[o+1][r[f]]){c=!1;break}c&&(u[0][r[f]]++,u[u[0][r[f]]][r[f]]=r[h])}var p=.5;for(s=0;s<e;s++){for(n=0,i=t.length;n<i;n++)if(u[0][n]<3)l[n].x=t[n].x,l[n].y=t[n].y,l[n].z=t[n].z;else if(3==u[0][n]||4==u[0][n]){for(l[n].x=0,l[n].y=0,l[n].z=0,o=0,a=u[0][n];o<a;o++)l[n].x+=t[u[o+1][n]].x,l[n].y+=t[u[o+1][n]].y,l[n].z+=t[u[o+1][n]].z;l[n].x+=p*t[n].x,l[n].y+=p*t[n].y,l[n].z+=p*t[n].z,l[n].x/=p+u[0][n],l[n].y/=p+u[0][n],l[n].z/=p+u[0][n]}else{for(l[n].x=0,l[n].y=0,l[n].z=0,o=0,a=u[0][n];o<a;o++)l[n].x+=t[u[o+1][n]].x,l[n].y+=t[u[o+1][n]].y,l[n].z+=t[u[o+1][n]].z;l[n].x+=1*t[n].x,l[n].y+=1*t[n].y,l[n].z+=1*t[n].z,l[n].x/=1+u[0][n],l[n].y/=1+u[0][n],l[n].z/=1+u[0][n]}for(n=0,i=t.length;n<i;n++)t[n].x=l[n].x,t[n].y=l[n].y,t[n].z=l[n].z}},i.edgeTable=[0,0,0,0,0,0,0,2816,0,0,0,1792,0,3328,3584,3840,0,0,0,138,0,21,0,134,0,0,0,652,0,2067,3865,3600,0,0,0,42,0,0,0,294,0,0,21,28,0,3875,1049,3360,0,168,162,170,0,645,2475,2210,0,687,293,172,4010,3747,3497,3232,0,0,0,0,0,69,0,900,0,0,0,1792,138,131,1608,1920,0,81,0,2074,84,85,84,86,0,81,0,3676,330,1105,1881,1616,0,0,0,42,0,69,0,502,0,0,21,3580,138,2035,1273,1520,2816,104,2337,106,840,581,367,102,2816,3695,3429,3180,1898,1635,1385,1120,0,0,0,0,0,0,0,3910,0,0,69,588,42,2083,41,2880,0,0,0,1722,0,2293,4095,3830,0,255,757,764,2538,2291,3065,2800,0,0,81,338,0,3925,1119,3414,84,855,85,340,2130,2899,89,2384,1792,712,194,1162,4036,3781,3535,3270,708,719,197,204,3018,2755,2505,2240,0,0,0,0,168,420,168,1958,162,162,676,2988,170,163,680,928,3328,3096,3328,3642,52,53,1855,1590,2340,2111,2869,2620,298,51,825,560,3584,3584,3090,3482,1668,1941,1183,1430,146,2975,2069,2460,154,915,153,400,3840,3592,3329,3082,1796,1541,1295,1030,2818,2575,2309,2060,778,515,265,0],e=new Uint32Array(i.edgeTable),r=i.triTable=[[],[],[],[],[],[],[],[11,9,8],[],[],[],[8,10,9],[],[10,8,11],[9,11,10],[8,10,9,8,11,10],[],[],[],[1,7,3],[],[4,2,0],[],[2,1,7],[],[],[],[2,7,3,2,9,7],[],[1,4,11,1,0,4],[3,8,0,11,9,4,11,10,9],[4,11,9,11,10,9],[],[],[],[5,3,1],[],[],[],[2,5,8,2,1,5],[],[],[2,4,0],[3,2,4],[],[0,9,1,8,10,5,8,11,10],[3,4,0,3,10,4],[5,8,10,8,11,10],[],[3,5,7],[7,1,5],[1,7,3,1,5,7],[],[9,2,0,9,7,2],[0,3,8,1,7,11,1,5,7],[11,1,7,1,5,7],[],[9,1,0,5,3,2,5,7,3],[8,2,5,8,0,2],[2,5,3,5,7,3],[3,9,1,3,8,9,7,11,10,7,10,5],[9,1,0,10,7,11,10,5,7],[3,8,0,7,10,5,7,11,10],[11,5,7,11,10,5],[],[],[],[],[],[0,6,2],[],[7,2,9,7,9,8],[],[],[],[8,10,9],[7,1,3],[7,1,0],[6,9,3,6,10,9],[7,10,8,10,9,8],[],[6,0,4],[],[11,1,4,11,3,1],[2,4,6],[2,0,4,2,4,6],[2,4,6],[1,4,2,4,6,2],[],[6,0,4],[],[2,11,3,6,9,4,6,10,9],[8,6,1,8,1,3],[10,0,6,0,4,6],[8,0,3,9,6,10,9,4,6],[10,4,6,10,9,4],[],[],[],[5,3,1],[],[0,6,2],[],[7,4,8,5,2,1,5,6,2],[],[],[2,4,0],[7,4,8,2,11,3,10,5,6],[7,1,3],[5,6,10,0,9,1,8,7,4],[5,6,10,7,0,3,7,4,0],[10,5,6,4,8,7],[9,11,8],[3,5,6],[0,5,11,0,11,8],[6,3,5,3,1,5],[3,9,6,3,8,9],[9,6,0,6,2,0],[0,3,8,2,5,6,2,1,5],[1,6,2,1,5,6],[9,11,8],[1,0,9,6,10,5,11,3,2],[6,10,5,2,8,0,2,11,8],[3,2,11,10,5,6],[10,5,6,9,3,8,9,1,3],[0,9,1,5,6,10],[8,0,3,10,5,6],[10,5,6],[],[],[],[],[],[],[],[1,10,2,9,11,6,9,8,11],[],[],[6,0,2],[3,6,9,3,2,6],[3,5,1],[0,5,1,0,11,5],[0,3,5],[6,9,11,9,8,11],[],[],[],[4,5,9,7,1,10,7,3,1],[],[11,6,7,2,4,5,2,0,4],[11,6,7,8,0,3,1,10,2,9,4,5],[6,7,11,1,10,2,9,4,5],[],[4,1,0,4,5,1,6,7,3,6,3,2],[9,4,5,0,6,7,0,2,6],[4,5,9,6,3,2,6,7,3],[6,7,11,5,3,8,5,1,3],[6,7,11,4,1,0,4,5,1],[4,5,9,3,8,0,11,6,7],[9,4,5,7,11,6],[],[],[0,6,4],[8,6,4,8,1,6],[],[0,10,2,0,9,10,4,8,11,4,11,6],[10,2,1,6,0,3,6,4,0],[10,2,1,11,4,8,11,6,4],[4,2,6],[1,0,9,2,4,8,2,6,4],[2,4,0,2,6,4],[8,2,4,2,6,4],[11,4,1,11,6,4],[0,9,1,4,11,6,4,8,11],[3,6,0,6,4,0],[8,6,4,8,11,6],[10,8,9],[6,3,9,6,7,3],[6,7,1],[10,7,1,7,3,1],[7,11,6,8,10,2,8,9,10],[11,6,7,10,0,9,10,2,0],[2,1,10,7,11,6,8,0,3],[1,10,2,6,7,11],[7,2,6,7,9,2],[1,0,9,3,6,7,3,2,6],[7,0,6,0,2,6],[2,7,3,2,6,7],[7,11,6,3,9,1,3,8,9],[9,1,0,11,6,7],[0,3,8,11,6,7],[11,6,7],[],[],[],[],[5,3,7],[8,5,2,8,7,5],[5,3,7],[1,10,2,5,8,7,5,9,8],[1,7,5],[1,7,5],[9,2,7,9,7,5],[11,3,2,8,5,9,8,7,5],[1,3,7,1,7,5],[0,7,1,7,5,1],[9,3,5,3,7,5],[9,7,5,9,8,7],[8,10,11],[3,4,10,3,10,11],[8,10,11],[5,9,4,1,11,3,1,10,11],[2,4,5],[5,2,4,2,0,4],[0,3,8,5,9,4,10,2,1],[2,1,10,9,4,5],[2,8,5,2,11,8],[3,2,11,1,4,5,1,0,4],[9,4,5,8,2,11,8,0,2],[11,3,2,9,4,5],[8,5,3,5,1,3],[5,0,4,5,1,0],[3,8,0,4,5,9],[9,4,5],[11,9,10],[11,9,10],[1,11,4,1,10,11],[8,7,4,11,1,10,11,3,1],[2,7,9,2,9,10],[4,8,7,0,10,2,0,9,10],[2,1,10,0,7,4,0,3,7],[10,2,1,8,7,4],[1,7,4],[3,2,11,4,8,7,9,1,0],[11,4,2,4,0,2],[2,11,3,7,4,8],[4,1,7,1,3,7],[1,0,9,8,7,4],[3,4,0,3,7,4],[8,7,4],[8,9,10,8,10,11],[3,9,11,9,10,11],[0,10,8,10,11,8],[10,3,1,10,11,3],[2,8,10,8,9,10],[9,2,0,9,10,2],[8,0,3,1,10,2],[10,2,1],[1,11,9,11,8,9],[11,3,2,0,9,1],[11,0,2,11,8,0],[11,3,2],[8,1,3,8,9,1],[9,1,0],[8,0,3],[]],t=[0,265,515,778,2060,2309,2575,2822,1030,1295,1541,1804,3082,3331,3593,3840,400,153,915,666,2460,2197,2975,2710,1430,1183,1941,1692,3482,3219,3993,3728,560,825,51,314,2620,2869,2111,2358,1590,1855,1077,1340,3642,3891,3129,3376,928,681,419,170,2988,2725,2479,2214,1958,1711,1445,1196,4010,3747,3497,3232,2240,2505,2755,3018,204,453,719,966,3270,3535,3781,4044,1226,1475,1737,1984,2384,2137,2899,2650,348,85,863,598,3414,3167,3925,3676,1370,1107,1881,1616,2800,3065,2291,2554,764,1013,255,502,3830,4095,3317,3580,1786,2035,1273,1520,2912,2665,2403,2154,876,613,367,102,3942,3695,3429,3180,1898,1635,1385,1120,1120,1385,1635,1898,3180,3429,3695,3942,102,367,613,876,2154,2403,2665,2912,1520,1273,2035,1786,3580,3317,4095,3830,502,255,1013,764,2554,2291,3065,2800,1616,1881,1107,1370,3676,3925,3167,3414,598,863,85,348,2650,2899,2137,2384,1984,1737,1475,1226,4044,3781,3535,3270,966,719,453,204,3018,2755,2505,2240,3232,3497,3747,4010,1196,1445,1711,1958,2214,2479,2725,2988,170,419,681,928,3376,3129,3891,3642,1340,1077,1855,1590,2358,2111,2869,2620,314,51,825,560,3728,3993,3219,3482,1692,1941,1183,1430,2710,2975,2197,2460,666,915,153,400,3840,3593,3331,3082,1804,1541,1295,1030,2822,2575,2309,2060,778,515,265,0],n=[[],[8,3,0],[9,0,1],[8,3,1,8,1,9],[11,2,3],[11,2,0,11,0,8],[11,2,3,0,1,9],[2,1,11,1,9,11,11,9,8],[10,1,2],[8,3,0,1,2,10],[9,0,2,9,2,10],[3,2,8,2,10,8,8,10,9],[10,1,3,10,3,11],[1,0,10,0,8,10,10,8,11],[0,3,9,3,11,9,9,11,10],[8,10,9,8,11,10],[8,4,7],[3,0,4,3,4,7],[1,9,0,8,4,7],[9,4,1,4,7,1,1,7,3],[2,3,11,7,8,4],[7,11,4,11,2,4,4,2,0],[3,11,2,4,7,8,9,0,1],[2,7,11,2,1,7,1,4,7,1,9,4],[10,1,2,8,4,7],[2,10,1,0,4,7,0,7,3],[4,7,8,0,2,10,0,10,9],[2,7,3,2,9,7,7,9,4,2,10,9],[8,4,7,11,10,1,11,1,3],[11,4,7,1,4,11,1,11,10,1,0,4],[3,8,0,7,11,4,11,9,4,11,10,9],[7,11,4,4,11,9,11,10,9],[9,5,4],[3,0,8,4,9,5],[5,4,0,5,0,1],[4,8,5,8,3,5,5,3,1],[11,2,3,9,5,4],[9,5,4,8,11,2,8,2,0],[3,11,2,1,5,4,1,4,0],[8,5,4,2,5,8,2,8,11,2,1,5],[2,10,1,9,5,4],[0,8,3,5,4,9,10,1,2],[10,5,2,5,4,2,2,4,0],[3,4,8,3,2,4,2,5,4,2,10,5],[5,4,9,1,3,11,1,11,10],[0,9,1,4,8,5,8,10,5,8,11,10],[3,4,0,3,10,4,4,10,5,3,11,10],[4,8,5,5,8,10,8,11,10],[9,5,7,9,7,8],[0,9,3,9,5,3,3,5,7],[8,0,7,0,1,7,7,1,5],[1,7,3,1,5,7],[11,2,3,8,9,5,8,5,7],[9,2,0,9,7,2,2,7,11,9,5,7],[0,3,8,2,1,11,1,7,11,1,5,7],[2,1,11,11,1,7,1,5,7],[1,2,10,5,7,8,5,8,9],[9,1,0,10,5,2,5,3,2,5,7,3],[5,2,10,8,2,5,8,5,7,8,0,2],[10,5,2,2,5,3,5,7,3],[3,9,1,3,8,9,7,11,10,7,10,5],[9,1,0,10,7,11,10,5,7],[3,8,0,7,10,5,7,11,10],[11,5,7,11,10,5],[11,7,6],[0,8,3,11,7,6],[9,0,1,11,7,6],[7,6,11,3,1,9,3,9,8],[2,3,7,2,7,6],[8,7,0,7,6,0,0,6,2],[1,9,0,3,7,6,3,6,2],[7,6,2,7,2,9,2,1,9,7,9,8],[1,2,10,6,11,7],[2,10,1,7,6,11,8,3,0],[11,7,6,10,9,0,10,0,2],[7,6,11,3,2,8,8,2,10,8,10,9],[6,10,7,10,1,7,7,1,3],[6,10,1,6,1,7,7,1,0,7,0,8],[9,0,3,6,9,3,6,10,9,6,3,7],[6,10,7,7,10,8,10,9,8],[8,4,6,8,6,11],[11,3,6,3,0,6,6,0,4],[0,1,9,4,6,11,4,11,8],[1,9,4,11,1,4,11,3,1,11,4,6],[3,8,2,8,4,2,2,4,6],[2,0,4,2,4,6],[1,9,0,3,8,2,2,8,4,2,4,6],[9,4,1,1,4,2,4,6,2],[10,1,2,11,8,4,11,4,6],[10,1,2,11,3,6,6,3,0,6,0,4],[0,2,10,0,10,9,4,11,8,4,6,11],[2,11,3,6,9,4,6,10,9],[8,4,6,8,6,1,6,10,1,8,1,3],[1,0,10,10,0,6,0,4,6],[8,0,3,9,6,10,9,4,6],[10,4,6,10,9,4],[9,5,4,7,6,11],[4,9,5,3,0,8,11,7,6],[6,11,7,4,0,1,4,1,5],[6,11,7,4,8,5,5,8,3,5,3,1],[4,9,5,6,2,3,6,3,7],[9,5,4,8,7,0,0,7,6,0,6,2],[4,0,1,4,1,5,6,3,7,6,2,3],[7,4,8,5,2,1,5,6,2],[6,11,7,1,2,10,9,5,4],[11,7,6,8,3,0,1,2,10,9,5,4],[11,7,6,10,5,2,2,5,4,2,4,0],[7,4,8,2,11,3,10,5,6],[4,9,5,6,10,7,7,10,1,7,1,3],[5,6,10,0,9,1,8,7,4],[5,6,10,7,0,3,7,4,0],[10,5,6,4,8,7],[5,6,9,6,11,9,9,11,8],[0,9,5,0,5,3,3,5,6,3,6,11],[0,1,5,0,5,11,5,6,11,0,11,8],[11,3,6,6,3,5,3,1,5],[9,5,6,3,9,6,3,8,9,3,6,2],[5,6,9,9,6,0,6,2,0],[0,3,8,2,5,6,2,1,5],[1,6,2,1,5,6],[1,2,10,5,6,9,9,6,11,9,11,8],[1,0,9,6,10,5,11,3,2],[6,10,5,2,8,0,2,11,8],[3,2,11,10,5,6],[10,5,6,9,3,8,9,1,3],[0,9,1,5,6,10],[8,0,3,10,5,6],[10,5,6],[10,6,5],[8,3,0,10,6,5],[0,1,9,5,10,6],[10,6,5,9,8,3,9,3,1],[3,11,2,10,6,5],[6,5,10,2,0,8,2,8,11],[1,9,0,6,5,10,11,2,3],[1,10,2,5,9,6,9,11,6,9,8,11],[1,2,6,1,6,5],[0,8,3,2,6,5,2,5,1],[5,9,6,9,0,6,6,0,2],[9,6,5,3,6,9,3,9,8,3,2,6],[11,6,3,6,5,3,3,5,1],[0,5,1,0,11,5,5,11,6,0,8,11],[0,5,9,0,3,5,3,6,5,3,11,6],[5,9,6,6,9,11,9,8,11],[10,6,5,4,7,8],[5,10,6,7,3,0,7,0,4],[5,10,6,0,1,9,8,4,7],[4,5,9,6,7,10,7,1,10,7,3,1],[7,8,4,2,3,11,10,6,5],[11,6,7,10,2,5,2,4,5,2,0,4],[11,6,7,8,0,3,1,10,2,9,4,5],[6,7,11,1,10,2,9,4,5],[7,8,4,5,1,2,5,2,6],[4,1,0,4,5,1,6,7,3,6,3,2],[9,4,5,8,0,7,0,6,7,0,2,6],[4,5,9,6,3,2,6,7,3],[6,7,11,4,5,8,5,3,8,5,1,3],[6,7,11,4,1,0,4,5,1],[4,5,9,3,8,0,11,6,7],[9,4,5,7,11,6],[10,6,4,10,4,9],[8,3,0,9,10,6,9,6,4],[1,10,0,10,6,0,0,6,4],[8,6,4,8,1,6,6,1,10,8,3,1],[2,3,11,6,4,9,6,9,10],[0,10,2,0,9,10,4,8,11,4,11,6],[10,2,1,11,6,3,6,0,3,6,4,0],[10,2,1,11,4,8,11,6,4],[9,1,4,1,2,4,4,2,6],[1,0,9,3,2,8,2,4,8,2,6,4],[2,4,0,2,6,4],[3,2,8,8,2,4,2,6,4],[1,4,9,11,4,1,11,1,3,11,6,4],[0,9,1,4,11,6,4,8,11],[11,6,3,3,6,0,6,4,0],[8,6,4,8,11,6],[6,7,10,7,8,10,10,8,9],[9,3,0,6,3,9,6,9,10,6,7,3],[6,1,10,6,7,1,7,0,1,7,8,0],[6,7,10,10,7,1,7,3,1],[7,11,6,3,8,2,8,10,2,8,9,10],[11,6,7,10,0,9,10,2,0],[2,1,10,7,11,6,8,0,3],[1,10,2,6,7,11],[7,2,6,7,9,2,2,9,1,7,8,9],[1,0,9,3,6,7,3,2,6],[8,0,7,7,0,6,0,2,6],[2,7,3,2,6,7],[7,11,6,3,9,1,3,8,9],[9,1,0,11,6,7],[0,3,8,11,6,7],[11,6,7],[11,7,5,11,5,10],[3,0,8,7,5,10,7,10,11],[9,0,1,10,11,7,10,7,5],[3,1,9,3,9,8,7,10,11,7,5,10],[10,2,5,2,3,5,5,3,7],[5,10,2,8,5,2,8,7,5,8,2,0],[9,0,1,10,2,5,5,2,3,5,3,7],[1,10,2,5,8,7,5,9,8],[2,11,1,11,7,1,1,7,5],[0,8,3,2,11,1,1,11,7,1,7,5],[9,0,2,9,2,7,2,11,7,9,7,5],[11,3,2,8,5,9,8,7,5],[1,3,7,1,7,5],[8,7,0,0,7,1,7,5,1],[0,3,9,9,3,5,3,7,5],[9,7,5,9,8,7],[4,5,8,5,10,8,8,10,11],[3,0,4,3,4,10,4,5,10,3,10,11],[0,1,9,4,5,8,8,5,10,8,10,11],[5,9,4,1,11,3,1,10,11],[3,8,4,3,4,2,2,4,5,2,5,10],[10,2,5,5,2,4,2,0,4],[0,3,8,5,9,4,10,2,1],[2,1,10,9,4,5],[8,4,5,2,8,5,2,11,8,2,5,1],[3,2,11,1,4,5,1,0,4],[9,4,5,8,2,11,8,0,2],[11,3,2,9,4,5],[4,5,8,8,5,3,5,1,3],[5,0,4,5,1,0],[3,8,0,4,5,9],[9,4,5],[7,4,11,4,9,11,11,9,10],[3,0,8,7,4,11,11,4,9,11,9,10],[11,7,4,1,11,4,1,10,11,1,4,0],[8,7,4,11,1,10,11,3,1],[2,3,7,2,7,9,7,4,9,2,9,10],[4,8,7,0,10,2,0,9,10],[2,1,10,0,7,4,0,3,7],[10,2,1,8,7,4],[2,11,7,2,7,1,1,7,4,1,4,9],[3,2,11,4,8,7,9,1,0],[7,4,11,11,4,2,4,0,2],[2,11,3,7,4,8],[9,1,4,4,1,7,1,3,7],[1,0,9,8,7,4],[3,4,0,3,7,4],[8,7,4],[8,9,10,8,10,11],[0,9,3,3,9,11,9,10,11],[1,10,0,0,10,8,10,11,8],[10,3,1,10,11,3],[3,8,2,2,8,10,8,9,10],[9,2,0,9,10,2],[8,0,3,1,10,2],[10,2,1],[2,11,1,1,11,9,11,8,9],[11,3,2,0,9,1],[11,0,2,11,8,0],[11,3,2],[8,1,3,8,9,1],[9,1,0],[8,0,3],[]],i})();",
    "SurfaceWorker": "blob:https://3dmol.csb.pitt.edu/44803b02-d85c-4ca5-9283-6deb899da0a4",
    "labelStyles": {
        "purple": {
            "backgroundColor": 8388736,
            "backgroundOpacity": 0.8
        },
        "milk": {
            "font": "Arial",
            "fontSize": 12,
            "fontColor": 0,
            "borderThickness": 1,
            "borderColor": 15794175,
            "backgroundColor": 15792383,
            "backgroundOpacity": 0.9
        },
        "blue": {
            "font": "Arial",
            "fontSize": 12,
            "fontColor": 15792383,
            "borderThickness": 1,
            "borderColor": 9699539,
            "backgroundColor": 139,
            "backgroundOpacity": 0.9
        },
        "chocolate": {
            "font": "Arial",
            "fontSize": 12,
            "fontColor": 15792383,
            "borderThickness": 1,
            "borderColor": 10824234,
            "backgroundColor": 13789470,
            "backgroundOpacity": 0.9
        },
        "lime": {
            "font": "Arial",
            "fontSize": 12,
            "fontColor": 0,
            "borderThickness": 1,
            "borderColor": 9498256,
            "backgroundColor": 65280,
            "backgroundOpacity": 0.9
        },
        "rose": {
            "font": "Arial",
            "fontSize": 12,
            "fontColor": 0,
            "borderThickness": 1,
            "borderColor": 16121850,
            "backgroundColor": 16770273,
            "backgroundOpacity": 0.9
        },
        "yellow": {
            "font": "Arial",
            "fontSize": 12,
            "fontColor": 0,
            "borderThickness": 1,
            "borderColor": 16753920,
            "backgroundColor": 16776960,
            "backgroundOpacity": 0.9
        }
    },
    "longPressDuration": 1500,
    "defaultCSS": {
        "ListInput": {
            "select": {
                "width": "auto",
                "border": "none",
                "margin": "0px",
                "font-family": "Arial",
                "padding": "0px",
                "height": "20px",
                "border-radius": "4px",
                "box-sizing": "border-box"
            }
        },
        "Input": {
            "input": {
                "margin-bottom": "0px",
                "padding": "0px",
                "border-radius": "4px",
                "font-family": "Arial",
                "width": "96%"
            },
            "boundingBox": {
                "margin-left": "4px",
                "margin-right": ""
            }
        },
        "Checkbox": {},
        "Slider": {},
        "Color": {},
        "TextDefault": {
            "font-family": "Arial",
            "margin-left": "4px"
        },
        "LinkBreak": {
            "height": "3px",
            "border-bottom": "1px solid #687193"
        }
    },
    "autoinit": true,
    "processing_autoinit": false
}